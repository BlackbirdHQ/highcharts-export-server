"use strict";require("colors");var e=require("dotenv"),t=require("fs"),r=require("path"),i=require("https-proxy-agent"),o=require("http"),n=require("https"),s=require("url"),a=require("zod"),l=require("prompts"),c=require("tarn"),p=require("uuid"),u=require("node:path"),h=require("puppeteer"),d=require("node:crypto"),g=require("cors"),m=require("express"),f=require("multer"),y=require("express-rate-limit"),v="undefined"!=typeof document?document.currentScript:null;function b(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var i=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,i.get?i:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var w=b(s);async function E(e,t={}){return new Promise(((r,i)=>{const s=(e=>e.startsWith("https")?n:o)(e);s.get(e,t,(e=>{let t="";e.on("data",(e=>{t+=e})),e.on("end",(()=>{t||i("Nothing was fetched from the URL."),e.text=t,r(e)}))})).on("error",(e=>{i(e)}))}))}const T={puppeteer:{args:{value:[],type:"string[]",description:"Arguments array to send to Puppeteer."}},highcharts:{version:{value:"latest",envLink:"HIGHCHARTS_VERSION",type:"string",description:"The Highcharts version to be used."},cdnURL:{value:"https://code.highcharts.com/",envLink:"HIGHCHARTS_CDN_URL",type:"string",description:"The CDN URL for Highcharts scripts to be used."},coreScripts:{envLink:"HIGHCHARTS_CORE_SCRIPTS",value:["highcharts","highcharts-more","highcharts-3d"],type:"string[]",description:"The core Highcharts scripts to fetch."},modules:{envLink:"HIGHCHARTS_MODULES",value:["stock","map","gantt","exporting","export-data","parallel-coordinates","accessibility","annotations-advanced","boost-canvas","boost","data","data-tools","draggable-points","static-scale","broken-axis","heatmap","tilemap","tiledwebmap","timeline","treemap","treegraph","item-series","drilldown","histogram-bellcurve","bullet","funnel","funnel3d","geoheatmap","pyramid3d","networkgraph","overlapping-datalabels","pareto","pattern-fill","pictorial","price-indicator","sankey","arc-diagram","dependency-wheel","series-label","solid-gauge","sonification","stock-tools","streamgraph","sunburst","variable-pie","variwide","vector","venn","windbarb","wordcloud","xrange","no-data-to-display","drag-panes","debugger","dumbbell","lollipop","cylinder","organization","dotplot","marker-clusters","hollowcandlestick","heikinashi","flowmap"],type:"string[]",description:"The modules of Highcharts to fetch."},indicators:{envLink:"HIGHCHARTS_INDICATORS",value:["indicators-all"],type:"string[]",description:"The indicators of Highcharts to fetch."},scripts:{value:["https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js","https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js"],type:"string[]",description:"Additional optional scripts or dependencies to fetch."},forceFetch:{envLink:"HIGHCHARTS_FORCE_FETCH",value:!1,type:"boolean",description:"The flag to determine whether to refetch all scripts after each server rerun."},cachePath:{envLink:"HIGHCHARTS_CACHE_PATH",value:".cache",type:"string",description:"The path to the cache directory. It is used to store the Highcharts scripts and custom scripts."}},export:{infile:{value:!1,type:"string",description:"The input file should include a name and a type (json or svg). It must be correctly formatted as a JSON or SVG file."},instr:{value:!1,type:"string",description:"Input, provided in the form of a stringified JSON or SVG file, will override the --infile option."},options:{value:!1,type:"string",description:"An alias for the --instr option."},outfile:{value:!1,type:"string",description:"The output filename along with a type (jpeg, png, pdf, or svg). This will ignore the --type flag."},type:{envLink:"EXPORT_TYPE",value:"png",type:"string",description:"The file export format. It can be jpeg, png, pdf, or svg."},constr:{envLink:"EXPORT_CONSTR",value:"chart",type:"string",description:"The constructor to use. Can be chart, stockChart, mapChart, or ganttChart."},defaultHeight:{envLink:"EXPORT_DEFAULT_HEIGHT",value:400,type:"number",description:"the default height of the exported chart. Used when no value is set."},defaultWidth:{envLink:"EXPORT_DEFAULT_WIDTH",value:600,type:"number",description:"The default width of the exported chart. Used when no value is set."},defaultScale:{envLink:"EXPORT_DEFAULT_SCALE",value:1,type:"number",description:"The default scale of the exported chart. Used when no value is set."},height:{type:"number",value:!1,description:"The height of the exported chart, overriding the option in the chart settings."},width:{type:"number",value:!1,description:"The width of the exported chart, overriding the option in the chart settings."},scale:{value:!1,type:"number",description:"The scale of the exported chart, overriding the option in the chart settings. Ranges between 0.1 and 5.0."},globalOptions:{value:!1,type:"string",description:"Either a stringified JSON or a filename containing options to be passed into the Highcharts.setOptions."},themeOptions:{value:!1,type:"string",description:"Either a stringified JSON or a filename containing theme options to be passed into the Highcharts.setOptions."},batch:{value:!1,type:"string",description:'Initiates a batch job with a string containing input/output pairs: "in=out;in=out;...".'},rasterizationTimeout:{envLink:"EXPORT_RASTERIZATION_TIMEOUT",value:1500,type:"number",description:"The duration in milliseconds to wait for rendering a webpage."}},customLogic:{allowCodeExecution:{envLink:"CUSTOM_LOGIC_ALLOW_CODE_EXECUTION",value:!1,type:"boolean",description:"Controls whether the execution of arbitrary code is allowed during the exporting process."},allowFileResources:{envLink:"CUSTOM_LOGIC_ALLOW_FILE_RESOURCES",value:!1,type:"boolean",description:"Controls the ability to inject resources from the filesystem. This setting has no effect when running as a server."},customCode:{value:!1,type:"string",description:"Custom code to execute before chart initialization. It can be a function, code wrapped within a function, or a filename with the .js extension."},callback:{value:!1,type:"string",description:"JavaScript code to run during construction. It can be a function or a filename with the .js extension."},resources:{value:!1,type:"string",description:"Additional resource in the form of a stringified JSON, which may contain files, js, and css sections."},loadConfig:{value:!1,type:"string",legacyName:"fromFile",description:"A file containing a pre-defined configuration to use."},createConfig:{value:!1,type:"string",description:"Enables setting options through a prompt and saving them in a provided config file."}},server:{enable:{envLink:"SERVER_ENABLE",value:!1,type:"boolean",cliName:"enableServer",description:"When set to true, the server starts on the local IP address 0.0.0.0."},host:{envLink:"SERVER_HOST",value:"0.0.0.0",type:"string",description:"The hostname of the server. Additionally, it starts a server on the provided hostname."},port:{envLink:"SERVER_PORT",value:7801,type:"number",description:"The server port when enabled."},benchmarking:{envLink:"SERVER_BENCHMARKING",value:!1,type:"boolean",cliName:"serverBenchmarking",description:"Indicates whether to display the duration, in milliseconds, of specific actions that occur on the server while serving a request."},ssl:{enable:{envLink:"SERVER_SSL_ENABLE",value:!1,type:"boolean",cliName:"enableSsl",description:"Enables or disables the SSL protocol."},force:{envLink:"SERVER_SSL_FORCE",value:!1,type:"boolean",cliName:"sslForced",legacyName:"sslOnly",description:"When set to true, the server is forced to serve only over HTTPS."},port:{envLink:"SERVER_SSL_PORT",value:443,type:"number",cliName:"sslPort",description:"The port on which to run the SSL server."},certPath:{envLink:"SERVER_SSL_CERT_PATH",value:"",type:"string",legacyName:"sslPath",description:"The path to the SSL certificate/key file."}},rateLimiting:{enable:{envLink:"SERVER_RATE_LIMITING_ENABLE",value:!1,type:"boolean",cliName:"enableRateLimiting",description:"Enables rate limiting for the server."},maxRequests:{envLink:"SERVER_RATE_LIMITING_MAX_REQUESTS",value:10,type:"number",legacyName:"rateLimit",description:"The maximum number of requests allowed in one minute."},window:{envLink:"SERVER_RATE_LIMITING_WINDOW",value:1,type:"number",description:"The time window, in minutes, for the rate limiting."},delay:{envLink:"SERVER_RATE_LIMITING_DELAY",value:0,type:"number",description:"The delay duration for each successive request before reaching the maximum limit."},trustProxy:{envLink:"SERVER_RATE_LIMITING_TRUST_PROXY",value:!1,type:"boolean",description:"Set this to true if the server is behind a load balancer."},skipKey:{envLink:"SERVER_RATE_LIMITING_SKIP_KEY",value:"",type:"string",description:"Allows bypassing the rate limiter and should be provided with the skipToken argument."},skipToken:{envLink:"SERVER_RATE_LIMITING_SKIP_TOKEN",value:"",type:"string",description:"Allows bypassing the rate limiter and should be provided with the skipKey argument."}}},pool:{minWorkers:{envLink:"POOL_MIN_WORKERS",value:4,type:"number",description:"The number of minimum and initial pool workers to spawn."},maxWorkers:{envLink:"POOL_MAX_WORKERS",value:8,type:"number",legacyName:"workers",description:"The number of maximum pool workers to spawn."},workLimit:{envLink:"POOL_WORK_LIMIT",value:40,type:"number",description:"The number of work pieces that can be performed before restarting the worker process."},acquireTimeout:{envLink:"POOL_ACQUIRE_TIMEOUT",value:5e3,type:"number",description:"The duration, in milliseconds, to wait for acquiring a resource."},createTimeout:{envLink:"POOL_CREATE_TIMEOUT",value:5e3,type:"number",description:"The duration, in milliseconds, to wait for creating a resource."},destroyTimeout:{envLink:"POOL_DESTROY_TIMEOUT",value:5e3,type:"number",description:"The duration, in milliseconds, to wait for destroying a resource."},idleTimeout:{envLink:"POOL_IDLE_TIMEOUT",value:3e4,type:"number",description:"The duration, in milliseconds, after which an idle resource is destroyed."},createRetryInterval:{envLink:"POOL_CREATE_RETRY_INTERVAL",value:200,type:"number",description:"The duration, in milliseconds, to wait before retrying the create process in case of a failure."},reaperInterval:{envLink:"POOL_REAPER_INTERVAL",value:1e3,type:"number",description:"The duration, in milliseconds, after which the check for idle resources to destroy is triggered."},benchmarking:{envLink:"POOL_BENCHMARKING",value:!1,type:"boolean",cliName:"poolBenchmarking",description:"Indicate whether to show statistics for the pool of resources or not."},listenToProcessExits:{envLink:"POOL_LISTEN_TO_PROCESS_EXITS",value:!0,type:"boolean",description:"Decides whether or not to attach process.exit handlers."}},logging:{level:{envLink:"LOGGING_LEVEL",value:4,type:"number",cliName:"logLevel",description:"The logging level to be used."},file:{envLink:"LOGGING_FILE",value:"highcharts-export-server.log",type:"string",cliName:"logFile",description:"The name of a log file. The logDest option also needs to be set to enable file logging."},dest:{envLink:"LOGGING_DEST",value:"log/",type:"string",cliName:"logDest",description:"The path to store log files. This also enables file logging."}},ui:{enable:{envLink:"UI_ENABLE",value:!1,type:"boolean",cliName:"enableUi",description:"Enables or disables the user interface (UI) for the export server."},route:{envLink:"UI_ROUTE",value:"/",type:"string",cliName:"uiRoute",description:"The endpoint route to which the user interface (UI) should be attached."}},other:{noLogo:{envLink:"OTHER_NO_LOGO",value:!1,type:"boolean",description:"Skip printing the logo on a startup. Will be replaced by a simple text."}}},S={puppeteer:[{type:"list",name:"args",message:"Puppeteer arguments",initial:T.puppeteer.args.value.join(","),separator:","}],highcharts:[{type:"text",name:"version",message:"Highcharts version",initial:T.highcharts.version.value},{type:"text",name:"cdnURL",message:"The URL of CDN",initial:T.highcharts.cdnURL.value},{type:"multiselect",name:"modules",message:"Available modules",instructions:"Space: Select specific, A: Select all, Enter: Confirm.",choices:T.highcharts.modules.value},{type:"list",name:"scripts",message:"Custom scripts",initial:T.highcharts.scripts.value.join(","),separator:","},{type:"toggle",name:"forceFetch",message:"Force re-fetch the scripts",initial:T.highcharts.forceFetch.value},{type:"text",name:"cachePath",message:"The path to the cache directory",initial:T.highcharts.cachePath.value}],export:[{type:"select",name:"type",message:"The default export file type",hint:`Default: ${T.export.type.value}`,initial:0,choices:["png","jpeg","pdf","svg"]},{type:"select",name:"constr",message:"The default constructor for Highcharts",hint:`Default: ${T.export.constr.value}`,initial:0,choices:["chart","stockChart","mapChart","ganttChart"]},{type:"number",name:"defaultHeight",message:"The default fallback height of the exported chart",initial:T.export.defaultHeight.value},{type:"number",name:"defaultWidth",message:"The default fallback width of the exported chart",initial:T.export.defaultWidth.value},{type:"number",name:"defaultScale",message:"The default fallback scale of the exported chart",initial:T.export.defaultScale.value,min:.1,max:5},{type:"number",name:"rasterizationTimeout",message:"The rendering webpage timeout in milliseconds",initial:T.export.rasterizationTimeout.value}],customLogic:[{type:"toggle",name:"allowCodeExecution",message:"Enable execution of custom code",initial:T.customLogic.allowCodeExecution.value},{type:"toggle",name:"allowFileResources",message:"Enable file resources",initial:T.customLogic.allowFileResources.value}],server:[{type:"toggle",name:"enable",message:"Starts the server on 0.0.0.0",initial:T.server.enable.value},{type:"text",name:"host",message:"Server hostname",initial:T.server.host.value},{type:"number",name:"port",message:"Server port",initial:T.server.port.value},{type:"toggle",name:"benchmarking",message:"Enable server benchmarking",initial:T.server.benchmarking.value},{type:"toggle",name:"ssl.enable",message:"Enable SSL protocol",initial:T.server.ssl.enable.value},{type:"toggle",name:"ssl.force",message:"Force serving only over HTTPS",initial:T.server.ssl.force.value},{type:"number",name:"ssl.port",message:"SSL server port",initial:T.server.ssl.port.value},{type:"text",name:"ssl.certPath",message:"The path to find the SSL certificate/key",initial:T.server.ssl.certPath.value},{type:"toggle",name:"rateLimiting.enable",message:"Enable rate limiting",initial:T.server.rateLimiting.enable.value},{type:"number",name:"rateLimiting.maxRequests",message:"The maximum requests allowed per minute",initial:T.server.rateLimiting.maxRequests.value},{type:"number",name:"rateLimiting.window",message:"The rate-limiting time window in minutes",initial:T.server.rateLimiting.window.value},{type:"number",name:"rateLimiting.delay",message:"The delay for each successive request before reaching the maximum",initial:T.server.rateLimiting.delay.value},{type:"toggle",name:"rateLimiting.trustProxy",message:"Set to true if behind a load balancer",initial:T.server.rateLimiting.trustProxy.value},{type:"text",name:"rateLimiting.skipKey",message:"Allows bypassing the rate limiter when provided with the skipToken argument",initial:T.server.rateLimiting.skipKey.value},{type:"text",name:"rateLimiting.skipToken",message:"Allows bypassing the rate limiter when provided with the skipKey argument",initial:T.server.rateLimiting.skipToken.value}],pool:[{type:"number",name:"minWorkers",message:"The initial number of workers to spawn",initial:T.pool.minWorkers.value},{type:"number",name:"maxWorkers",message:"The maximum number of workers to spawn",initial:T.pool.maxWorkers.value},{type:"number",name:"workLimit",message:"The pieces of work that can be performed before restarting a Puppeteer process",initial:T.pool.workLimit.value},{type:"number",name:"acquireTimeout",message:"The number of milliseconds to wait for acquiring a resource",initial:T.pool.acquireTimeout.value},{type:"number",name:"createTimeout",message:"The number of milliseconds to wait for creating a resource",initial:T.pool.createTimeout.value},{type:"number",name:"destroyTimeout",message:"The number of milliseconds to wait for destroying a resource",initial:T.pool.destroyTimeout.value},{type:"number",name:"idleTimeout",message:"The number of milliseconds after an idle resource is destroyed",initial:T.pool.idleTimeout.value},{type:"number",name:"createRetryInterval",message:"The retry interval in milliseconds after a create process fails",initial:T.pool.createRetryInterval.value},{type:"number",name:"reaperInterval",message:"The reaper interval in milliseconds after triggering the check for idle resources to destroy",initial:T.pool.reaperInterval.value},{type:"toggle",name:"benchmarking",message:"Enable benchmarking for a resource pool",initial:T.pool.benchmarking.value},{type:"toggle",name:"listenToProcessExits",message:"Set to false to skip attaching process.exit handlers",initial:T.pool.listenToProcessExits.value}],logging:[{type:"number",name:"level",message:"The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose, 5: benchmark)",initial:T.logging.level.value,round:0,min:0,max:5},{type:"text",name:"file",message:"A log file name. Set with the --logDest to enable file logging",initial:T.logging.file.value},{type:"text",name:"dest",message:"The path to log files. Enables file logging",initial:T.logging.dest.value}],ui:[{type:"toggle",name:"enable",message:"Enable UI for the export server",initial:T.ui.enable.value},{type:"text",name:"route",message:"A route to attach the UI",initial:T.ui.route.value}],other:[{type:"toggle",name:"noLogo",message:"Skip printing the logo on startup. Replaced by simple text",initial:T.other.noLogo.value}]},x=["options","globalOptions","themeOptions","resources","payload"],R={},L=(e,t="")=>{Object.keys(e).forEach((r=>{if(!["puppeteer","highcharts"].includes(r)){const i=e[r];void 0===i.value?L(i,`${t}.${r}`):(R[i.cliName||r]=`${t}.${r}`.substring(1),void 0!==i.legacyName&&(R[i.legacyName]=`${t}.${r}`.substring(1)))}}))};L(T);const k=["red","yellow","blue","gray","green"];let O={toConsole:!0,toFile:!1,pathCreated:!1,levelsDesc:[{title:"error",color:k[0]},{title:"warning",color:k[1]},{title:"notice",color:k[2]},{title:"verbose",color:k[3]},{title:"benchmark",color:k[4]}],listeners:[]};for(const[e,t]of Object.entries(T.logging))O[e]=t.value;const _=(e,r)=>{O.toFile&&(O.pathCreated||(!t.existsSync(O.dest)&&t.mkdirSync(O.dest),O.pathCreated=!0),t.appendFile(`${O.dest}${O.file}`,[r].concat(e).join(" ")+"\n",(e=>{e&&(console.log(`[logger] Unable to write to log file: ${e}`),O.toFile=!1)})))},I=(...e)=>{const[t,...r]=e,{level:i,levelsDesc:o}=O;if(5!==t&&(0===t||t>i||i>o.length))return;const n=`${(new Date).toString().split("(")[0].trim()} [${o[t-1].title}] -`;O.listeners.forEach((e=>{e(n,r.join(" "))})),O.toConsole&&console.log.apply(void 0,[n.toString()[O.levelsDesc[t-1].color]].concat(r)),_(r,n)},A=(e,t,r)=>{const i=r||t.message,{level:o,levelsDesc:n}=O;if(0===e||e>o||o>n.length)return;const s=`${(new Date).toString().split("(")[0].trim()} [${n[e-1].title}] -`,a=t.message!==t.stackMessage||void 0===t.stackMessage?t.stack:t.stack.split("\n").slice(1).join("\n"),l=[i,"\n",a];O.toConsole&&console.log.apply(void 0,[s.toString()[O.levelsDesc[e-1].color]].concat([i[k[e-1]],"\n",a])),O.listeners.forEach((e=>{e(s,l.join(" "))})),_(l,s)},C=e=>{e>=0&&e<=O.levelsDesc.length&&(O.level=e)},N=(e,t)=>{if(O={...O,dest:e||O.dest,file:t||O.file,toFile:!0},0===O.dest.length)return I(1,"[logger] File logging initialization: no path supplied.");O.dest.endsWith("/")||(O.dest+="/")},P=s.fileURLToPath(new URL("../.","undefined"==typeof document?require("url").pathToFileURL(__filename).href:v&&v.src||new URL("index.cjs",document.baseURI).href)),$=(e,t)=>{const r=["png","jpeg","pdf","svg"];if(t){const i=t.split(".").pop();"jpg"===i?e="jpeg":r.includes(i)&&e!==i&&(e=i)}return{"image/png":"png","image/jpeg":"jpeg","application/pdf":"pdf","image/svg+xml":"svg"}[e]||r.find((t=>t===e))||"png"},H=(e=!1,r)=>{const i=["js","css","files"];let o=e,n=!1;if(r&&e.endsWith(".json"))try{o=j(t.readFileSync(e,"utf8"))}catch(e){return A(2,e,"[cli] No resources found.")}else o=j(e),o&&!r&&delete o.files;for(const e in o)i.includes(e)?n||(n=!0):delete o[e];return n?(o.files&&(o.files=o.files.map((e=>e.trim())),(!o.files||o.files.length<=0)&&delete o.files),o):I(3,"[cli] No resources found.")};function j(e,t){try{const r=JSON.parse("string"!=typeof e?JSON.stringify(e):e);return"string"!=typeof r&&t?JSON.stringify(r):r}catch{return!1}}const U=e=>{if(null===e||"object"!=typeof e)return e;const t=Array.isArray(e)?[]:{};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=U(e[r]));return t},F=(e,t)=>JSON.stringify(e,((e,r)=>("string"==typeof r&&((r=r.trim()).startsWith("function(")||r.startsWith("function ("))&&r.endsWith("}")&&(r=t?`EXP_FUN${(r+"").replaceAll(/\n|\t|\r/g," ")}EXP_FUN`:void 0),"function"==typeof r?`EXP_FUN${(r+"").replaceAll(/\n|\t|\r/g," ")}EXP_FUN`:r))).replaceAll(/"EXP_FUN|EXP_FUN"/g,"");function G(){console.log("\nUsage of CLI arguments:".bold,"\n------",`\nFor more detailed information, visit the readme at: ${"https://github.com/highcharts/node-export-server#readme".bold.yellow}.`);const e=t=>{for(const[r,i]of Object.entries(t))if(Object.prototype.hasOwnProperty.call(i,"value")){let e=`  --${i.cliName||r} ${("<"+i.type+">").green} `;if(e.length<48)for(let t=e.length;t<48;t++)e+=".";console.log(e,i.description,`[Default: ${i.value.toString().bold}]`.blue)}else e(i)};Object.keys(T).forEach((t=>{["puppeteer","highcharts"].includes(t)||(console.log(`\n${t.toUpperCase()}`.red),e(T[t]))})),console.log("\n")}const M=e=>!["false","undefined","null","NaN","0",""].includes(e)&&!!e,q=(e,r)=>{if(e&&"string"==typeof e)return(e=e.trim()).endsWith(".js")?!!r&&q(t.readFileSync(e,"utf8")):e.startsWith("function()")||e.startsWith("function ()")||e.startsWith("()=>")||e.startsWith("() =>")?`(${e})()`:e.replace(/;$/,"")},D=()=>{const e=process.hrtime.bigint();return()=>Number(process.hrtime.bigint()-e)/1e6};e.config();const W=()=>a.z.enum(["true","false"]).transform((e=>"true"===e)).optional(),V=()=>a.z.string().transform((e=>e.split(",").map((e=>e.trim())))).optional(),z=a.z.object({HIGHCHARTS_VERSION:a.z.string().refine((e=>/^(latest|\d+(\.\d+){0,2})$/.test(e)),{message:"HIGHCHARTS_VERSION must be 'latest', a major version, or in the form XX.YY.ZZ"}).optional(),HIGHCHARTS_CDN_URL:a.z.string().trim().refine((e=>e.startsWith("https://")||e.startsWith("http://")),{message:"Invalid value for HIGHCHARTS_CDN_URL. It should start with http:// or https://."}).optional(),HIGHCHARTS_CORE_SCRIPTS:V(),HIGHCHARTS_MODULES:V(),HIGHCHARTS_INDICATORS:V(),HIGHCHARTS_FORCE_FETCH:W(),HIGHCHARTS_CACHE_PATH:a.z.string().optional(),HIGHCHARTS_ADMIN_TOKEN:a.z.string().optional(),EXPORT_TYPE:a.z.enum(["jpeg","png","pdf","svg"]).optional(),EXPORT_CONSTR:a.z.string().refine((e=>["chart","stockChart","mapChart","ganttChart"].includes(e||"")),{message:"Invalid value for EXPORT_CONSTR. "}).optional(),EXPORT_DEFAULT_HEIGHT:a.z.coerce.number().positive().optional(),EXPORT_DEFAULT_WIDTH:a.z.coerce.number().positive().optional(),EXPORT_DEFAULT_SCALE:a.z.coerce.number().positive().optional(),EXPORT_RASTERIZATION_TIMEOUT:a.z.coerce.number().positive().optional(),CUSTOM_LOGIC_ALLOW_CODE_EXECUTION:W(),CUSTOM_LOGIC_ALLOW_FILEL_RESOURCES:W(),SERVER_ENABLE:W(),SERVER_HOST:a.z.string().optional(),SERVER_PORT:a.z.coerce.number().optional(),SERVER_BENCHMARKING:W(),SERVER_SSL_ENABLE:W(),SERVER_SSL_FORCE:W(),SERVER_SSL_PORT:a.z.coerce.number().optional(),SERVER_SSL_CERT_PATH:a.z.string().optional(),SERVER_RATE_LIMITING_ENABLE:W(),SERVER_RATE_LIMITING_MAX_REQUESTS:a.z.coerce.number().optional(),SERVER_RATE_LIMITING_WINDOW:a.z.coerce.number().optional(),SERVER_RATE_LIMITING_DELAY:a.z.coerce.number().optional(),SERVER_RATE_LIMITING_TRUST_PROXY:W(),SERVER_RATE_LIMITING_SKIP_KEY:a.z.string().optional(),SERVER_RATE_LIMITING_SKIP_TOKEN:a.z.string().optional(),POOL_MIN_WORKERS:a.z.coerce.number().optional(),POOL_MAX_WORKERS:a.z.coerce.number().optional(),POOL_WORK_LIMIT:a.z.coerce.number().optional(),POOL_ACQUIRE_TIMEOUT:a.z.coerce.number().optional(),POOL_CREATE_TIMEOUT:a.z.coerce.number().optional(),POOL_DESTROY_TIMEOUT:a.z.coerce.number().optional(),POOL_IDLE_TIMEOUT:a.z.coerce.number().optional(),POOL_CREATE_RETRY_INTERVAL:a.z.coerce.number().optional(),POOL_REAPER_INTERVAL:a.z.coerce.number().optional(),POOL_BENCHMARKING:W(),POOL_LISTEN_TO_PROCESS_EXITS:W(),LOGGING_LEVEL:a.z.coerce.number().optional().refine((e=>(e||5)>=0&&(e||5)<=5),{message:"Invalid value for LOGGING_LEVEL. We only accept 0, 1, 2, 3, 4, 5 as logging levels."}),LOGGING_FILE:a.z.string().optional(),LOGGING_DEST:a.z.string().optional(),UI_ENABLE:W(),UI_ROUTE:a.z.string().optional(),OTHER_NO_LOGO:W(),NODE_ENV:a.z.enum(["development","production","test"]).optional().default("production"),PROXY_SERVER_TIMEOUT:a.z.coerce.number().positive().optional().default(5e3),PROXY_SERVER_HOST:a.z.string().optional().default("localhost"),PROXY_SERVER_PORT:a.z.coerce.number().positive().optional().default(8080)}).parse(process.env);class X extends Error{constructor(e){super(),this.message=e,this.stackMessage=e}setError(e){return this.error=e,e.name&&(this.name=e.name),e.statusCode&&(this.statusCode=e.statusCode),e.stack&&(this.stackMessage=e.message,this.stack=e.stack),this}}const K={cdnURL:"https://code.highcharts.com/",activeManifest:{},sources:"",hcVersion:""};let J=!1;const B=e=>e.sources.substring(0,e.sources.indexOf("*/")).replace("/*","").replace("*/","").replace(/\n/g,"").trim(),Y=async(e,t,r,i=!1)=>{e.endsWith(".js")&&(e=e.substring(0,e.length-3)),I(4,`[cache] Fetching script - ${e}.js`);const o=t?{agent:t,timeout:z.PROXY_SERVER_TIMEOUT}:{},n=await E(`${e}.js`,o);if(200===n.statusCode&&"string"==typeof n.text){if(r){r[e.replace(/(.*)\/|(.*)modules\/|stock\/(.*)indicators\/|maps\/(.*)modules\//gi,"")]=1}return n.text}if(i)throw new X(`Could not fetch the ${e}.js. The script might not exist in the requested version (status code: ${n.statusCode}).`).setError(n);return I(2,`[cache] Could not fetch the ${e}.js. The script might not exist in the requested version.`),""},Q=async(e,r)=>{const{coreScripts:o,modules:n,indicators:s,scripts:a}=e,l="latest"!==e.version&&e.version?`${e.version}/`:"";let c;I(3,`[cache] Updating cache version to Highcharts: ${l||"latest"}.`);const p=process.env.PROXY_SERVER_HOST,u=process.env.PROXY_SERVER_PORT;if(p&&u)try{c=new i.HttpsProxyAgent({host:p,port:+u})}catch(e){throw new X("[cache] Could not create a Proxy Agent.").setError(e)}const h={};try{return K.sources=await(async(e,t,r,i,o,n)=>{const s=[...e.map((e=>Y(`${i}${e}`,o,n,!0))),...t.map((e=>Y(`${i}${e}`,o,n))),...r.map((e=>Y(`${e}`,o)))];return(await Promise.all(s)).join(";\n")})([...o.map((e=>`${l}${e}`))],[...n.map((e=>"map"===e?`maps/${l}modules/${e}`:`${l}modules/${e}`)),...s.map((e=>`stock/${l}indicators/${e}`))],a,e.cdnURL||K.cdnURL,c,h),K.hcVersion=B(K),t.writeFileSync(r,K.sources),h}catch(e){throw new X("[cache] Unable to update the local Highcharts cache.").setError(e)}},Z=async e=>{const i=r.join(P,e.cachePath);let o;const n=r.join(i,"manifest.json"),s=r.join(i,"sources.js");if(J=e,!t.existsSync(i)&&t.mkdirSync(i),!t.existsSync(n)||e.forceFetch)I(3,"[cache] Fetching and caching Highcharts dependencies."),o=await Q(e,s);else{let r=!1;const i=JSON.parse(t.readFileSync(n));if(i.modules&&Array.isArray(i.modules)){const e={};i.modules.forEach((t=>e[t]=1)),i.modules=e}const{modules:a,coreScripts:l,indicators:c}=e,p=a.length+l.length+c.length;i.version!==e.version?(I(2,"[cache] A Highcharts version mismatch in the cache, need to re-fetch."),r=!0):Object.keys(i.modules||{}).length!==p?(I(2,"[cache] The cache and the requested modules do not match, need to re-fetch."),r=!0):r=(e.modules||[]).some((e=>{if(!i.modules[e])return I(2,`[cache] The ${e} is missing in the cache, need to re-fetch.`),!0})),r?o=await Q(e,s):(I(3,"[cache] Dependency cache is up to date, proceeding."),K.sources=t.readFileSync(s,"utf8"),o=i.modules,K.hcVersion=B(K))}await(async(e,i)=>{const o={version:e.version,modules:i||{}};K.activeManifest=o,I(3,"[cache] Writing a new manifest.");try{t.writeFileSync(r.join(P,e.cachePath,"manifest.json"),JSON.stringify(o),"utf8")}catch(e){throw new X("[cache] Error writing the cache manifest.").setError(e)}})(e,o)},ee=()=>r.join(P,J.cachePath);var te=async e=>!!J&&await Z(Object.assign(J,{version:e})),re=()=>K,ie=()=>K.hcVersion;let oe={};const ne=()=>oe,se=(e,t,r=[])=>{const i=U(e);for(const[e,n]of Object.entries(t))i[e]="object"!=typeof(o=n)||Array.isArray(o)||null===o||r.includes(e)||void 0===i[e]?void 0!==n?n:i[e]:se(i[e],n,r);var o;return i};function ae(e,t={},r=""){Object.keys(e).forEach((i=>{const o=e[i],n=t&&t[i];void 0===o.value?ae(o,n,`${r}.${i}`):(void 0!==n&&(o.value=n),o.envLink in z&&(o.value=z[o.envLink]))}))}function le(e){let t={};for(const[r,i]of Object.entries(e))t[r]=Object.prototype.hasOwnProperty.call(i,"value")?i.value:le(i);return t}function ce(e,t,r){for(;t.length>1;){const i=t.shift();return Object.prototype.hasOwnProperty.call(e,i)||(e[i]={}),e[i]=ce(Object.assign({},e[i]),t,r),e}return e[t[0]]=r,e}const pe=d.randomBytes(64).toString("base64url"),ue=u.join("tmp",`puppeteer-${pe}`),he=[`--user-data-dir=${u.join(ue,"profile")}`,"--autoplay-policy=user-gesture-required","--disable-background-networking","--disable-background-timer-throttling","--disable-backgrounding-occluded-windows","--disable-breakpad","--disable-client-side-phishing-detection","--disable-component-update","--disable-default-apps","--disable-dev-shm-usage","--disable-domain-reliability","--disable-extensions","--disable-features=AudioServiceOutOfProcess","--disable-hang-monitor","--disable-ipc-flooding-protection","--disable-notifications","--disable-offer-store-unmasked-wallet-cards","--disable-popup-blocking","--disable-print-preview","--disable-prompt-on-repost","--disable-renderer-backgrounding","--disable-session-crashed-bubble","--disable-setuid-sandbox","--disable-speech-api","--disable-sync","--hide-crash-restore-bubble","--hide-scrollbars","--ignore-gpu-blacklist","--metrics-recording-only","--mute-audio","--no-default-browser-check","--no-first-run","--no-pings","--no-sandbox","--no-zygote","--password-store=basic","--use-mock-keychain"],de=w.fileURLToPath(new URL(".","undefined"==typeof document?require("url").pathToFileURL(__filename).href:v&&v.src||new URL("index.cjs",document.baseURI).href)),ge=t.readFileSync(de+"/../templates/template.html","utf8");let me;const fe=async e=>{await e.setContent(ge),await e.addScriptTag({path:`${ee()}/sources.js`}),await e.evaluate((()=>window.setupHighcharts())),e.on("pageerror",(async t=>{await e.$eval("#container",((e,t)=>{window._displayErrors&&(e.innerHTML=t)}),`<h1>Chart input data error</h1>${t.toString()}`)}))},ye=async(e,t=!1)=>{try{t?(await e.goto("about:blank"),await fe(e)):await e.evaluate((()=>{document.body.innerHTML='<div id="chart-container"><div id="container"></div></div>'}))}catch(e){A(2,e,"[browser] Could not clear the content of the page.")}},ve=async()=>{if(!me)return!1;const e=await me.newPage();return await e.setCacheEnabled(!1),await fe(e),e},be=async()=>(me?.isConnected()&&(await me.close(),I(4,"[browser] Closed the browser.")),!0);const we=w.fileURLToPath(new URL(".","undefined"==typeof document?require("url").pathToFileURL(__filename).href:v&&v.src||new URL("index.cjs",document.baseURI).href)),Ee=(e,t,r)=>e.evaluate(((e,t)=>window.triggerExport(e,t)),t,r);var Te=async(e,i,o)=>{const n=[],s=async e=>{for(const e of n)await e.dispose();await e.evaluate((()=>{const[,...e]=document.getElementsByTagName("script"),[,...t]=document.getElementsByTagName("style"),[...r]=document.getElementsByTagName("link");for(const i of[...e,...t,...r])i.remove()}))};try{I(4,"[export] Determining export path.");const a=o.export;await e.evaluate((()=>requestAnimationFrame((()=>{}))));const l=a?.options?.chart?.displayErrors&&re().activeManifest.modules.debugger;let c;if(await e.evaluate((e=>window._displayErrors=e),l),i.indexOf&&(i.indexOf("<svg")>=0||i.indexOf("<?xml")>=0)){if(I(4,"[export] Treating as SVG."),"svg"===a.type)return i;c=!0,await e.setContent((e=>`\n<!DOCTYPE html>\n<html lang='en-US'>\n  <head>\n    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n    <title>Highcarts Export</title>\n  </head>\n  <style>\n    \n\nhtml, body {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n#table-div, #sliders, #datatable, #controls, .ld-row {\n  display: none;\n  height: 0;\n}\n\n#chart-container {\n  box-sizing: border-box;\n  margin: 0;\n  overflow: auto;\n  font-size: 0;\n}\n\n#chart-container > figure, div {\n  margin-top: 0 !important;\n  margin-bottom: 0 !important;\n}\n\n\n  </style>\n  <body>\n    <div id="chart-container">\n      ${e}\n    </div>\n  </body>\n</html>\n\n`)(i))}else I(4,"[export] Treating as config."),a.strInj?await Ee(e,{chart:{height:a.height,width:a.width}},o):(i.chart.height=a.height,i.chart.width=a.width,await Ee(e,i,o));const p=o.customLogic.resources;if(p){if(p.js&&n.push(await e.addScriptTag({content:p.js})),p.files)for(const r of p.files)try{const i=!r.startsWith("http");n.push(await e.addScriptTag(i?{content:t.readFileSync(r,"utf8")}:{url:r}))}catch(e){A(2,e,`[export] The JS file ${r} cannot be loaded.`)}if(p.css){let t=p.css.match(/@import\s*([^;]*);/g);if(t)for(let i of t)i&&(i=i.replace("url(","").replace("@import","").replace(/"/g,"").replace(/'/g,"").replace(/;/,"").replace(/\)/g,"").trim(),i.startsWith("http")?n.push(await e.addStyleTag({url:i})):o.customLogic.allowFileResources&&n.push(await e.addStyleTag({path:r.join(we,i)})));n.push(await e.addStyleTag({content:p.css.replace(/@import\s*([^;]*);/g,"")||" "}))}}const u=c?await e.$eval("#chart-container svg:first-of-type",((e,t)=>({chartHeight:e.height.baseVal.value*t,chartWidth:e.width.baseVal.value*t})),parseFloat(a.scale)):await e.evaluate((()=>{const{chartHeight:e,chartWidth:t}=window.Highcharts.charts[0];return{chartHeight:e,chartWidth:t}})),h=Math.ceil(u?.chartHeight||a.height),d=Math.ceil(u?.chartWidth||a.width);await e.setViewport({height:h,width:d,deviceScaleFactor:c?1:parseFloat(a.scale)});const g=c?e=>{document.body.style.zoom=e,document.body.style.margin="0px"}:()=>{document.body.style.zoom=1};await e.evaluate(g,parseFloat(a.scale));const{height:m,width:f,x:y,y:v}=await(e=>e.$eval("#chart-container",(e=>{const{x:t,y:r,width:i,height:o}=e.getBoundingClientRect();return{x:t,y:r,width:i,height:Math.trunc(o>1?o:500)}})))(e);let b;if(c||await e.setViewport({width:Math.round(f),height:Math.round(m),deviceScaleFactor:parseFloat(a.scale)}),"svg"===a.type)b=await(e=>e.$eval("#container svg:first-of-type",(e=>e.outerHTML)))(e);else if(["png","jpeg"].includes(a.type))b=await((e,t,r,i,o)=>Promise.race([e.screenshot({type:t,encoding:r,clip:i,omitBackground:"png"==t}),new Promise(((e,t)=>setTimeout((()=>t(new X("Rasterization timeout"))),o||1500)))]))(e,a.type,"base64",{width:d,height:h,x:y,y:v},a.rasterizationTimeout);else{if("pdf"!==a.type)throw new X(`[export] Unsupported output format ${a.type}.`);b=await((e,t,r,i)=>e.pdf({height:t+1,width:r,encoding:i}))(e,h,d,"base64")}return await e.evaluate((()=>{if("undefined"!=typeof Highcharts){const e=Highcharts.charts;if(Array.isArray(e)&&e.length)for(const t of e)t&&t.destroy(),Highcharts.charts.shift()}})),await s(e),b}catch(t){return await s(e),t}};const Se={performedExports:0,exportAttempts:0,exportFromSvgAttempts:0,timeSpent:0,droppedExports:0,spentAverage:0};let xe,Re={},Le=!1;const ke={create:async()=>{let e=!1;const t=p.v4(),r=(new Date).getTime();try{if(e=await ve(),!e||e.isClosed())throw new X("The page is invalid or closed.");I(3,`[pool] Successfully created a worker ${t} - took ${(new Date).getTime()-r} ms.`)}catch(e){throw new X("Error encountered when creating a new page.").setError(e)}return{id:t,page:e,workCount:Math.round(Math.random()*(Re.workLimit/2))}},validate:async e=>Re.workLimit&&++e.workCount>Re.workLimit?(I(3,`[pool] Worker failed validation: exceeded work limit (limit is ${Re.workLimit}).`),!1):(await ye(e.page,!0),!0),destroy:e=>{I(3,`[pool] Destroying pool entry ${e.id}.`),e.page&&e.page.close()}},Oe=async e=>{if(Re=e&&e.pool?{...e.pool}:{},Re.listenToProcessExits&&(I(3,"[pool] Attaching exit listeners to the process."),process.on("exit",(async e=>{I(4,`Process exited with code ${e}.`),await _e()})),process.on("SIGINT",((e,t)=>{I(4,`The ${e} event with code: ${t}.`),process.exit(1)})),process.on("SIGTERM",((e,t)=>{I(4,`The ${e} event with code: ${t}.`),process.exit(1)})),process.on("uncaughtException",(async(e,t)=>{A(1,e,`The ${t} error.`),await _e(),process.exit(1)}))),xe=e.puppeteerArgs,await(async e=>{const t=[...he,...e||[]];if(!me){let e=0;const r=async()=>{try{I(3,`[browser] Attempting to get a browser instance (try ${++e}).`),me=await h.launch({headless:"new",args:t,userDataDir:"./tmp/"})}catch(t){if(A(1,t,"[browser] Failed to launch a browser instance."),!(e<25))throw t;I(3,`[browser] Retry to open a browser (${e} out of 25).`),await new Promise((e=>setTimeout(e,4e3))),await r()}};try{await r()}catch(e){throw new X("[browser] Maximum retries to open a browser instance reached.").setError(e)}if(!me)throw new X("[browser] Cannot find a browser to open.")}return me})(xe),I(3,`[pool] Initializing pool with workers: min ${Re.minWorkers}, max ${Re.maxWorkers}.`),Le)return I(4,"[pool] Already initialized, please kill it before creating a new one.");parseInt(Re.minWorkers)>parseInt(Re.maxWorkers)&&(Re.minWorkers=Re.maxWorkers);try{Le=new c.Pool({...ke,min:parseInt(Re.minWorkers),max:parseInt(Re.maxWorkers),acquireTimeoutMillis:Re.acquireTimeout,createTimeoutMillis:Re.createTimeout,destroyTimeoutMillis:Re.destroyTimeout,idleTimeoutMillis:Re.idleTimeout,createRetryIntervalMillis:Re.createRetryInterval,reapIntervalMillis:Re.reaperInterval,propagateCreateError:!1}),Le.on("release",(async e=>{await ye(e.page,!1),I(4,`[pool] Releasing a worker with ID ${e.id}.`)})),Le.on("destroySuccess",((e,t)=>{I(4,`[pool] Destroyed a worker with ID ${t.id}.`)}));const e=[];for(let t=0;t<Re.minWorkers;t++)try{const t=await Le.acquire().promise;e.push(t)}catch(e){A(2,e,"[pool] Could not create an initial resource.")}e.forEach((e=>{Le.release(e)})),I(3,"[pool] The pool is ready"+(e.length?` with ${e.length} initial resources waiting.`:"."))}catch(e){throw await be(),new X("[pool] Could not create the pool of workers.").setError(e)}};async function _e(){return I(3,"[pool] Killing all pool workers and browser, if any exist."),Le?.destroyed||Le&&(await Le.destroy(),I(4,"[browser] Destroyed the pool of resources.")),be()}const Ie=async(e,t)=>{let r;try{if(I(4,"[pool] Work received, starting to process."),++Se.exportAttempts,Re.benchmarking&&Ae(),!Le)throw new X("Work received, but pool has not been started.");try{I(4,"[pool] Acquiring a worker handle.");const e=D();r=await Le.acquire().promise,t.server.benchmarking&&I(5,t.payload?.requestId?`[benchmark] Request with ID ${t.payload?.requestId} -`:"[benchmark]",`Acquired a worker handle: ${e()}ms.`)}catch(e){throw new X("Error encountered when acquiring an available entry.").setError(e)}if(I(4,"[pool] Acquired a worker handle."),!r.page)throw new X("Resolved worker page is invalid: the pool setup is wonky.");let i=(new Date).getTime();I(4,`[pool] Starting work on pool entry with ID ${r.id}.`);const o=D(),n=await Te(r.page,e,t);if(n instanceof Error)throw"Rasterization timeout"===n.message&&(r.page.close(),r.page=await ve()),new X("Error encountered during export.").setError(n);t.server.benchmarking&&I(5,t.payload?.requestId?`[benchmark] Request with ID ${t.payload?.requestId} -`:"[benchmark]",`Exported a chart sucessfully: ${o()}ms.`),Le.release(r);const s=(new Date).getTime()-i;return Se.timeSpent+=s,Se.spentAverage=Se.timeSpent/++Se.performedExports,I(4,`[pool] Work completed in ${s} ms.`),{result:n,options:t}}catch(e){throw++Se.droppedExports,r&&Le.release(r),new X(`[pool] In pool.postWork: ${e.message}`).setError(e)}};function Ae(){const{min:e,max:t}=Le;I(5,`[pool] The minimum number of resources allowed by pool: ${e}.`),I(5,`[pool] The maximum number of resources allowed by pool: ${t}.`),I(5,`[pool] The number of resources that are currently available: ${Le.numFree()}.`),I(5,`[pool] The number of resources that are currently acquired: ${Le.numUsed()}.`),I(5,`[pool] The number of callers waiting to acquire a resource: ${Le.numPendingAcquires()}.`)}var Ce=()=>({min:Le.min,max:Le.max,available:Le.numFree(),inUse:Le.numUsed(),pendingAcquire:Le.numPendingAcquires()}),Ne=()=>Se;let Pe=!1;const $e=async(e,r)=>{I(4,"[chart] Starting the exporting process.");const i=((e,t={})=>{let r={};return e.svg?(r=U(t),r.export.type=e.type||e.export.type,r.export.scale=e.scale||e.export.scale,r.export.outfile=e.outfile||e.export.outfile,r.payload={svg:e.svg}):r=se(t,e,x),r.export.outfile=r.export?.outfile||`chart.${r.export?.type||"png"}`,r})(e,ne()),o=i.export;if(i.payload?.svg&&""!==i.payload.svg)try{I(4,"[chart] Attempting to export from a SVG input.");const e=Fe(i.payload.svg.trim(),i,r);return++Se.exportFromSvgAttempts,e}catch(e){return r(new X("[chart] Error loading SVG input.").setError(e))}if(o.infile&&o.infile.length)try{return I(4,"[chart] Attempting to export from an input file."),i.export.instr=t.readFileSync(o.infile,"utf8"),Fe(i.export.instr.trim(),i,r)}catch(e){return r(new X("[chart] Error loading input file.").setError(e))}if(o.instr&&""!==o.instr||o.options&&""!==o.options)try{return I(4,"[chart] Attempting to export from a raw input."),M(i.customLogic?.allowCodeExecution)?Ue(i,r):"string"==typeof o.instr?Fe(o.instr.trim(),i,r):je(i,o.instr||o.options,r)}catch(e){return r(new X("[chart] Error loading raw input.").setError(e))}return r(new X("[chart] No valid input specified. Check if at least one of the following parameters is correctly set: 'infile', 'instr', 'options', or 'svg'."))},He=e=>{const{chart:t,exporting:r}=e.export?.options||j(e.export?.instr),i=j(e.export?.globalOptions);let o=e.export?.scale||r?.scale||i?.exporting?.scale||e.export?.defaultScale||1;o=Math.max(.1,Math.min(o,5)),o=((e,t=1)=>{const r=Math.pow(10,t||0);return Math.round(+e*r)/r})(o,2);const n={height:e.export?.height||r?.sourceHeight||t?.height||i?.exporting?.sourceHeight||i?.chart?.height||e.export?.defaultHeight||400,width:e.export?.width||r?.sourceWidth||t?.width||i?.exporting?.sourceWidth||i?.chart?.width||e.export?.defaultWidth||600,scale:o};for(let[e,t]of Object.entries(n))n[e]="string"==typeof t?+t.replace(/px|%/gi,""):t;return n},je=async(e,r,i,o)=>{let{export:n,customLogic:s}=e;const a="boolean"==typeof s.allowCodeExecution?s.allowCodeExecution:Pe;if(s){if(a)if("string"==typeof e.customLogic.resources)e.customLogic.resources=H(e.customLogic.resources,M(e.customLogic.allowFileResources));else if(!e.customLogic.resources)try{const r=t.readFileSync("resources.json","utf8");e.customLogic.resources=H(r,M(e.customLogic.allowFileResources))}catch(e){A(2,e,"[chart] Unable to load the default resources.json file.")}}else s=e.customLogic={};if(!a&&s){if(s.callback||s.resources||s.customCode)return i(new X("[chart] The 'callback', 'resources' and 'customCode' options have been disabled for this server."));s.callback=!1,s.resources=!1,s.customCode=!1}if(r&&(r.chart=r.chart||{},r.exporting=r.exporting||{},r.exporting.enabled=!1),n.constr=n.constr||"chart",n.type=$(n.type,n.outfile),"svg"===n.type&&(n.width=!1),["globalOptions","themeOptions"].forEach((e=>{try{n&&n[e]&&("string"==typeof n[e]&&n[e].endsWith(".json")?n[e]=j(t.readFileSync(n[e],"utf8"),!0):n[e]=j(n[e],!0))}catch(t){n[e]={},A(2,t,`[chart] The '${e}' cannot be loaded.`)}})),s.allowCodeExecution)try{s.customCode=q(s.customCode,s.allowFileResources)}catch(e){A(2,e,"[chart] The 'customCode' cannot be loaded.")}if(s&&s.callback&&s.callback?.indexOf("{")<0)if(s.allowFileResources)try{s.callback=t.readFileSync(s.callback,"utf8")}catch(e){s.callback=!1,A(2,e,"[chart] The 'callback' cannot be loaded.")}else s.callback=!1;e.export={...e.export,...He(e)};try{return i(!1,await Ie(n.strInj||r||o,e))}catch(e){return i(e)}},Ue=(e,t)=>{try{let r,i=e.export.instr||e.export.options;return"string"!=typeof i&&(r=i=F(i,e.customLogic?.allowCodeExecution)),r=i.replaceAll(/\t|\n|\r/g,"").trim(),";"===r[r.length-1]&&(r=r.substring(0,r.length-1)),e.export.strInj=r,je(e,!1,t)}catch(r){return t(new X(`[chart] Malformed input detected for ${e.export?.requestId||"?"}. Please make sure that your JSON/JavaScript options are sent using the "options" attribute, and that if you're using SVG, it is unescaped.`).setError(r))}},Fe=(e,t,r)=>{const{allowCodeExecution:i}=t.customLogic;if(e.indexOf("<svg")>=0||e.indexOf("<?xml")>=0)return I(4,"[chart] Parsing input as SVG."),je(t,!1,r,e);try{const i=JSON.parse(e.replaceAll(/\t|\n|\r/g," "));return je(t,i,r)}catch(e){return M(i)?Ue(t,r):r(new X("[chart] Only JSON configurations and SVG are allowed for this server. If this is your server, JavaScript custom code can be enabled by starting the server with the --allowCodeExecution flag.").setError(e))}},Ge=(e,t,r,i)=>{A(1,e),"development"!==z.NODE_ENV&&delete e.stack,i(e)},Me=(e,t,r,i)=>{const{statusCode:o,status:n,message:s,stack:a}=e,l=o||n||500;r.status(l).json({statusCode:l,message:s,stack:a})};var qe=(e,t)=>{const r="Too many requests, you have been rate limited. Please try again later.",i={max:t.maxRequests||30,window:t.window||1,delay:t.delay||0,trustProxy:t.trustProxy||!1,skipKey:t.skipKey||!1,skipToken:t.skipToken||!1};i.trustProxy&&e.enable("trust proxy");const o=y({windowMs:60*i.window*1e3,max:i.max,delayMs:i.delay,handler:(e,t)=>{t.format({json:()=>{t.status(429).send({message:r})},default:()=>{t.status(429).send(r)}})},skip:e=>!1!==i.skipKey&&!1!==i.skipToken&&e.query.key===i.skipKey&&e.query.access_token===i.skipToken&&(I(4,"[rate limiting] Skipping rate limiter."),!0)});e.use(o),I(3,`[rate limiting] Enabled rate limiting with ${i.max} requests per ${i.window} minute for each IP, trusting proxy: ${i.trustProxy}.`)};class De extends X{constructor(e,t){super(e),this.status=this.statusCode=t}setStatus(e){return this.status=e,this}}const We={png:"image/png",jpeg:"image/jpeg",gif:"image/gif",pdf:"application/pdf",svg:"image/svg+xml"};let Ve=0;const ze=[],Xe=[],Ke=(e,t,r,i)=>{let o=!0;const{id:n,uniqueId:s,type:a,body:l}=i;return e.some((e=>{if(e){let i=e(t,r,n,s,a,l);return void 0!==i&&!0!==i&&(o=i),!0}})),o},Je=async(e,t,r)=>{try{const r=D(),o=p.v4().replace(/-/g,""),n=ne(),s=e.body,a=++Ve;let l=$(s.type);if(!s||"object"==typeof(i=s)&&!Array.isArray(i)&&null!==i&&0===Object.keys(i).length)throw new De("The request body is required. Please ensure that your Content-Type header is correct (accepted types are application/json and multipart/form-data).",400);let c=j(s.infile||s.options||s.data);if(!c&&!s.svg)throw I(2,`The request with ID ${o} from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Payload received: ${JSON.stringify(s)}.`),new De("No correct chart data found. Ensure that you are using either application/json or multipart/form-data headers. If sending JSON, make sure the chart data is in the 'infile', 'options', or 'data' attribute. If sending SVG, ensure it is in the 'svg' attribute.",400);let u=!1;if(u=Ke(ze,e,t,{id:a,uniqueId:o,type:l,body:s}),!0!==u)return t.send(u);let h=!1;e.socket.on("close",(()=>{h=!0})),I(4,`[export] Got an incoming HTTP request with ID ${o}.`),s.constr="string"==typeof s.constr&&s.constr||"chart";const d={export:{instr:c,type:l,constr:s.constr[0].toLowerCase()+s.constr.substr(1),height:s.height,width:s.width,scale:s.scale||n.export.scale,globalOptions:j(s.globalOptions,!0),themeOptions:j(s.themeOptions,!0)},customLogic:{allowCodeExecution:Pe,allowFileResources:!1,resources:j(s.resources,!0),callback:s.callback,customCode:s.customCode}};c&&(d.export.instr=F(c,d.customLogic.allowCodeExecution));const g=se(n,d);if(g.export.options=c,g.payload={svg:s.svg||!1,b64:s.b64||!1,noDownload:s.noDownload||!1,requestId:o},s.svg&&(e=>[/xlink:href="(?:http:\/\/|https:\/\/)?localhost\b/,/xlink:href="(?:http:\/\/|https:\/\/)?10\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?127\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?172\.(1[6-9]|2[0-9]|3[0-1])\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?192\.168\.\d{1,3}\.\d{1,3}\b/].some((t=>t.test(e))))(g.payload.svg))throw new De("SVG potentially contain at least one forbidden URL in xlink:href element. Please review the SVG content and ensure that all referenced URLs comply with security policies.",400);await $e(g,((i,c)=>{if(e.socket.removeAllListeners("close"),n.server.benchmarking&&I(5,`[benchmark] Request with ID ${o} - After the whole exporting process: ${r()}ms.`),h)return I(3,"[export] The client closed the connection before the chart finished processing.");if(i)throw i;if(!c||!c.result)throw new De(`Unexpected return from chart generation. Please check your request data. For the request with ID ${o}, the result is ${c.result}.`,400);return l=c.options.export.type,Ke(Xe,e,t,{id:a,body:c.result}),c.result?s.b64?"pdf"===l||"svg"==l?t.send(Buffer.from(c.result,"utf8").toString("base64")):t.send(c.result):(t.header("Content-Type",We[l]||"image/png"),s.noDownload||t.attachment(`${e.params.filename||e.body.filename||"chart"}.${l||"png"}`),"svg"===l?t.send(c.result):t.send(Buffer.from(c.result,"base64"))):void 0}))}catch(e){r(e)}var i};const Be=JSON.parse(t.readFileSync(r.join(P,"package.json"))),Ye=new Date,Qe=[];function Ze(e){if(!e)return!1;e.get("/health",((e,t)=>{const r=Ne(),i=Qe.length,o=Qe.reduce(((e,t)=>e+t),0)/Qe.length;I(4,"[health.js] GET /health [200] - returning server health."),t.send({status:"OK",bootTime:Ye,uptime:Math.floor(((new Date).getTime()-Ye.getTime())/1e3/60)+" minutes",version:Be.version,highchartsVersion:ie(),averageProcessingTime:r.spentAverage,performedExports:r.performedExports,failedExports:r.droppedExports,exportAttempts:r.exportAttempts,sucessRatio:r.performedExports/r.exportAttempts*100,pool:Ce(),period:i,movingAverage:o,message:`Last ${i} minutes had a success rate of ${o.toFixed(2)}%.`,svgExportAttempts:r.exportFromSvgAttempts,jsonExportAttempts:r.performedExports-r.exportFromSvgAttempts})}))}setInterval((function(){const e=Ne(),t=0===e.exportAttempts?1:e.performedExports/e.exportAttempts*100;Qe.push(t),Qe.length>30&&Qe.shift()}),6e4);const et=m();et.disable("x-powered-by"),et.use(g());const tt=f.memoryStorage(),rt=f({storage:tt,limits:{fieldSize:52428800}});et.use(m.json({limit:52428800})),et.use(m.urlencoded({extended:!0,limit:52428800})),et.use(rt.none());const it=e=>{e.on("clientError",(e=>{A(1,e,`[server] Client error: ${e.message}`)})),e.on("error",(e=>{A(1,e,`[server] Server error: ${e.message}`)})),e.on("connection",(e=>{e.on("error",(e=>{A(1,e,`[server] Socket error: ${e.message}`)}))}))},ot=async e=>{try{if(!e.enable)return!1;if(!e.ssl.force){const t=o.createServer(et);it(t),t.listen(e.port,e.host),I(3,`[server] Started HTTP server on ${e.host}:${e.port}.`)}if(e.ssl.enable){let i,o;try{i=await t.promises.readFile(r.posix.join(e.ssl.certPath,"server.key"),"utf8"),o=await t.promises.readFile(r.posix.join(e.ssl.certPath,"server.crt"),"utf8")}catch(t){I(2,`[server] Unable to load key/certificate from the '${e.ssl.certPath}' path. Could not run secured layer server.`)}if(i&&o){const t=n.createServer({key:i,cert:o},et);it(t),t.listen(e.ssl.port,e.host),I(3,`[server] Started HTTPS server on ${e.host}:${e.ssl.port}.`)}}e.rateLimiting&&e.rateLimiting.enable&&![0,NaN].includes(e.rateLimiting.maxRequests)&&qe(et,e.rateLimiting),et.use(m.static(r.posix.join(P,"public"))),Ze(et),(e=>{e.post("/",Je),e.post("/:filename",Je)})(et),(e=>{!!e&&e.get("/",((e,t)=>{t.sendFile(r.join(P,"public","index.html"))}))})(et),(e=>{!!e&&e.post("/version/change/:newVersion",(async(e,t,r)=>{try{const r=z.HIGHCHARTS_ADMIN_TOKEN;if(!r||!r.length)throw new De("The server is not configured to perform run-time version changes: HIGHCHARTS_ADMIN_TOKEN is not set.",401);const i=e.get("hc-auth");if(!i||i!==r)throw new De("Invalid or missing token: Set the token in the hc-auth header.",401);const o=e.params.newVersion;if(!o)throw new De("No new version supplied.",400);try{await te(o)}catch(e){throw new De(`Version change: ${e.message}`,e.statusCode).setError(e)}t.status(200).send({statusCode:200,version:ie(),message:`Successfully updated Highcharts to version: ${o}.`})}catch(e){r(e)}}))})(et),(e=>{e.use(Ge),e.use(Me)})(et)}catch(e){throw new X("[server] Could not configure and start the server.").setError(e)}};var nt={startServer:ot,enableRateLimiting:e=>qe(et,e),getExpress:()=>m,getApp:()=>et,use:(e,...t)=>{et.use(e,...t)},get:(e,...t)=>{et.get(e,...t)},post:(e,...t)=>{et.post(e,...t)}};e.config();var st={server:nt,startServer:ot,setOptions:(e,r)=>(r?.length&&(oe=function(e){const r=e.findIndex((e=>"loadConfig"===e.replace(/-/g,"")));if(r>-1&&e[r+1]){const i=e[r+1];try{if(i&&i.endsWith(".json"))return JSON.parse(t.readFileSync(i))}catch(e){A(2,e,`[config] Unable to load the configuration from the ${i} file.`)}}return{}}(r)),ae(T,oe),oe=le(T),e&&(oe=se(oe,e,x)),r?.length&&(oe=function(e,t,r){let i=!1;for(let o=0;o<t.length;o++){const n=t[o].replace(/-/g,""),s=R[n]?R[n].split("."):[];let a;s.reduce(((e,t,r)=>(s.length-1===r&&(a=e[t].type),e[t])),r),s.reduce(((e,r,l)=>(s.length-1===l&&void 0!==e[r]&&(t[++o]?"boolean"===a?e[r]=M(t[o]):"number"===a?e[r]=+t[o]:a.indexOf("]")>=0?e[r]=t[o].split(","):e[r]=t[o]:(I(2,`[config] Missing value for the '${n}' argument. Using the default value.`),i=!0)),e[r])),e)}i&&G();return e}(oe,r,T)),oe),initExport:async e=>{var t;return t=e.customLogic&&e.customLogic.allowCodeExecution,Pe=M(t),(e=>{C(e&&parseInt(e.level)),e&&e.dest&&N(e.dest,e.file||"highcharts-export-server.log")})(e.logging),await Z(e.highcharts||{version:"latest"}),await Oe({pool:e.pool||{minWorkers:1,maxWorkers:1},puppeteerArgs:e.puppeteer?.args||[]}),e},singleExport:async e=>{e.export.instr=e.export.instr||e.export.options,await $e(e,(async(e,r)=>{if(e)throw e;const{outfile:i,type:o}=r.options.export;t.writeFileSync(i||`chart.${o}`,"svg"!==o?Buffer.from(r.result,"base64"):r.result),await _e()}))},batchExport:async e=>{const r=[];for(let i of e.export.batch.split(";"))i=i.split("="),2===i.length&&r.push($e({...e,export:{...e.export,infile:i[0],outfile:i[1]}},((e,r)=>{if(e)throw e;t.writeFileSync(r.options.export.outfile,Buffer.from(r.result,"base64"))})));try{await Promise.all(r),await _e()}catch(e){throw new X("[chart] Error encountered during batch export.").setError(e)}},startExport:$e,killPool:_e,log:I,logWithStack:A,setLogLevel:C,enableFileLogging:N,mapToNewConfig:e=>{const t={};for(const[r,i]of Object.entries(e)){const e=R[r]?R[r].split("."):[];e.reduce(((t,r,o)=>t[r]=e.length-1===o?i:t[r]||{}),t)}return t},manualConfig:async e=>{let r={};t.existsSync(e)&&(r=JSON.parse(t.readFileSync(e,"utf8")));const i=Object.keys(S).map((e=>({title:`${e} options`,value:e})));return l({type:"multiselect",name:"category",message:"Which category do you want to configure?",hint:"Space: Select specific, A: Select all, Enter: Confirm.",instructions:"",choices:i},{onSubmit:async(i,o)=>{let n=0,s=[];for(const e of o)S[e]=S[e].map((t=>({...t,section:e}))),s=[...s,...S[e]];return await l(s,{onSubmit:async(i,o)=>{if("modules"===i.name?(o=o.length?o.map((e=>i.choices[e])):i.choices,r[i.section][i.name]=o):r[i.section]=ce(Object.assign({},r[i.section]||{}),i.name.split("."),i.choices?i.choices[o]:o),++n===s.length){try{await t.promises.writeFile(e,JSON.stringify(r,null,2),"utf8")}catch(t){A(1,t,`[config] An error occurred while creating the ${e} file.`)}return!0}}}),!0}})},printLogo:e=>{const i=JSON.parse(t.readFileSync(r.join(P,"package.json"))).version;e?console.log(`Starting Highcharts Export Server v${i}...`):console.log(t.readFileSync(P+"/msg/startup.msg").toString().bold.yellow,`v${i}`)},printUsage:G};module.exports=st;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
