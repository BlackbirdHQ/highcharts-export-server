"use strict";require("colors");var e=require("fs"),t=require("path"),r=require("body-parser"),o=require("cors"),i=require("express"),n=require("http"),s=require("https"),a=require("multer"),l=require("dotenv"),c=require("express-rate-limit"),p=require("url"),u=require("https-proxy-agent"),d=require("tarn"),h=require("uuid"),g=require("puppeteer"),m=require("node:path"),f=require("node:crypto");require("prompts");var v="undefined"!=typeof document?document.currentScript:null;function y(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var o=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,o.get?o:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var w=y(p);l.config();const b={puppeteer:{args:{value:[],type:"string[]",description:"Array of arguments to send to puppeteer."}},highcharts:{version:{value:"latest",envLink:"HIGHCHARTS_VERSION",type:"string",description:"Highcharts version to use."},cdnURL:{value:"https://code.highcharts.com/",envLink:"HIGHCHARTS_CDN",type:"string",description:"The CDN URL of Highcharts scripts to use."},coreScripts:{envLink:"HIGHCHARTS_CORE_SCRIPTS",value:["highcharts","highcharts-more","highcharts-3d"],type:"string[]",description:"Highcharts core scripts to fetch."},modules:{envLink:"HIGHCHARTS_MODULES",value:["stock","map","gantt","exporting","export-data","parallel-coordinates","accessibility","annotations-advanced","boost-canvas","boost","data","draggable-points","static-scale","broken-axis","heatmap","tilemap","timeline","treemap","treegraph","item-series","drilldown","histogram-bellcurve","bullet","funnel","funnel3d","pyramid3d","networkgraph","pareto","pattern-fill","pictorial","price-indicator","sankey","arc-diagram","dependency-wheel","series-label","solid-gauge","sonification","stock-tools","streamgraph","sunburst","variable-pie","variwide","vector","venn","windbarb","wordcloud","xrange","no-data-to-display","drag-panes","debugger","dumbbell","lollipop","cylinder","organization","dotplot","marker-clusters","hollowcandlestick","heikinashi"],type:"string[]",description:"Highcharts modules to fetch."},indicators:{envLink:"HIGHCHARTS_INDICATORS",value:["indicators-all"],type:"string[]",description:"Highcharts indicators to fetch."},scripts:{value:["https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js","https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js"],type:"string[]",description:"Additional direct scripts/optional dependencies (e.g. moment.js)."},forceFetch:{envLink:"HIGHCHARTS_FORCE_FETCH",value:!1,type:"boolean",description:"Should all the scripts be refetched after rerunning the server."}},export:{infile:{value:!1,type:"string",description:"The input file name along with a type (json or svg). It can be a correct JSON or SVG file."},instr:{value:!1,type:"string",description:"An input in a form of a stringified JSON or SVG file. Overrides the --infile."},options:{value:!1,type:"string",description:"An alias for the --instr option."},outfile:{value:!1,type:"string",description:"The output filename along with a type (jpeg, png, pdf or svg). Ignores the --type flag."},type:{envLink:"EXPORT_DEFAULT_TYPE",value:"png",type:"string",description:"The format of the file to export to. Can be jpeg, png, pdf or svg."},constr:{envLink:"EXPORT_DEFAULT_CONSTR",value:"chart",type:"string",description:"The constructor to use. Can be chart, stockChart, mapChart or ganttChart."},defaultHeight:{envLink:"EXPORT_DEFAULT_HEIGHT",value:400,type:"number",description:"The default height of the exported chart. Used when not found any value set."},defaultWidth:{envLink:"EXPORT_DEFAULT_WIDTH",value:600,type:"number",description:"The default width of the exported chart. Used when not found any value set."},defaultScale:{envLink:"EXPORT_DEFAULT_SCALE",value:1,type:"number",description:"The default scale of the exported chart. Ranges between 1 and 5."},height:{type:"number",value:!1,description:"The default height of the exported chart. Overrides the option in the chart settings."},width:{type:"number",value:!1,description:"The width of the exported chart. Overrides the option in the chart settings."},scale:{value:!1,type:"number",description:"The scale of the exported chart. Ranges between 1 and 5."},globalOptions:{value:!1,type:"string",description:"A stringified JSON or a filename with options to be passed into the Highcharts.setOptions."},themeOptions:{value:!1,type:"string",description:"A stringified JSON or a filename with theme options to be passed into the Highcharts.setOptions."},batch:{value:!1,type:"string",description:'Starts a batch job. A string that contains input/output pairs: "in=out;in=out;..".'},rasterizationTimeout:{envLink:"EXPORT_RASTERIZATION_TIMEOUT",value:1500,type:"number",description:"The number of milliseconds to wait for rendering a webpage."}},customCode:{allowCodeExecution:{envLink:"HIGHCHARTS_ALLOW_CODE_EXECUTION",value:!1,type:"boolean",description:"If set to true, allow for the execution of arbitrary code when exporting."},allowFileResources:{envLink:"HIGHCHARTS_ALLOW_FILE_RESOURCES",value:!0,type:"boolean",description:"Allow injecting resources from the filesystem. Has no effect when running as a server."},customCode:{value:!1,type:"string",description:"A function to be called before chart initialization. Can be a filename with the js extension."},callback:{value:!1,type:"string",description:"A JavaScript file with a function to run on construction."},resources:{value:!1,type:"string",description:"An additional resource in a form of stringified JSON. It can contain files, js and css sections."},loadConfig:{value:!1,type:"string",description:"A file that contains a pre-defined config to use."},createConfig:{value:!1,type:"string",description:"Allows to set options through a prompt and save in a provided config file."}},server:{enable:{envLink:"HIGHCHARTS_SERVER_ENABLE",value:!1,type:"boolean",cliName:"enableServer",description:"If set to true, starts a server on 0.0.0.0."},host:{envLink:"HIGHCHARTS_SERVER_HOST",value:"0.0.0.0",type:"string",description:"The hostname of the server. Also starts a server listening on the supplied hostname."},port:{envLink:"HIGHCHARTS_SERVER_PORT",value:7801,type:"number",description:"The port to use for the server. Defaults to 7801."},ssl:{enable:{envLink:"HIGHCHARTS_SERVER_SSL_ENABLE",value:!1,type:"boolean",cliName:"enableSsl",description:"Enables the SSL protocol."},force:{envLink:"HIGHCHARTS_SERVER_SSL_FORCE",value:!1,type:"boolean",cliName:"sslForced",description:"If set to true, forces the server to only serve over HTTPS."},port:{envLink:"HIGHCHARTS_SERVER_SSL_PORT",value:443,type:"number",cliName:"sslPort",description:"The port on which to run the SSL server."},certPath:{envLink:"HIGHCHARTS_SSL_CERT_PATH",value:"",type:"string",description:"The path to the SSL certificate/key."}},rateLimiting:{enable:{envLink:"HIGHCHARTS_RATE_LIMIT_ENABLE",value:!1,type:"boolean",cliName:"enableRateLimiting",description:"Enables rate limiting."},maxRequests:{envLink:"HIGHCHARTS_RATE_LIMIT_MAX",value:10,type:"number",description:"Max requests allowed in a one minute."},window:{envLink:"HIGHCHARTS_RATE_LIMIT_WINDOW",value:1,type:"number",description:"The time window in minutes for rate limiting."},delay:{envLink:"HIGHCHARTS_RATE_LIMIT_DELAY",value:0,type:"number",description:"The amount to delay each successive request before hitting the max."},trustProxy:{envLink:"HIGHCHARTS_RATE_LIMIT_TRUST_PROXY",value:!1,type:"boolean",description:"Set this to true if behind a load balancer."},skipKey:{envLink:"HIGHCHARTS_RATE_LIMIT_SKIP_KEY",value:"",type:"number|string",description:"Allows bypassing the rate limiter and should be provided with skipToken argument."},skipToken:{envLink:"HIGHCHARTS_RATE_LIMIT_SKIP_TOKEN",value:"",type:"number|string",description:"Allows bypassing the rate limiter and should be provided with skipKey argument."}}},pool:{minWorkers:{envLink:"HIGHCHARTS_POOL_MIN_WORKERS",value:4,type:"number",description:"The number of initial workers to spawn."},maxWorkers:{envLink:"HIGHCHARTS_POOL_MAX_WORKERS",value:8,type:"number",description:"The number of max workers to spawn."},workLimit:{envLink:"HIGHCHARTS_POOL_WORK_LIMIT",value:40,type:"number",description:"The pieces of work that can be performed before restarting process."},acquireTimeout:{envLink:"HIGHCHARTS_POOL_ACQUIRE_TIMEOUT",value:5e3,type:"number",description:"The number of milliseconds to wait for acquiring a resource."},createTimeout:{envLink:"HIGHCHARTS_POOL_CREATE_TIMEOUT",value:5e3,type:"number",description:"The number of milliseconds to wait for creating a resource."},destroyTimeout:{envLink:"HIGHCHARTS_POOL_DESTROY_TIMEOUT",value:5e3,type:"number",description:"The number of milliseconds to wait for destroying a resource."},idleTimeout:{envLink:"HIGHCHARTS_POOL_IDLE_TIMEOUT",value:3e4,type:"number",description:"The number of milliseconds after an idle resource is destroyed."},createRetryInterval:{envLink:"HIGHCHARTS_POOL_CREATE_RETRY_INTERVAL",value:200,type:"number",description:"The number of milliseconds after the create process is retried in case of fail."},reaperInterval:{envLink:"HIGHCHARTS_POOL_REAPER_INTERVAL",value:1e3,type:"number",description:"The number of milliseconds after the check for idle resources to destroy is triggered."},benchmarking:{envLink:"HIGHCHARTS_POOL_BENCHMARKING",value:!1,type:"boolean",description:"Enable benchmarking."},listenToProcessExits:{envLink:"HIGHCHARTS_POOL_LISTEN_TO_PROCESS_EXITS",value:!0,type:"boolean",description:"Set to false in order to skip attaching process.exit handlers."}},logging:{level:{envLink:"HIGHCHARTS_LOG_LEVEL",value:4,type:"number",cliName:"logLevel",description:"The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose)."},file:{envLink:"HIGHCHARTS_LOG_FILE",value:"highcharts-export-server.log",type:"string",cliName:"logFile",description:"A name of a log file. The --logDest also needs to be set to enable file logging."},dest:{envLink:"HIGHCHARTS_LOG_DEST",value:"log/",type:"string",cliName:"logDest",description:"The path to store log files. Also enables file logging."}},ui:{enable:{envLink:"HIGHCHARTS_UI_ENABLE",value:!1,type:"boolean",cliName:"enableUi",description:"Enables the UI for the export server."},route:{envLink:"HIGHCHARTS_UI_ROUTE",value:"/",type:"string",cliName:"uiRoute",description:"The route to attach the UI to."}},other:{noLogo:{envLink:"HIGHCHARTS_NO_LOGO",value:!1,type:"boolean",description:"Skip printing the logo on a startup. Will be replaced by a simple text."}},payload:{}};b.puppeteer.args.value.join(","),b.highcharts.version.value,b.highcharts.cdnURL.value,b.highcharts.modules.value,b.highcharts.scripts.value.join(","),b.highcharts.forceFetch.value,b.export.type.value,b.export.constr.value,b.export.defaultHeight.value,b.export.defaultWidth.value,b.export.defaultScale.value,b.export.rasterizationTimeout.value,b.customCode.allowCodeExecution.value,b.customCode.allowFileResources.value,b.server.enable.value,b.server.host.value,b.server.port.value,b.server.ssl.enable.value,b.server.ssl.force.value,b.server.ssl.port.value,b.server.ssl.certPath.value,b.server.rateLimiting.enable.value,b.server.rateLimiting.maxRequests.value,b.server.rateLimiting.window.value,b.server.rateLimiting.delay.value,b.server.rateLimiting.trustProxy.value,b.server.rateLimiting.skipKey.value,b.server.rateLimiting.skipToken.value,b.pool.minWorkers.value,b.pool.maxWorkers.value,b.pool.workLimit.value,b.pool.acquireTimeout.value,b.pool.createTimeout.value,b.pool.destroyTimeout.value,b.pool.idleTimeout.value,b.pool.createRetryInterval.value,b.pool.reaperInterval.value,b.pool.benchmarking.value,b.pool.listenToProcessExits.value,b.logging.level.value,b.logging.file.value,b.logging.dest.value,b.ui.enable.value,b.ui.route.value,b.other.noLogo.value;const T=["options","globalOptions","themeOptions","resources","payload"],x={},k=(e,t="")=>{Object.keys(e).forEach((r=>{if(!["puppeteer","highcharts"].includes(r)){const o=e[r];void 0===o.value?k(o,`${t}.${r}`):x[o.cliName||r]=`${t}.${r}`.substring(1)}}))};k(b);const S=["red","yellow","blue","gray"];let E={toConsole:!0,toFile:!1,pathCreated:!1,levelsDesc:[{title:"error",color:S[0]},{title:"warning",color:S[1]},{title:"notice",color:S[2]},{title:"verbose",color:S[3]}],listeners:[]};for(const[e,t]of Object.entries(b.logging))E[e]=t.value;const R=(t,r)=>{E.toFile&&(E.pathCreated||(!e.existsSync(E.dest)&&e.mkdirSync(E.dest),E.pathCreated=!0),e.appendFile(`${E.dest}${E.file}`,[r].concat(t).join(" ")+"\n",(e=>{e&&(console.log(`[logger] Unable to write to log file: ${e}`),E.toFile=!1)})))},H=(...e)=>{const[t,...r]=e,{level:o,levelsDesc:i}=E;if(0===t||t>o||o>i.length)return;const n=`${(new Date).toString().split("(")[0].trim()} [${i[t-1].title}] -`;E.listeners.forEach((e=>{e(n,r.join(" "))})),R(r,n),E.toConsole&&console.log.apply(void 0,[n.toString()[E.levelsDesc[t-1].color]].concat(r))},L=(e,t,r)=>{if(H(e,(r||t&&`${t.name}: ${t.message}`)[S[e-1]]),t){const e=t.stack;E.toConsole&&console.log(e),R([e])}},C=(e,t,r,o)=>{L(1,e),"development"!==process.env.NODE_ENV&&delete e.stack,o(e)},O=(e,t,r,o)=>{const{statusCode:i,status:n,message:s,stack:a}=e,l=i||n||500;r.status(l).json({statusCode:l,message:s,stack:a})};var _=(e,t)=>{const r="Too many requests, you have been rate limited. Please try again later.",o={max:t.maxRequests||30,window:t.window||1,delay:t.delay||0,trustProxy:t.trustProxy||!1,skipKey:t.skipKey||!1,skipToken:t.skipToken||!1};o.trustProxy&&e.enable("trust proxy");const i=c({windowMs:60*o.window*1e3,max:o.max,delayMs:o.delay,handler:(e,t)=>{t.format({json:()=>{t.status(429).send({message:r})},default:()=>{t.status(429).send(r)}})},skip:e=>!1!==o.skipKey&&!1!==o.skipToken&&e.query.key===o.skipKey&&e.query.access_token===o.skipToken&&(H(4,"[rate limiting] Skipping rate limiter."),!0)});e.use(i),H(3,`[rate-limiting] Enabled rate limiting: ${o.max} requests per ${o.window} minute per IP, trusting proxy: ${o.trustProxy}.`)};const I=p.fileURLToPath(new URL("../.","undefined"==typeof document?require("url").pathToFileURL(__filename).href:v&&v.src||new URL("index.cjs",document.baseURI).href)),A=(e,t)=>{const r=["png","jpeg","pdf","svg"];if(t){const o=t.split(".").pop();r.includes(o)&&e!==o&&(e=o)}return{"image/png":"png","image/jpeg":"jpeg","application/pdf":"pdf","image/svg+xml":"svg"}[e]||r.find((t=>t===e))||"png"},$=(t=!1,r)=>{const o=["js","css","files"];let i=t,n=!1;if(r&&t.endsWith(".json"))try{t?t&&t.endsWith(".json")?i=j(e.readFileSync(t,"utf8")):(i=j(t),!0===i&&(i=j(e.readFileSync("resources.json","utf8")))):i=j(e.readFileSync("resources.json","utf8"))}catch(e){return H(3,"[cli] No resources found.")}else i=j(t),r||delete i.files;for(const e in i)o.includes(e)?n||(n=!0):delete i[e];return n?(i.files&&(i.files=i.files.map((e=>e.trim())),(!i.files||i.files.length<=0)&&delete i.files),i):H(3,"[cli] No resources found.")};function j(e,t){try{const r=JSON.parse("string"!=typeof e?JSON.stringify(e):e);return"string"!=typeof r&&t?JSON.stringify(r):r}catch(e){return!1}}const P=e=>{if(null===e||"object"!=typeof e)return e;const t=Array.isArray(e)?[]:{};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=P(e[r]));return t},N=(e,t)=>JSON.stringify(e,((e,r)=>("string"==typeof r&&((r=r.trim()).startsWith("function(")||r.startsWith("function ("))&&r.endsWith("}")&&(r=t?`EXP_FUN${(r+"").replaceAll(/\n|\t|\r/g," ")}EXP_FUN`:void 0),"function"==typeof r?`EXP_FUN${(r+"").replaceAll(/\n|\t|\r/g," ")}EXP_FUN`:r))).replaceAll(/"EXP_FUN|EXP_FUN"/g,"");function F(){console.log("Usage of CLI arguments:".bold,"\n------",`\nFor more detailed information visit readme at: ${"https://github.com/highcharts/node-export-server#readme".bold.yellow}.`);const e=t=>{for(const[r,o]of Object.entries(t))if(Object.prototype.hasOwnProperty.call(o,"value")){let e=`  --${o.cliName||r} ${("<"+o.type+">").green} `;if(e.length<48)for(let t=e.length;t<48;t++)e+=".";console.log(e,o.description,`[Default: ${o.value.toString().bold}]`.blue)}else e(o)};Object.keys(b).forEach((t=>{["puppeteer","highcharts"].includes(t)||(console.log(`\n${t.toUpperCase()}`.red),e(b[t]))})),console.log("\n")}const U=e=>!["false","undefined","null","NaN","0",""].includes(e)&&!!e,q=(t,r)=>{if(t&&"string"==typeof t)return(t=t.trim()).endsWith(".js")?!!r&&q(e.readFileSync(t,"utf8")):t.startsWith("function()")||t.startsWith("function ()")||t.startsWith("()=>")||t.startsWith("() =>")?`(${t})()`:t.replace(/;$/,"")};async function G(e,t={}){return new Promise(((r,o)=>{const i=(e=>e.startsWith("https")?s:n)(e);i.get(e,t,(e=>{let t="";e.on("data",(e=>{t+=e})),e.on("end",(()=>{t||o("Nothing was fetched from the URL."),e.text=t,r(e)}))})).on("error",(e=>{o(e)}))}))}class W extends Error{constructor(e){super(),this.message=e}setError(e){return this.error=e,this.name=e.name,e.stack&&(this.stack=e.stack),this}}l.config();const M=t.join(I,".cache"),D={cdnURL:"https://code.highcharts.com/",activeManifest:{},sources:"",hcVersion:""};let V=!1;const J=()=>D.hcVersion=D.sources.substr(0,D.sources.indexOf("*/")).replace("/*","").replace("*/","").replace(/\n/g,"").trim(),z=async(e,t)=>{try{e.endsWith(".js")&&(e=e.substring(0,e.length-3)),H(4,`[cache] Fetching script - ${e}.js`);const r=t?{agent:t,timeout:+process.env.PROXY_SERVER_TIMEOUT||5e3}:{},o=await G(`${e}.js`,r);if(200===o.statusCode)return o.text;throw`${o.statusCode}`}catch(t){throw H(1,`[cache] Error fetching script ${e}.js: ${t}.`),t}},X=async(t,r)=>{const{coreScripts:o,modules:i,indicators:n,scripts:s}=t,a="latest"!==t.version&&t.version?`${t.version}/`:"";H(3,`[cache] Updating cache to Highcharts ${a}.`);const l=[...o.map((e=>`${a}${e}`)),...i.map((e=>"map"===e?`maps/${a}modules/${e}`:`${a}modules/${e}`)),...n.map((e=>`stock/${a}indicators/${e}`))];let c;const p=process.env.PROXY_SERVER_HOST,d=process.env.PROXY_SERVER_PORT;if(p&&d)try{c=new u({host:p,port:+d})}catch(e){throw new W("[cache] Could not create a Proxy Agent.").setError(e)}const h={};try{return D.sources=(await Promise.all([...l.map((async e=>{const r=await z(`${t.cdnURL||D.cdnURL}${e}`,c);return"string"==typeof r&&(h[e.replace(/(.*)\/|(.*)modules\/|stock\/(.*)indicators\/|maps\/(.*)modules\//gi,"")]=1),r})),...s.map((e=>z(e,c)))])).join(";\n"),J(),e.writeFileSync(r,D.sources),h}catch(e){throw new W("[cache] Unable to update local Highcharts cache.").setError(e)}},K=async r=>{let o;const i=t.join(M,"manifest.json"),n=t.join(M,"sources.js");if(V=r,!e.existsSync(M)&&e.mkdirSync(M),!e.existsSync(i)||r.forceFetch)H(3,"[cache] Fetching and caching Highcharts dependencies."),o=await X(r,n);else{let t=!1;const s=JSON.parse(e.readFileSync(i));if(s.modules&&Array.isArray(s.modules)){const e={};s.modules.forEach((t=>e[t]=1)),s.modules=e}const{modules:a,coreScripts:l,indicators:c}=r,p=a.length+l.length+c.length;s.version!==r.version?(H(2,"[cache] Highcharts version mismatch in cache, need to re-fetch."),t=!0):Object.keys(s.modules||{}).length!==p?(H(2,"[cache] Cache and requested modules do not match, need to re-fetch."),t=!0):t=(r.modules||[]).some((e=>{if(!s.modules[e])return H(2,`[cache] The ${e} missing in cache, need to re-fetch.`),!0})),t?o=await X(r,n):(H(3,"[cache] Dependency cache is up to date, proceeding."),D.sources=e.readFileSync(n,"utf8"),o=s.modules,J())}await(async(r,o)=>{const i={version:r.version,modules:o||{}};D.activeManifest=i,H(4,"[cache] Writing a new manifest.");try{e.writeFileSync(t.join(M,"manifest.json"),JSON.stringify(i),"utf8")}catch(e){throw new W("[cache] Error writing cache manifest.").setError(e)}})(r,o)};var B=async e=>!!V&&await K(Object.assign(V,{version:e})),Y=()=>D,Q=()=>D.hcVersion;const Z=f.randomBytes(64).toString("base64url"),ee=m.join("tmp",`puppeteer-${Z}`),te=[`--user-data-dir=${m.join(ee,"profile")}`,"--autoplay-policy=user-gesture-required","--disable-background-networking","--disable-background-timer-throttling","--disable-backgrounding-occluded-windows","--disable-breakpad","--disable-client-side-phishing-detection","--disable-component-update","--disable-default-apps","--disable-dev-shm-usage","--disable-domain-reliability","--disable-extensions","--disable-features=AudioServiceOutOfProcess","--disable-hang-monitor","--disable-ipc-flooding-protection","--disable-notifications","--disable-offer-store-unmasked-wallet-cards","--disable-popup-blocking","--disable-print-preview","--disable-prompt-on-repost","--disable-renderer-backgrounding","--disable-session-crashed-bubble","--disable-setuid-sandbox","--disable-speech-api","--disable-sync","--hide-crash-restore-bubble","--hide-scrollbars","--ignore-gpu-blacklist","--metrics-recording-only","--mute-audio","--no-default-browser-check","--no-first-run","--no-pings","--no-sandbox","--no-zygote","--password-store=basic","--use-mock-keychain"],re=w.fileURLToPath(new URL(".","undefined"==typeof document?require("url").pathToFileURL(__filename).href:v&&v.src||new URL("index.cjs",document.baseURI).href)),oe=e.readFileSync(re+"/../templates/template.html","utf8");let ie;const ne=async e=>{await e.setContent(oe),await e.addScriptTag({path:re+"/../.cache/sources.js"}),await e.evaluate((()=>window.setupHighcharts())),e.on("pageerror",(async t=>{await e.$eval("#container",((e,t)=>{window._displayErrors&&(e.innerHTML=t)}),`<h1>Chart input data error</h1>${t.toString()}`)}))},se=async()=>{if(!ie)return!1;const e=await ie.newPage();return await e.setCacheEnabled(!1),await ne(e),e},ae=async(e,t=!1)=>{try{t?(await e.goto("about:blank"),await ne(e)):await e.$eval("body",(e=>e.innerHTML='<div id="chart-container"><div id="container"></div></div>'))}catch(e){L(2,e,"[browser] Could not clear the page content.")}},le=async()=>{ie.connected&&await ie.close()};const ce=w.fileURLToPath(new URL(".","undefined"==typeof document?require("url").pathToFileURL(__filename).href:v&&v.src||new URL("index.cjs",document.baseURI).href)),pe=(e,t,r)=>e.evaluate(((e,t)=>window.triggerExport(e,t)),t,r);var ue=async(r,o,i)=>{const n=[],s=async e=>{for(const e of n)await e.dispose();await e.evaluate((()=>{const[,...e]=document.getElementsByTagName("script"),[,...t]=document.getElementsByTagName("style"),[...r]=document.getElementsByTagName("link");for(const o of[...e,...t,...r])o.remove()}))};try{const a=()=>{};H(4,"[export] Determining export path.");const l=i.export;await r.evaluate((()=>requestAnimationFrame((()=>{}))));const c=l?.options?.chart?.displayErrors&&Y().activeManifest.modules.debugger;await r.evaluate((e=>window._displayErrors=e),c);const p=()=>{};let u;if(o.indexOf&&(o.indexOf("<svg")>=0||o.indexOf("<?xml")>=0)){if(H(4,"[export] Treating as SVG."),"svg"===l.type)return o;u=!0;const e=()=>{};await r.setContent((e=>`\n<!DOCTYPE html>\n<html lang='en-US'>\n  <head>\n    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n    <title>Highcarts Export</title>\n  </head>\n  <style>\n    \n\nhtml, body {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n#table-div, #sliders, #datatable, #controls, .ld-row {\n  display: none;\n  height: 0;\n}\n\n#chart-container {\n  box-sizing: border-box;\n  margin: 0;\n  overflow: auto;\n  font-size: 0;\n}\n\n#chart-container > figure, div {\n  margin-top: 0 !important;\n  margin-bottom: 0 !important;\n}\n\n\n  </style>\n  <body>\n    <div id="chart-container">\n      ${e}\n    </div>\n  </body>\n</html>\n\n`)(o)),e()}else if(H(4,"[export] Treating as config."),l.strInj){const e=()=>{};await pe(r,{chart:{height:l.height,width:l.width}},i),e()}else{o.chart.height=l.height,o.chart.width=l.width;const e=()=>{};await pe(r,o,i),e()}p();const d=()=>{},h=i.customCode.resources;if(h){if(h.js&&n.push(await r.addScriptTag({content:h.js})),h.files)for(const t of h.files)try{const o=!t.startsWith("http");n.push(await r.addScriptTag(o?{content:e.readFileSync(t,"utf8")}:{url:t}))}catch(e){L(2,e,"[export] JS file cannot be loaded.")}const o=()=>{};if(h.css){let e=h.css.match(/@import\s*([^;]*);/g);if(e)for(let o of e)o&&(o=o.replace("url(","").replace("@import","").replace(/"/g,"").replace(/'/g,"").replace(/;/,"").replace(/\)/g,"").trim(),o.startsWith("http")?n.push(await r.addStyleTag({url:o})):i.customCode.allowFileResources&&n.push(await r.addStyleTag({path:t.join(ce,o)})));n.push(await r.addStyleTag({content:h.css.replace(/@import\s*([^;]*);/g,"")||" "}))}o()}d();const g=u?await r.$eval("#chart-container svg:first-of-type",((e,t)=>({chartHeight:e.height.baseVal.value*t,chartWidth:e.width.baseVal.value*t})),parseFloat(l.scale)):await r.evaluate((()=>{const{chartHeight:e,chartWidth:t}=window.Highcharts.charts[0];return{chartHeight:e,chartWidth:t}})),m=()=>{},f=Math.ceil(g?.chartHeight||l.height),v=Math.ceil(g?.chartWidth||l.width);await r.setViewport({height:f,width:v,deviceScaleFactor:u?1:parseFloat(l.scale)});const y=u?e=>{document.body.style.zoom=e,document.body.style.margin="0px"}:()=>{document.body.style.zoom=1};await r.evaluate(y,parseFloat(l.scale));const{height:w,width:b,x:T,y:x}=await(e=>e.$eval("#chart-container",(e=>{const{x:t,y:r,width:o,height:i}=e.getBoundingClientRect();return{x:t,y:r,width:o,height:Math.trunc(i>1?i:500)}})))(r);let k;u||await r.setViewport({width:Math.round(b),height:Math.round(w),deviceScaleFactor:parseFloat(l.scale)}),m();const S=()=>{};if("svg"===l.type)k=await(e=>e.$eval("#container svg:first-of-type",(e=>e.outerHTML)))(r);else if("png"===l.type||"jpeg"===l.type)k=await((e,t,r,o,i)=>Promise.race([e.screenshot({type:t,encoding:r,clip:o,omitBackground:"png"==t}),new Promise(((e,t)=>setTimeout((()=>t(new Error("Rasterization timeout"))),i||1500)))]))(r,l.type,"base64",{width:v,height:f,x:T,y:x},l.rasterizationTimeout);else{if("pdf"!==l.type)throw new W(`[export] Unsupported output format ${l.type}.`);k=await((e,t,r,o)=>e.pdf({height:t+1,width:r,encoding:o}))(r,f,v,"base64")}return await r.evaluate((()=>{if("undefined"!=typeof Highcharts){const e=Highcharts.charts;if(Array.isArray(e)&&e.length)for(const t of e)t&&t.destroy(),Highcharts.charts.shift()}})),S(),a(),await s(r),k}catch(e){return await s(r),e}};let de,he=0,ge=0,me=0,fe=0,ve=0,ye={},we=!1;const be={create:async()=>{const e=h.v4();let t=!1;const r=(new Date).getTime();try{if(t=await se(),!t||t.isClosed())throw"[pool] Invalid page";H(3,`[pool] Successfully created a worker ${e} - took ${(new Date).getTime()-r} ms.`)}catch(e){throw H(1,`[pool] Error creating a new page in pool entry creation! ${e}`),"Error creating page"}return{id:e,page:t,workCount:Math.round(Math.random()*(ye.workLimit/2))}},validate:async e=>ye.workLimit&&++e.workCount>ye.workLimit?(H(3,`[pool] Worker failed validation: exceeded work limit (limit is ${ye.workLimit})`),!1):(await ae(e.page,!0),!0),destroy:e=>{H(3,`[pool] Destroying pool entry ${e.id}.`),e.page&&e.page.close()},log:(e,t)=>console.log(`${t}: ${e}`)},Te=async e=>{de=e.puppeteerArgs;try{await(async e=>{const t=[...te,...e||[]];if(!ie){let e=0;const r=async()=>{try{H(3,`[browser] Attempting to get a browser instance (try ${e}).`),ie=await g.launch({headless:"new",args:t,userDataDir:"./tmp/"})}catch(t){if(L(1,t,"[browser] Could not launch a browser instance."),!(++e<25))throw t;H(3,`[browser] Retry to open a browser (${e} out of 25).`),await new Promise((e=>setTimeout(e,4e3))),await r()}};try{await r()}catch(e){throw new W("[browser] Max retries to open a browser instance reached.").setError(e)}if(!ie)throw new W("[browser] Cannot find a browser to open.")}return ie})(de)}catch(e){throw new W(e.message).setError(e)}if(ye=e&&e.pool?{...e.pool}:{},H(3,`[pool] Initializing pool with workers: min ${ye.minWorkers}, max ${ye.maxWorkers}.`),we)return H(4,"[pool] Already initialized, please kill it before creating a new one.");ye.listenToProcessExits&&(H(4,"[pool] Attaching exit listeners to the process."),process.on("exit",(async()=>{await xe()})),process.on("SIGINT",((e,t)=>{H(4,`The ${e} event with code: ${t}.`),process.exit(1)})),process.on("SIGTERM",((e,t)=>{H(4,`The ${e} event with code: ${t}.`),process.exit(1)})),process.on("uncaughtException",((e,t)=>{L(1,e,`The ${t} error.`),process.exit(1)}))),parseInt(ye.minWorkers)>parseInt(ye.maxWorkers)&&(ye.minWorkers=ye.maxWorkers);try{we=new d.Pool({...be,min:parseInt(ye.minWorkers),max:parseInt(ye.maxWorkers),acquireTimeoutMillis:ye.acquireTimeout,createTimeoutMillis:ye.createTimeout,destroyTimeoutMillis:ye.destroyTimeout,idleTimeoutMillis:ye.idleTimeout,createRetryIntervalMillis:ye.createRetryInterval,reapIntervalMillis:ye.reaperInterval,propagateCreateError:!1}),we.on("createFail",((e,t)=>{L(1,t,`[pool] Error when creating worker of an event id ${e}.`)})),we.on("acquireFail",((e,t)=>{L(1,t,`[pool] Error when acquiring worker of an event id ${e}.`)})),we.on("destroyFail",((e,t,r)=>{L(1,r,`[pool] Error when destroying worker of an id ${t.id}, event id ${e}.`)})),we.on("release",(async e=>{await ae(e.page,!1),H(4,`[pool] Releasing a worker of an id ${e.id}.`)})),we.on("destroySuccess",((e,t)=>{H(4,`[pool] Destroyed a worker of an id ${t.id}.`)}));const e=[];for(let t=0;t<ye.minWorkers;t++)try{const t=await we.acquire().promise;e.push(t)}catch(e){L(1,e,"[pool] Could not create an initial resource.")}e.forEach((e=>{we.release(e)})),H(3,"[pool] The pool is ready"+(e.length?` with ${e.length} initial resources waiting.`:"."))}catch(e){throw new W("[pool] Could not create the worker pool.").setError(e)}};async function xe(){return H(3,"[pool] Killing all workers."),we.destroyed?(await le(),!0):(await we.destroy(),await le(),!0)}const ke=async(e,t)=>{let r;try{if(H(4,"[pool] Work received, starting to process."),ye.benchmarking&&Se(),++ge,!we)throw new W("Work received, but pool has not been started.");try{H(4,"[pool] Acquiring a worker handle."),r=await we.acquire().promise}catch(e){throw new W("Error when acquiring available entry.").setError(e)}if(H(4,"[pool] Acquired a worker handle."),!r.page)throw new W("Resolved worker page is invalid: pool setup is wonky.");let o=(new Date).getTime();H(4,`[pool] Starting work on pool entry ${r.id}.`);const i=await ue(r.page,e,t);if(i instanceof Error)throw"Rasterization timeout"===i.message&&(r.page.close(),r.page=await se()),new W("Error encountered during export.").setError(i);we.release(r);const n=(new Date).getTime()-o;return me+=n,ve=me/++he,H(4,`[pool] Work completed in ${n} ms.`),{result:i,options:t}}catch(e){throw++fe,r&&we.release(r),new W(`[pool] In pool.postWork: ${e.message}`).setError(e)}};function Se(){const{min:e,max:t,size:r,available:o,borrowed:i,pending:n,spareResourceCapacity:s}=we;H(4,`[pool] The minimum number of resources allowed by pool: ${e}.`),H(4,`[pool] The maximum number of resources allowed by pool: ${t}.`),H(4,`[pool] The number of all resources in pool (free or in use): ${r}.`),H(4,`[pool] The number of resources that are currently available: ${o}.`),H(4,`[pool] The number of resources that are currently acquired: ${i}.`),H(4,`[pool] The number of callers waiting to acquire a resource: ${n}.`),H(4,`[pool] The number of how many more resources can the pool manage/create: ${s}.`)}var Ee=()=>({min:we.min,max:we.max,size:we.size,available:we.available,borrowed:we.borrowed,pending:we.pending,spareResourceCapacity:we.spareResourceCapacity}),Re=()=>ge,He=()=>fe,Le=()=>ve,Ce=()=>he;const Oe=JSON.parse(e.readFileSync(t.join(I,"package.json"))),_e=new Date;let Ie={};const Ae=()=>Ie,$e=(e,t,r=[])=>{const o=P(e);for(const[e,n]of Object.entries(t))o[e]="object"!=typeof(i=n)||Array.isArray(i)||null===i||r.includes(e)||void 0===o[e]?void 0!==n?n:o[e]:$e(o[e],n,r);var i;return o};function je(e,t={},r=""){Object.keys(e).forEach((o=>{const i=e[o],n=t&&t[o];let s;void 0===i.value?je(i,n,`${r}.${o}`):(void 0!==n&&(i.value=n),i.envLink&&("boolean"===i.type?i.value=U([process.env[i.envLink],i.value].find((e=>e||"false"===e))):"number"===i.type?(s=+process.env[i.envLink],i.value=s>=0?s:i.value):i.type.indexOf("]")>=0&&process.env[i.envLink]?i.value=process.env[i.envLink].split(","):i.value=process.env[i.envLink]||i.value))}))}function Pe(e){let t={};for(const[r,o]of Object.entries(e))t[r]=Object.prototype.hasOwnProperty.call(o,"value")?o.value:Pe(o);return t}let Ne=!1;const Fe=async(t,r)=>{H(4,"[chart] Starting exporting process.");const o=((e,t={})=>{let r={};return e.svg?(r=P(t),r.export.type=e.type||e.export.type,r.export.scale=e.scale||e.export.scale,r.export.outfile=e.outfile||e.export.outfile,r.payload={svg:e.svg}):r=$e(t,e,T),r.export.outfile=r.export?.outfile||`chart.${r.export?.type||"png"}`,r})(t,Ae()),i=o.export;if(o.payload?.svg&&""!==o.payload.svg)try{return H(4,"[chart] Attempting to export from a SVG input."),We(o.payload.svg.trim(),o,r)}catch(e){return r(!1,new W("[chart] Error loading SVG input.").setError(e))}if(i.infile&&i.infile.length)try{return H(4,"[chart] Attempting to export from an input file."),o.export.instr=e.readFileSync(i.infile,"utf8"),We(o.export.instr.trim(),o,r)}catch(e){return r(!1,new W("[chart] Error loading input file.").setError(e))}if(i.instr&&""!==i.instr||i.options&&""!==i.options)try{return H(4,"[chart] Attempting to export from a raw input."),U(o.customCode?.allowCodeExecution)?Ge(o,r):"string"==typeof i.instr?We(i.instr.trim(),o,r):qe(o,i.instr||i.options,r)}catch(e){return r(!1,new W("[chart] Error loading raw input.").setError(e))}return r&&r(!1,new W(`[chart] No input specified. ${JSON.stringify(i,void 0,"  ")}`))},Ue=e=>{const{chart:t,exporting:r}=e.export?.options||j(e.export?.instr),o=j(e.export?.globalOptions);let i=e.export?.scale||r?.scale||o?.exporting?.scale||e.export?.defaultScale||1;i=Math.max(.1,Math.min(i,5)),i=((e,t=1)=>{const r=Math.pow(10,t||0);return Math.round(+e*r)/r})(i,2);const n={height:e.export?.height||r?.sourceHeight||t?.height||o?.exporting?.sourceHeight||o?.chart?.height||e.export?.defaultHeight||400,width:e.export?.width||r?.sourceWidth||t?.width||o?.exporting?.sourceWidth||o?.chart?.width||e.export?.defaultWidth||600,scale:i};for(var[s,a]of Object.entries(n))n[s]="string"==typeof a?+a.replace(/px|%/gi,""):a;return n},qe=async(t,r,o,i)=>{let{export:n,customCode:s}=t;const a="boolean"==typeof s.allowCodeExecution?s.allowCodeExecution:Ne;if(s){if(a)if("string"==typeof t.customCode.resources)t.customCode.resources=$(t.customCode.resources,U(t.customCode.allowFileResources));else if(!t.customCode.resources)try{const r=e.readFileSync("resources.json","utf8");t.customCode.resources=$(r,U(t.customCode.allowFileResources))}catch(e){L(2,e,"[chart] The default resources.json cannot be loaded.")}}else s=t.customCode={};if(!a&&s){if(s.callback||s.resources||s.customCode)return o&&o(!1,new W("[chart] The 'callback', 'resources' and 'customCode' options have been disabled for this server."));s.callback=!1,s.resources=!1,s.customCode=!1}if(r&&(r.chart=r.chart||{},r.exporting=r.exporting||{},r.exporting.enabled=!1),n.constr=n.constr||"chart",n.type=A(n.type,n.outfile),"svg"===n.type&&(n.width=!1),["globalOptions","themeOptions"].forEach((t=>{try{n&&n[t]&&("string"==typeof n[t]&&n[t].endsWith(".json")?n[t]=j(e.readFileSync(n[t],"utf8"),!0):n[t]=j(n[t],!0))}catch(e){n[t]={},L(2,e,`[chart] The '${t}' cannot be loaded.`)}})),s.allowCodeExecution)try{s.customCode=q(s.customCode,s.allowFileResources)}catch(e){L(2,e,"[chart] The 'customCode' cannot be loaded.")}if(s&&s.callback&&s.callback?.indexOf("{")<0)if(s.allowFileResources)try{s.callback=e.readFileSync(s.callback,"utf8")}catch(e){L(2,e,"[chart] The 'callback' cannot be loaded."),s.callback=!1}else s.callback=!1;t.export={...t.export,...Ue(t)};try{return o(await ke(n.strInj||r||i,t))}catch(e){return o(!1,e)}},Ge=(e,t)=>{try{let r,o=e.export.instr||e.export.options;return"string"!=typeof o&&(r=o=N(o,e.customCode?.allowCodeExecution)),r=o.replaceAll(/\t|\n|\r/g,"").trim(),";"===r[r.length-1]&&(r=r.substring(0,r.length-1)),e.export.strInj=r,qe(e,!1,t)}catch(r){return t&&t(!1,new W(`[chart] Malformed input detected for ${e.export?.requestId||"?"}. Please make sure that your JSON/JavaScript options are sent using the "options" attribute, and that if you're using SVG, it is unescaped.`).setError(r))}},We=(e,t,r)=>{const{allowCodeExecution:o}=t.customCode;if(e.indexOf("<svg")>=0||e.indexOf("<?xml")>=0)return H(4,"[chart] Parsing input as SVG."),qe(t,!1,r,e);try{const o=JSON.parse(e.replaceAll(/\t|\n|\r/g," "));return qe(t,o,r)}catch(e){return U(o)?Ge(t,r):r&&r(!1,new W("[chart] Only JSON configurations and SVG are allowed for this server. If this is your server, JavaScript custom code can be enabled by starting the server with the --allowCodeExecution flag.").setError(e))}};class Me extends Error{constructor(e,t){super(t),this.status=this.statusCode=e,this.message=t}setStatus(e){return this.status=e,this}setError(e){return this.error=e,e.stack&&(this.stack=e.stack),this}}class De extends Me{constructor(e,t){super(400,e||"Bad request"),t&&(this.stack=t.stack)}}const Ve={png:"image/png",jpeg:"image/jpeg",gif:"image/gif",pdf:"application/pdf",svg:"image/svg+xml"};let Je=0;const ze=!1,Xe=[],Ke=[],Be=(e,t,r,o)=>{let i=!0;const{id:n,uniqueId:s,type:a,body:l}=o;return e.some((e=>{if(e){let o=e(t,r,n,s,a,l);return void 0!==o&&!0!==o&&(i=o),!0}})),i},Ye=async(e,t,r)=>{try{(()=>{const e=process.hrtime.bigint()})();const r=Ae();ze;const i=e.body,n=++Je,s=h.v4().replace(/-/g,"");let a=A(i.type);if(!i||"object"==typeof(o=i)&&null!==o&&0===Object.keys(o).length)throw new De("The request body is required. Make sure your Content-Type header is correct (accepted are application/json and multipart/form-data).");let l=j(i.infile||i.options||i.data);if(!l&&!i.svg)throw H(2,`Request ${s} from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Payload received: ${JSON.stringify(i)}.`),new De("No correct chart data found. Please make sure you are using application/json or multipart/form-data headers, and that the chart data is in the 'infile', 'options' or 'data' attribute if sending JSON or in the 'svg' if sending SVG.");let c=!1;if(c=Be(Xe,e,t,{id:n,uniqueId:s,type:a,body:i}),!0!==c)return t.send(c);let p=!1;e.socket.on("close",(()=>{p=!0})),H(4,`[export] Got an incoming HTTP request ${s}.`),i.constr="string"==typeof i.constr&&i.constr||"chart";const u={export:{instr:l,type:a,constr:i.constr[0].toLowerCase()+i.constr.substr(1),height:i.height,width:i.width,scale:i.scale||r.export.scale,globalOptions:j(i.globalOptions,!0),themeOptions:j(i.themeOptions,!0)},customCode:{allowCodeExecution:Ne,allowFileResources:!1,resources:j(i.resources,!0),callback:i.callback,customCode:i.customCode}};ze,l&&(u.export.instr=N(l,u.customCode.allowCodeExecution));const d=$e(r,u);if(d.export.options=l,d.payload={svg:i.svg||!1,b64:i.b64||!1,dataOptions:j(i.dataOptions,!0),noDownload:i.noDownload||!1,requestId:s},i.svg&&(e=>["localhost","(10).(.*).(.*).(.*)","(127).(.*).(.*).(.*)","(172).(1[6-9]|2[0-9]|3[0-1]).(.*).(.*)","(192).(168).(.*).(.*)"].some((t=>e.match(`xlink:href="(?:(http://|https://))?${t}`))))(d.payload.svg))throw new De("SVG potentially contain at least one forbidden URL in xlink:href element.");ze,await Fe(d,((r,o)=>{if(e.socket.removeAllListeners("close"),p)return H(3,"[export] The client closed the connection before the chart was done processing.");if(o)throw o;if(!r||!r.result)throw new De(`[export] Unexpected return from chart generation, please check your request data: ${s} is ${r.result}.`).setStatus(400);return a=r.options.export.type,Be(Ke,e,t,{id:n,body:r.result}),r.result?i.b64?"pdf"===a||"svg"==a?t.send(Buffer.from(r.result,"utf8").toString("base64")):t.send(r.result):(t.header("Content-Type",Ve[a]||"image/png"),i.noDownload||t.attachment(`${e.params.filename||e.body.filename||"chart"}.${a||"png"}`),"svg"===a?t.send(r.result):t.send(Buffer.from(r.result,"base64"))):void 0}))}catch(e){r(e)}var o};const Qe=i();Qe.disable("x-powered-by"),Qe.use(o());const Ze=a.memoryStorage(),et=a({storage:Ze,limits:{fieldsSize:"50MB"}});Qe.use(et.any()),Qe.use(r.json({limit:"50mb"})),Qe.use(r.urlencoded({extended:!0,limit:"50mb"})),Qe.use(r.urlencoded({extended:!1,limit:"50mb"}));const tt=async r=>{try{if(!r.enable)return!1;if(!r.ssl.enable&&!r.ssl.force){n.createServer(Qe).listen(r.port,r.host),H(3,`[server] Started HTTP server on ${r.host}:${r.port}.`)}if(r.ssl.enable){let o,i;try{o=await e.promises.readFile(t.posix.join(r.ssl.certPath,"server.key"),"utf8"),i=await e.promises.readFile(t.posix.join(r.ssl.certPath,"server.crt"),"utf8")}catch(e){L(2,e,`[server] Unable to load key/certificate from ${r.ssl.certPath}.`)}if(o&&i){s.createServer(Qe).listen(r.ssl.port,r.host),H(3,`[server] Started HTTPS server on ${r.host}:${r.ssl.port}.`)}}r.rateLimiting&&r.rateLimiting.enable&&![0,NaN].includes(r.rateLimiting.maxRequests)&&_(Qe,r.rateLimiting),Qe.use(i.static(t.posix.join(I,"public"))),(e=>{!!e&&e.get("/health",((e,t)=>{t.send({status:"OK",bootTime:_e,uptime:Math.floor(((new Date).getTime()-_e.getTime())/1e3/60)+" minutes",version:Oe.version,highchartsVersion:Q(),averageProcessingTime:Le(),performedExports:Ce(),failedExports:He(),exportAttempts:Re(),sucessRatio:Ce()/Re()*100,pool:Ee()})}))})(Qe),(e=>{e.post("/",Ye),e.post("/:filename",Ye)})(Qe),(e=>{!!e&&e.get("/",((e,r)=>{r.sendFile(t.join(I,"public","index.html"))}))})(Qe),(e=>{!!e&&e.post("/change_hc_version/:newVersion",(async(e,t)=>{const r=process.env.HIGHCHARTS_ADMIN_TOKEN;if(!r||!r.length)return t.send({error:!0,message:"Server not configured to do run-time version changes: HIGHCHARTS_ADMIN_TOKEN not set."});const o=e.get("hc-auth");if(!o||o!==r)return t.send({error:!0,message:"Invalid or missing token: set token in the hc-auth header."});const i=e.params.newVersion;if(i){try{await B(i)}catch(e){t.send({error:!0,message:e})}t.send({version:Q()})}else t.send({error:!0,message:"No new version supplied."})}))})(Qe),(e=>{e.use(C),e.use(O)})(Qe)}catch(e){throw new W("[server] Could not configure and start the server.").setError(e)}};var rt={startServer:tt,getExpress:()=>i,getApp:()=>Qe,use:(e,...t)=>{Qe.use(e,...t)},get:(e,...t)=>{Qe.get(e,...t)},post:(e,...t)=>{Qe.post(e,...t)},enableRateLimiting:e=>_(Qe,e)},ot={log:H,logWithStack:L,mapToNewConfig:e=>{const t={};for(const[r,o]of Object.entries(e)){const e=x[r]?x[r].split("."):[];e.reduce(((t,r,i)=>t[r]=e.length-1===i?o:t[r]||{}),t)}return t},setOptions:(t,r)=>(r?.length&&(Ie=function(t){const r=t.findIndex((e=>"loadConfig"===e.replace(/-/g,"")));if(r>-1&&t[r+1]){const o=t[r+1];try{if(o&&o.endsWith(".json"))return JSON.parse(e.readFileSync(o))}catch(e){L(2,e,`[config] Unable to load config from the ${o}.`)}}return{}}(r)),je(b,Ie),Ie=Pe(b),t&&(Ie=$e(Ie,t,T)),r?.length&&(Ie=function(e,t,r){for(let r=0;r<t.length;r++){let o=t[r].replace(/-/g,"");const i=x[o]?x[o].split("."):[];i.reduce(((n,s,a)=>(i.length-1===a&&void 0!==n[s]&&(t[++r]?n[s]=t[r]||n[s]:(console.log(`Missing argument value for ${o}!`.red,"\n"),e=F())),n[s])),e)}return e}(Ie,r)),Ie),singleExport:async t=>{t.export.instr=t.export.instr||t.export.options,await Fe(t,((t,r)=>{if(r)throw r;const{outfile:o,type:i}=t.options.export;e.writeFileSync(o||`chart.${i}`,"svg"!==i?Buffer.from(t.result,"base64"):t.result),xe()}))},startExport:Fe,batchExport:t=>{const r=[];for(let o of t.export.batch.split(";"))o=o.split("="),2===o.length&&r.push(new Promise(((r,i)=>{Fe({...t,export:{...t.export,infile:o[0],outfile:o[1]}},((t,o)=>{if(o)return i(o);e.writeFileSync(t.options.export.outfile,Buffer.from(t.result,"base64")),r()}))})));Promise.all(r).then((()=>{xe()})).catch((e=>{L(1,e,"[chart] Error encountered during batch export."),process.exit(1)}))},server:rt,startServer:tt,killPool:xe,initPool:async(e={})=>{var t,r;return t=e.customCode&&e.customCode.allowCodeExecution,Ne=U(t),(r=e.logging&&parseInt(e.logging.level))>=0&&r<=E.levelsDesc.length&&(E.level=r),e.logging&&e.logging.dest&&((e,t)=>{if(E={...E,dest:e||E.dest,file:t||E.file,toFile:!0},0===E.dest.length)return H(1,"[logger] File logging init: no path supplied.");E.dest.endsWith("/")||(E.dest+="/")})(e.logging.dest,e.logging.file||"highcharts-export-server.log"),await K(e.highcharts||{version:"latest"}),await Te({pool:e.pool||{minWorkers:1,maxWorkers:1},puppeteerArgs:e.puppeteer?.args||[]}),e}};module.exports=ot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
