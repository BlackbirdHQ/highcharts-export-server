"use strict";require("colors");var e=require("fs"),t=require("path"),r=require("dotenv"),o=require("https-proxy-agent"),i=require("http"),n=require("https"),s=require("url"),a=require("prompts"),l=require("tarn"),c=require("uuid"),p=require("node:path"),u=require("puppeteer"),d=require("node:crypto"),h=require("body-parser"),g=require("cors"),m=require("express"),f=require("multer"),y=require("express-rate-limit"),v="undefined"!=typeof document?document.currentScript:null;function b(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var o=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,o.get?o:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var w=b(s);async function T(e,t={}){return new Promise(((r,o)=>{const s=(e=>e.startsWith("https")?n:i)(e);s.get(e,t,(e=>{let t="";e.on("data",(e=>{t+=e})),e.on("end",(()=>{t||o("Nothing was fetched from the URL."),e.text=t,r(e)}))})).on("error",(e=>{o(e)}))}))}r.config();const x={puppeteer:{args:{value:[],type:"string[]",description:"Array of arguments to send to puppeteer."}},highcharts:{version:{value:"latest",envLink:"HIGHCHARTS_VERSION",type:"string",description:"Highcharts version to use."},cdnURL:{value:"https://code.highcharts.com/",envLink:"HIGHCHARTS_CDN",type:"string",description:"The CDN URL of Highcharts scripts to use."},coreScripts:{envLink:"HIGHCHARTS_CORE_SCRIPTS",value:["highcharts","highcharts-more","highcharts-3d"],type:"string[]",description:"Highcharts core scripts to fetch."},modules:{envLink:"HIGHCHARTS_MODULES",value:["stock","map","gantt","exporting","export-data","parallel-coordinates","accessibility","annotations-advanced","boost-canvas","boost","data","draggable-points","static-scale","broken-axis","heatmap","tilemap","timeline","treemap","treegraph","item-series","drilldown","histogram-bellcurve","bullet","funnel","funnel3d","pyramid3d","networkgraph","pareto","pattern-fill","pictorial","price-indicator","sankey","arc-diagram","dependency-wheel","series-label","solid-gauge","sonification","stock-tools","streamgraph","sunburst","variable-pie","variwide","vector","venn","windbarb","wordcloud","xrange","no-data-to-display","drag-panes","debugger","dumbbell","lollipop","cylinder","organization","dotplot","marker-clusters","hollowcandlestick","heikinashi"],type:"string[]",description:"Highcharts modules to fetch."},indicators:{envLink:"HIGHCHARTS_INDICATORS",value:["indicators-all"],type:"string[]",description:"Highcharts indicators to fetch."},scripts:{value:["https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js","https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js"],type:"string[]",description:"Additional direct scripts/optional dependencies (e.g. moment.js)."},forceFetch:{envLink:"HIGHCHARTS_FORCE_FETCH",value:!1,type:"boolean",description:"Should all the scripts be refetched after rerunning the server."}},export:{infile:{value:!1,type:"string",description:"The input file name along with a type (json or svg). It can be a correct JSON or SVG file."},instr:{value:!1,type:"string",description:"An input in a form of a stringified JSON or SVG file. Overrides the --infile."},options:{value:!1,type:"string",description:"An alias for the --instr option."},outfile:{value:!1,type:"string",description:"The output filename along with a type (jpeg, png, pdf or svg). Ignores the --type flag."},type:{envLink:"EXPORT_DEFAULT_TYPE",value:"png",type:"string",description:"The format of the file to export to. Can be jpeg, png, pdf or svg."},constr:{envLink:"EXPORT_DEFAULT_CONSTR",value:"chart",type:"string",description:"The constructor to use. Can be chart, stockChart, mapChart or ganttChart."},defaultHeight:{envLink:"EXPORT_DEFAULT_HEIGHT",value:400,type:"number",description:"The default height of the exported chart. Used when not found any value set."},defaultWidth:{envLink:"EXPORT_DEFAULT_WIDTH",value:600,type:"number",description:"The default width of the exported chart. Used when not found any value set."},defaultScale:{envLink:"EXPORT_DEFAULT_SCALE",value:1,type:"number",description:"The default scale of the exported chart. Ranges between 1 and 5."},height:{type:"number",value:!1,description:"The default height of the exported chart. Overrides the option in the chart settings."},width:{type:"number",value:!1,description:"The width of the exported chart. Overrides the option in the chart settings."},scale:{value:!1,type:"number",description:"The scale of the exported chart. Ranges between 1 and 5."},globalOptions:{value:!1,type:"string",description:"A stringified JSON or a filename with options to be passed into the Highcharts.setOptions."},themeOptions:{value:!1,type:"string",description:"A stringified JSON or a filename with theme options to be passed into the Highcharts.setOptions."},batch:{value:!1,type:"string",description:'Starts a batch job. A string that contains input/output pairs: "in=out;in=out;..".'},rasterizationTimeout:{envLink:"EXPORT_RASTERIZATION_TIMEOUT",value:1500,type:"number",description:"The number of milliseconds to wait for rendering a webpage."}},customCode:{allowCodeExecution:{envLink:"HIGHCHARTS_ALLOW_CODE_EXECUTION",value:!1,type:"boolean",description:"If set to true, allow for the execution of arbitrary code when exporting."},allowFileResources:{envLink:"HIGHCHARTS_ALLOW_FILE_RESOURCES",value:!0,type:"boolean",description:"Allow injecting resources from the filesystem. Has no effect when running as a server."},customCode:{value:!1,type:"string",description:"A function to be called before chart initialization. Can be a filename with the js extension."},callback:{value:!1,type:"string",description:"A JavaScript file with a function to run on construction."},resources:{value:!1,type:"string",description:"An additional resource in a form of stringified JSON. It can contain files, js and css sections."},loadConfig:{value:!1,type:"string",description:"A file that contains a pre-defined config to use."},createConfig:{value:!1,type:"string",description:"Allows to set options through a prompt and save in a provided config file."}},server:{enable:{envLink:"HIGHCHARTS_SERVER_ENABLE",value:!1,type:"boolean",cliName:"enableServer",description:"If set to true, starts a server on 0.0.0.0."},host:{envLink:"HIGHCHARTS_SERVER_HOST",value:"0.0.0.0",type:"string",description:"The hostname of the server. Also starts a server listening on the supplied hostname."},port:{envLink:"HIGHCHARTS_SERVER_PORT",value:7801,type:"number",description:"The port to use for the server. Defaults to 7801."},ssl:{enable:{envLink:"HIGHCHARTS_SERVER_SSL_ENABLE",value:!1,type:"boolean",cliName:"enableSsl",description:"Enables the SSL protocol."},force:{envLink:"HIGHCHARTS_SERVER_SSL_FORCE",value:!1,type:"boolean",cliName:"sslForced",description:"If set to true, forces the server to only serve over HTTPS."},port:{envLink:"HIGHCHARTS_SERVER_SSL_PORT",value:443,type:"number",cliName:"sslPort",description:"The port on which to run the SSL server."},certPath:{envLink:"HIGHCHARTS_SSL_CERT_PATH",value:"",type:"string",description:"The path to the SSL certificate/key."}},rateLimiting:{enable:{envLink:"HIGHCHARTS_RATE_LIMIT_ENABLE",value:!1,type:"boolean",cliName:"enableRateLimiting",description:"Enables rate limiting."},maxRequests:{envLink:"HIGHCHARTS_RATE_LIMIT_MAX",value:10,type:"number",description:"Max requests allowed in a one minute."},window:{envLink:"HIGHCHARTS_RATE_LIMIT_WINDOW",value:1,type:"number",description:"The time window in minutes for rate limiting."},delay:{envLink:"HIGHCHARTS_RATE_LIMIT_DELAY",value:0,type:"number",description:"The amount to delay each successive request before hitting the max."},trustProxy:{envLink:"HIGHCHARTS_RATE_LIMIT_TRUST_PROXY",value:!1,type:"boolean",description:"Set this to true if behind a load balancer."},skipKey:{envLink:"HIGHCHARTS_RATE_LIMIT_SKIP_KEY",value:"",type:"number|string",description:"Allows bypassing the rate limiter and should be provided with skipToken argument."},skipToken:{envLink:"HIGHCHARTS_RATE_LIMIT_SKIP_TOKEN",value:"",type:"number|string",description:"Allows bypassing the rate limiter and should be provided with skipKey argument."}}},pool:{minWorkers:{envLink:"HIGHCHARTS_POOL_MIN_WORKERS",value:4,type:"number",description:"The number of initial workers to spawn."},maxWorkers:{envLink:"HIGHCHARTS_POOL_MAX_WORKERS",value:8,type:"number",description:"The number of max workers to spawn."},workLimit:{envLink:"HIGHCHARTS_POOL_WORK_LIMIT",value:40,type:"number",description:"The pieces of work that can be performed before restarting process."},acquireTimeout:{envLink:"HIGHCHARTS_POOL_ACQUIRE_TIMEOUT",value:5e3,type:"number",description:"The number of milliseconds to wait for acquiring a resource."},createTimeout:{envLink:"HIGHCHARTS_POOL_CREATE_TIMEOUT",value:5e3,type:"number",description:"The number of milliseconds to wait for creating a resource."},destroyTimeout:{envLink:"HIGHCHARTS_POOL_DESTROY_TIMEOUT",value:5e3,type:"number",description:"The number of milliseconds to wait for destroying a resource."},idleTimeout:{envLink:"HIGHCHARTS_POOL_IDLE_TIMEOUT",value:3e4,type:"number",description:"The number of milliseconds after an idle resource is destroyed."},createRetryInterval:{envLink:"HIGHCHARTS_POOL_CREATE_RETRY_INTERVAL",value:200,type:"number",description:"The number of milliseconds after the create process is retried in case of fail."},reaperInterval:{envLink:"HIGHCHARTS_POOL_REAPER_INTERVAL",value:1e3,type:"number",description:"The number of milliseconds after the check for idle resources to destroy is triggered."},benchmarking:{envLink:"HIGHCHARTS_POOL_BENCHMARKING",value:!1,type:"boolean",description:"Enable benchmarking."},listenToProcessExits:{envLink:"HIGHCHARTS_POOL_LISTEN_TO_PROCESS_EXITS",value:!0,type:"boolean",description:"Set to false in order to skip attaching process.exit handlers."}},logging:{level:{envLink:"HIGHCHARTS_LOG_LEVEL",value:4,type:"number",cliName:"logLevel",description:"The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose)."},file:{envLink:"HIGHCHARTS_LOG_FILE",value:"highcharts-export-server.log",type:"string",cliName:"logFile",description:"A name of a log file. The --logDest also needs to be set to enable file logging."},dest:{envLink:"HIGHCHARTS_LOG_DEST",value:"log/",type:"string",cliName:"logDest",description:"The path to store log files. Also enables file logging."}},ui:{enable:{envLink:"HIGHCHARTS_UI_ENABLE",value:!1,type:"boolean",cliName:"enableUi",description:"Enables the UI for the export server."},route:{envLink:"HIGHCHARTS_UI_ROUTE",value:"/",type:"string",cliName:"uiRoute",description:"The route to attach the UI to."}},other:{noLogo:{envLink:"HIGHCHARTS_NO_LOGO",value:!1,type:"boolean",description:"Skip printing the logo on a startup. Will be replaced by a simple text."}},payload:{}},k={puppeteer:[{type:"list",name:"args",message:"Puppeteer arguments",initial:x.puppeteer.args.value.join(","),separator:","}],highcharts:[{type:"text",name:"version",message:"Highcharts version",initial:x.highcharts.version.value},{type:"text",name:"cdnURL",message:"The url of CDN",initial:x.highcharts.cdnURL.value},{type:"multiselect",name:"modules",message:"Available modules",instructions:"Space: Select specific, A: Select all, Enter: Confirm.",choices:x.highcharts.modules.value},{type:"list",name:"scripts",message:"Custom scripts",initial:x.highcharts.scripts.value.join(","),separator:","},{type:"toggle",name:"forceFetch",message:"Should refetch all the scripts after each server rerun",initial:x.highcharts.forceFetch.value}],export:[{type:"select",name:"type",message:"The default type of a file to export to",hint:`Default: ${x.export.type.value}`,initial:0,choices:["png","jpeg","pdf","svg"]},{type:"select",name:"constr",message:"The default constructor for Highcharts to use",hint:`Default: ${x.export.constr.value}`,initial:0,choices:["chart","stockChart","mapChart","ganttChart"]},{type:"number",name:"defaultHeight",message:"The default fallback height of the exported chart",initial:x.export.defaultHeight.value},{type:"number",name:"defaultWidth",message:"The default fallback width of the exported chart",initial:x.export.defaultWidth.value},{type:"number",name:"defaultScale",message:"The default fallback scale of the exported chart",initial:x.export.defaultScale.value,min:.1,max:5},{type:"number",name:"rasterizationTimeout",message:"The number of milliseconds to wait for rendering a webpage",initial:x.export.rasterizationTimeout.value}],customCode:[{type:"toggle",name:"allowCodeExecution",message:"Allow to execute custom code",initial:x.customCode.allowCodeExecution.value},{type:"toggle",name:"allowFileResources",message:"Allow file resources",initial:x.customCode.allowFileResources.value}],server:[{type:"toggle",name:"enable",message:"Starts a server on 0.0.0.0",initial:x.server.enable.value},{type:"text",name:"host",message:"A hostname of a server",initial:x.server.host.value},{type:"number",name:"port",message:"A port of a server",initial:x.server.port.value},{type:"toggle",name:"ssl.enable",message:"Enable SSL protocol",initial:x.server.ssl.enable.value},{type:"toggle",name:"ssl.force",message:"Force to only serve over HTTPS",initial:x.server.ssl.force.value},{type:"number",name:"ssl.port",message:"Port on which to run the SSL server",initial:x.server.ssl.port.value},{type:"text",name:"ssl.certPath",message:"A path where to find the SSL certificate/key",initial:x.server.ssl.certPath.value},{type:"toggle",name:"rateLimiting.enable",message:"Enable rate limiting",initial:x.server.rateLimiting.enable.value},{type:"number",name:"rateLimiting.maxRequests",message:"Max requests allowed in a one minute",initial:x.server.rateLimiting.maxRequests.value},{type:"number",name:"rateLimiting.window",message:"The time window in minutes for rate limiting",initial:x.server.rateLimiting.window.value},{type:"number",name:"rateLimiting.delay",message:"The amount to delay each successive request before hitting the max",initial:x.server.rateLimiting.delay.value},{type:"toggle",name:"rateLimiting.trustProxy",message:"Set this to true if behind a load balancer",initial:x.server.rateLimiting.trustProxy.value},{type:"text",name:"rateLimiting.skipKey",message:"Allows bypassing the rate limiter and should be provided with skipToken argument",initial:x.server.rateLimiting.skipKey.value},{type:"text",name:"rateLimiting.skipToken",message:"Allows bypassing the rate limiter and should be provided with skipKey argument",initial:x.server.rateLimiting.skipToken.value}],pool:[{type:"number",name:"minWorkers",message:"The number of initial workers to spawn",initial:x.pool.minWorkers.value},{type:"number",name:"maxWorkers",message:"The number of max workers to spawn",initial:x.pool.maxWorkers.value},{type:"number",name:"workLimit",message:"The pieces of work that can be performed before restarting a puppeteer process",initial:x.pool.workLimit.value},{type:"number",name:"acquireTimeout",message:"The number of milliseconds to wait for acquiring a resource",initial:x.pool.acquireTimeout.value},{type:"number",name:"createTimeout",message:"The number of milliseconds to wait for creating a resource",initial:x.pool.createTimeout.value},{type:"number",name:"destroyTimeout",message:"The number of milliseconds to wait for destroying a resource",initial:x.pool.destroyTimeout.value},{type:"number",name:"idleTimeout",message:"The number of milliseconds after an idle resource is destroyed",initial:x.pool.idleTimeout.value},{type:"number",name:"createRetryInterval",message:"The number of milliseconds after the create process is retried in case of fail",initial:x.pool.createRetryInterval.value},{type:"number",name:"reaperInterval",message:"The number of milliseconds after the check for idle resources to destroy is triggered",initial:x.pool.reaperInterval.value},{type:"toggle",name:"benchmarking",message:"Set benchmarking",initial:x.pool.benchmarking.value},{type:"toggle",name:"listenToProcessExits",message:"Set to false in order to skip attaching process.exit handlers",initial:x.pool.listenToProcessExits.value}],logging:[{type:"number",name:"level",message:"The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose)",initial:x.logging.level.value,round:0,min:0,max:4},{type:"text",name:"file",message:"A name of a log file. The --logDest also needs to be set to enable file logging",initial:x.logging.file.value},{type:"text",name:"dest",message:"A path to log files. It enables file logging",initial:x.logging.dest.value}],ui:[{type:"toggle",name:"enable",message:"Enable UI for the export server",initial:x.ui.enable.value},{type:"text",name:"route",message:"A route to attach the UI to",initial:x.ui.route.value}],other:[{type:"toggle",name:"noLogo",message:"Skip printing the logo on a startup. Will be replaced by a simple text",initial:x.other.noLogo.value}]},S=["options","globalOptions","themeOptions","resources","payload"],E={},H=(e,t="")=>{Object.keys(e).forEach((r=>{if(!["puppeteer","highcharts"].includes(r)){const o=e[r];void 0===o.value?H(o,`${t}.${r}`):E[o.cliName||r]=`${t}.${r}`.substring(1)}}))};H(x);const L=["red","yellow","blue","gray"];let R={toConsole:!0,toFile:!1,pathCreated:!1,levelsDesc:[{title:"error",color:L[0]},{title:"warning",color:L[1]},{title:"notice",color:L[2]},{title:"verbose",color:L[3]}],listeners:[]};for(const[e,t]of Object.entries(x.logging))R[e]=t.value;const C=(t,r)=>{R.toFile&&(R.pathCreated||(!e.existsSync(R.dest)&&e.mkdirSync(R.dest),R.pathCreated=!0),e.appendFile(`${R.dest}${R.file}`,[r].concat(t).join(" ")+"\n",(e=>{e&&(console.log(`[logger] Unable to write to log file: ${e}`),R.toFile=!1)})))},O=(...e)=>{const[t,...r]=e,{level:o,levelsDesc:i}=R;if(0===t||t>o||o>i.length)return;const n=`${(new Date).toString().split("(")[0].trim()} [${i[t-1].title}] -`;R.listeners.forEach((e=>{e(n,r.join(" "))})),C(r,n),R.toConsole&&console.log.apply(void 0,[n.toString()[R.levelsDesc[t-1].color]].concat(r))},_=(e,t,r)=>{O(e,(r||t.message)[L[e-1]]);const o=t.message!==t.stackMessage||void 0===t.stackMessage?t.stack:t.stack.split("\n").slice(1).join("\n");R.toConsole&&console.log(o),C([o])},A=e=>{e>=0&&e<=R.levelsDesc.length&&(R.level=e)},I=(e,t)=>{if(R={...R,dest:e||R.dest,file:t||R.file,toFile:!0},0===R.dest.length)return O(1,"[logger] File logging init: no path supplied.");R.dest.endsWith("/")||(R.dest+="/")},j=s.fileURLToPath(new URL("../.","undefined"==typeof document?require("url").pathToFileURL(__filename).href:v&&v.src||new URL("index.cjs",document.baseURI).href)),$=(e,t)=>{const r=["png","jpeg","pdf","svg"];if(t){const o=t.split(".").pop();r.includes(o)&&e!==o&&(e=o)}return{"image/png":"png","image/jpeg":"jpeg","application/pdf":"pdf","image/svg+xml":"svg"}[e]||r.find((t=>t===e))||"png"},P=(t=!1,r)=>{const o=["js","css","files"];let i=t,n=!1;if(r&&t.endsWith(".json"))try{t?t&&t.endsWith(".json")?i=N(e.readFileSync(t,"utf8")):(i=N(t),!0===i&&(i=N(e.readFileSync("resources.json","utf8")))):i=N(e.readFileSync("resources.json","utf8"))}catch(e){return _(3,e,"[cli] No resources found.")}else i=N(t),r||delete i.files;for(const e in i)o.includes(e)?n||(n=!0):delete i[e];return n?(i.files&&(i.files=i.files.map((e=>e.trim())),(!i.files||i.files.length<=0)&&delete i.files),i):O(3,"[cli] No resources found.")};function N(e,t){try{const r=JSON.parse("string"!=typeof e?JSON.stringify(e):e);return"string"!=typeof r&&t?JSON.stringify(r):r}catch{return!1}}const F=e=>{if(null===e||"object"!=typeof e)return e;const t=Array.isArray(e)?[]:{};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=F(e[r]));return t},U=(e,t)=>JSON.stringify(e,((e,r)=>("string"==typeof r&&((r=r.trim()).startsWith("function(")||r.startsWith("function ("))&&r.endsWith("}")&&(r=t?`EXP_FUN${(r+"").replaceAll(/\n|\t|\r/g," ")}EXP_FUN`:void 0),"function"==typeof r?`EXP_FUN${(r+"").replaceAll(/\n|\t|\r/g," ")}EXP_FUN`:r))).replaceAll(/"EXP_FUN|EXP_FUN"/g,"");function q(){console.log("Usage of CLI arguments:".bold,"\n------",`\nFor more detailed information visit readme at: ${"https://github.com/highcharts/node-export-server#readme".bold.yellow}.`);const e=t=>{for(const[r,o]of Object.entries(t))if(Object.prototype.hasOwnProperty.call(o,"value")){let e=`  --${o.cliName||r} ${("<"+o.type+">").green} `;if(e.length<48)for(let t=e.length;t<48;t++)e+=".";console.log(e,o.description,`[Default: ${o.value.toString().bold}]`.blue)}else e(o)};Object.keys(x).forEach((t=>{["puppeteer","highcharts"].includes(t)||(console.log(`\n${t.toUpperCase()}`.red),e(x[t]))})),console.log("\n")}const W=e=>!["false","undefined","null","NaN","0",""].includes(e)&&!!e,G=(t,r)=>{if(t&&"string"==typeof t)return(t=t.trim()).endsWith(".js")?!!r&&G(e.readFileSync(t,"utf8")):t.startsWith("function()")||t.startsWith("function ()")||t.startsWith("()=>")||t.startsWith("() =>")?`(${t})()`:t.replace(/;$/,"")};class M extends Error{constructor(e){super(),this.message=e,this.stackMessage=e}setError(e){return this.error=e,e.name&&(this.name=e.name),e.stack&&(this.stackMessage=e.message,this.stack=e.stack),this}}r.config();const D=t.join(j,".cache"),V={cdnURL:"https://code.highcharts.com/",activeManifest:{},sources:"",hcVersion:""};let J=!1;const K=()=>V.hcVersion=V.sources.substr(0,V.sources.indexOf("*/")).replace("/*","").replace("*/","").replace(/\n/g,"").trim(),z=async(e,t)=>{e.endsWith(".js")&&(e=e.substring(0,e.length-3)),O(4,`[cache] Fetching script - ${e}.js`);const r=t?{agent:t,timeout:+process.env.PROXY_SERVER_TIMEOUT||5e3}:{},o=await T(`${e}.js`,r);if(200===o.statusCode)return o.text;throw new M(`[cache] Problem with fetching script${o.statusCode}`)},X=async(t,r)=>{const{coreScripts:i,modules:n,indicators:s,scripts:a}=t,l="latest"!==t.version&&t.version?`${t.version}/`:"";O(3,`[cache] Updating cache to Highcharts ${l}.`);const c=[...i.map((e=>`${l}${e}`)),...n.map((e=>"map"===e?`maps/${l}modules/${e}`:`${l}modules/${e}`)),...s.map((e=>`stock/${l}indicators/${e}`))];let p;const u=process.env.PROXY_SERVER_HOST,d=process.env.PROXY_SERVER_PORT;if(u&&d)try{p=new o({host:u,port:+d})}catch(e){throw new M("[cache] Could not create a Proxy Agent.").setError(e)}const h={};try{return V.sources=(await Promise.all([...c.map((async e=>{const r=await z(`${t.cdnURL||V.cdnURL}${e}`,p);return"string"==typeof r&&(h[e.replace(/(.*)\/|(.*)modules\/|stock\/(.*)indicators\/|maps\/(.*)modules\//gi,"")]=1),r})),...a.map((e=>z(e,p)))])).join(";\n"),K(),e.writeFileSync(r,V.sources),h}catch(e){throw new M("[cache] Unable to update local Highcharts cache.").setError(e)}},B=async r=>{let o;const i=t.join(D,"manifest.json"),n=t.join(D,"sources.js");if(J=r,!e.existsSync(D)&&e.mkdirSync(D),!e.existsSync(i)||r.forceFetch)O(3,"[cache] Fetching and caching Highcharts dependencies."),o=await X(r,n);else{let t=!1;const s=JSON.parse(e.readFileSync(i));if(s.modules&&Array.isArray(s.modules)){const e={};s.modules.forEach((t=>e[t]=1)),s.modules=e}const{modules:a,coreScripts:l,indicators:c}=r,p=a.length+l.length+c.length;s.version!==r.version?(O(2,"[cache] Highcharts version mismatch in cache, need to re-fetch."),t=!0):Object.keys(s.modules||{}).length!==p?(O(2,"[cache] Cache and requested modules do not match, need to re-fetch."),t=!0):t=(r.modules||[]).some((e=>{if(!s.modules[e])return O(2,`[cache] The ${e} missing in cache, need to re-fetch.`),!0})),t?o=await X(r,n):(O(3,"[cache] Dependency cache is up to date, proceeding."),V.sources=e.readFileSync(n,"utf8"),o=s.modules,K())}await(async(r,o)=>{const i={version:r.version,modules:o||{}};V.activeManifest=i,O(3,"[cache] Writing a new manifest.");try{e.writeFileSync(t.join(D,"manifest.json"),JSON.stringify(i),"utf8")}catch(e){throw new M("[cache] Error writing cache manifest.").setError(e)}})(r,o)};var Y=async e=>!!J&&await B(Object.assign(J,{version:e})),Q=()=>V,Z=()=>V.hcVersion;let ee={};const te=()=>ee,re=(e,t,r=[])=>{const o=F(e);for(const[e,n]of Object.entries(t))o[e]="object"!=typeof(i=n)||Array.isArray(i)||null===i||r.includes(e)||void 0===o[e]?void 0!==n?n:o[e]:re(o[e],n,r);var i;return o};function oe(e,t={},r=""){Object.keys(e).forEach((o=>{const i=e[o],n=t&&t[o];let s;void 0===i.value?oe(i,n,`${r}.${o}`):(void 0!==n&&(i.value=n),i.envLink&&("boolean"===i.type?i.value=W([process.env[i.envLink],i.value].find((e=>e||"false"===e))):"number"===i.type?(s=+process.env[i.envLink],i.value=s>=0?s:i.value):i.type.indexOf("]")>=0&&process.env[i.envLink]?i.value=process.env[i.envLink].split(","):i.value=process.env[i.envLink]||i.value))}))}function ie(e){let t={};for(const[r,o]of Object.entries(e))t[r]=Object.prototype.hasOwnProperty.call(o,"value")?o.value:ie(o);return t}function ne(e,t,r){for(;t.length>1;){const o=t.shift();return Object.prototype.hasOwnProperty.call(e,o)||(e[o]={}),e[o]=ne(Object.assign({},e[o]),t,r),e}return e[t[0]]=r,e}const se=d.randomBytes(64).toString("base64url"),ae=p.join("tmp",`puppeteer-${se}`),le=[`--user-data-dir=${p.join(ae,"profile")}`,"--autoplay-policy=user-gesture-required","--disable-background-networking","--disable-background-timer-throttling","--disable-backgrounding-occluded-windows","--disable-breakpad","--disable-client-side-phishing-detection","--disable-component-update","--disable-default-apps","--disable-dev-shm-usage","--disable-domain-reliability","--disable-extensions","--disable-features=AudioServiceOutOfProcess","--disable-hang-monitor","--disable-ipc-flooding-protection","--disable-notifications","--disable-offer-store-unmasked-wallet-cards","--disable-popup-blocking","--disable-print-preview","--disable-prompt-on-repost","--disable-renderer-backgrounding","--disable-session-crashed-bubble","--disable-setuid-sandbox","--disable-speech-api","--disable-sync","--hide-crash-restore-bubble","--hide-scrollbars","--ignore-gpu-blacklist","--metrics-recording-only","--mute-audio","--no-default-browser-check","--no-first-run","--no-pings","--no-sandbox","--no-zygote","--password-store=basic","--use-mock-keychain"],ce=w.fileURLToPath(new URL(".","undefined"==typeof document?require("url").pathToFileURL(__filename).href:v&&v.src||new URL("index.cjs",document.baseURI).href)),pe=e.readFileSync(ce+"/../templates/template.html","utf8");let ue;const de=async e=>{await e.setContent(pe),await e.addScriptTag({path:ce+"/../.cache/sources.js"}),await e.evaluate((()=>window.setupHighcharts())),e.on("pageerror",(async t=>{await e.$eval("#container",((e,t)=>{window._displayErrors&&(e.innerHTML=t)}),`<h1>Chart input data error</h1>${t.toString()}`)}))},he=async()=>{if(!ue)return!1;const e=await ue.newPage();return await e.setCacheEnabled(!1),await de(e),e},ge=async(e,t=!1)=>{try{t?(await e.goto("about:blank"),await de(e)):await e.evaluate((()=>{document.body.innerHTML='<div id="chart-container"><div id="container"></div></div>'}))}catch(e){_(2,e,"[browser] Could not clear the page content.")}},me=async()=>(ue?.connected&&await ue.close(),!0);const fe=w.fileURLToPath(new URL(".","undefined"==typeof document?require("url").pathToFileURL(__filename).href:v&&v.src||new URL("index.cjs",document.baseURI).href)),ye=(e,t,r)=>e.evaluate(((e,t)=>window.triggerExport(e,t)),t,r);var ve=async(r,o,i)=>{const n=[],s=async e=>{for(const e of n)await e.dispose();await e.evaluate((()=>{const[,...e]=document.getElementsByTagName("script"),[,...t]=document.getElementsByTagName("style"),[...r]=document.getElementsByTagName("link");for(const o of[...e,...t,...r])o.remove()}))};try{O(4,"[export] Determining export path.");const a=i.export;await r.evaluate((()=>requestAnimationFrame((()=>{}))));const l=a?.options?.chart?.displayErrors&&Q().activeManifest.modules.debugger;let c;if(await r.evaluate((e=>window._displayErrors=e),l),o.indexOf&&(o.indexOf("<svg")>=0||o.indexOf("<?xml")>=0)){if(O(4,"[export] Treating as SVG."),"svg"===a.type)return o;c=!0,await r.setContent((e=>`\n<!DOCTYPE html>\n<html lang='en-US'>\n  <head>\n    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n    <title>Highcarts Export</title>\n  </head>\n  <style>\n    \n\nhtml, body {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n#table-div, #sliders, #datatable, #controls, .ld-row {\n  display: none;\n  height: 0;\n}\n\n#chart-container {\n  box-sizing: border-box;\n  margin: 0;\n  overflow: auto;\n  font-size: 0;\n}\n\n#chart-container > figure, div {\n  margin-top: 0 !important;\n  margin-bottom: 0 !important;\n}\n\n\n  </style>\n  <body>\n    <div id="chart-container">\n      ${e}\n    </div>\n  </body>\n</html>\n\n`)(o))}else O(4,"[export] Treating as config."),a.strInj?await ye(r,{chart:{height:a.height,width:a.width}},i):(o.chart.height=a.height,o.chart.width=a.width,await ye(r,o,i));const p=i.customCode.resources;if(p){if(p.js&&n.push(await r.addScriptTag({content:p.js})),p.files)for(const t of p.files)try{const o=!t.startsWith("http");n.push(await r.addScriptTag(o?{content:e.readFileSync(t,"utf8")}:{url:t}))}catch(e){_(2,e,`[export] JS file ${t} cannot be loaded.`)}if(p.css){let e=p.css.match(/@import\s*([^;]*);/g);if(e)for(let o of e)o&&(o=o.replace("url(","").replace("@import","").replace(/"/g,"").replace(/'/g,"").replace(/;/,"").replace(/\)/g,"").trim(),o.startsWith("http")?n.push(await r.addStyleTag({url:o})):i.customCode.allowFileResources&&n.push(await r.addStyleTag({path:t.join(fe,o)})));n.push(await r.addStyleTag({content:p.css.replace(/@import\s*([^;]*);/g,"")||" "}))}}const u=c?await r.$eval("#chart-container svg:first-of-type",((e,t)=>({chartHeight:e.height.baseVal.value*t,chartWidth:e.width.baseVal.value*t})),parseFloat(a.scale)):await r.evaluate((()=>{const{chartHeight:e,chartWidth:t}=window.Highcharts.charts[0];return{chartHeight:e,chartWidth:t}})),d=Math.ceil(u?.chartHeight||a.height),h=Math.ceil(u?.chartWidth||a.width);await r.setViewport({height:d,width:h,deviceScaleFactor:c?1:parseFloat(a.scale)});const g=c?e=>{document.body.style.zoom=e,document.body.style.margin="0px"}:()=>{document.body.style.zoom=1};await r.evaluate(g,parseFloat(a.scale));const{height:m,width:f,x:y,y:v}=await(e=>e.$eval("#chart-container",(e=>{const{x:t,y:r,width:o,height:i}=e.getBoundingClientRect();return{x:t,y:r,width:o,height:Math.trunc(i>1?i:500)}})))(r);let b;if(c||await r.setViewport({width:Math.round(f),height:Math.round(m),deviceScaleFactor:parseFloat(a.scale)}),"svg"===a.type)b=await(e=>e.$eval("#container svg:first-of-type",(e=>e.outerHTML)))(r);else if("png"===a.type||"jpeg"===a.type)b=await((e,t,r,o,i)=>Promise.race([e.screenshot({type:t,encoding:r,clip:o,omitBackground:"png"==t}),new Promise(((e,t)=>setTimeout((()=>t(new M("Rasterization timeout"))),i||1500)))]))(r,a.type,"base64",{width:h,height:d,x:y,y:v},a.rasterizationTimeout);else{if("pdf"!==a.type)throw new M(`[export] Unsupported output format ${a.type}.`);b=await((e,t,r,o)=>e.pdf({height:t+1,width:r,encoding:o}))(r,d,h,"base64")}return await r.evaluate((()=>{if("undefined"!=typeof Highcharts){const e=Highcharts.charts;if(Array.isArray(e)&&e.length)for(const t of e)t&&t.destroy(),Highcharts.charts.shift()}})),await s(r),b}catch(e){return await s(r),e}};let be,we=0,Te=0,xe=0,ke=0,Se=0,Ee={},He=!1;const Le={create:async()=>{const e=c.v4();let t=!1;const r=(new Date).getTime();try{if(t=await he(),!t||t.isClosed())throw new M("Page is invalid or closed.");O(3,`[pool] Successfully created a worker ${e} - took ${(new Date).getTime()-r} ms.`)}catch(e){throw new M("Error when creating a new page").setError(e)}return{id:e,page:t,workCount:Math.round(Math.random()*(Ee.workLimit/2))}},validate:async e=>Ee.workLimit&&++e.workCount>Ee.workLimit?(O(3,`[pool] Worker failed validation: exceeded work limit (limit is ${Ee.workLimit})`),!1):(await ge(e.page,!0),!0),destroy:e=>{O(3,`[pool] Destroying pool entry ${e.id}.`),e.page&&e.page.close()}},Re=async e=>{if(be=e.puppeteerArgs,await(async e=>{const t=[...le,...e||[]];if(!ue){let e=0;const r=async()=>{try{O(3,`[browser] Attempting to get a browser instance (try ${++e}).`),ue=await u.launch({headless:"new",args:t,userDataDir:"./tmp/"})}catch(t){if(_(1,t,"[browser] Could not launch a browser instance."),!(e<25))throw t;O(3,`[browser] Retry to open a browser (${e} out of 25).`),await new Promise((e=>setTimeout(e,4e3))),await r()}};try{await r()}catch(e){throw new M("[browser] Max retries to open a browser instance reached.").setError(e)}if(!ue)throw new M("[browser] Cannot find a browser to open.")}return ue})(be),Ee=e&&e.pool?{...e.pool}:{},O(3,`[pool] Initializing pool with workers: min ${Ee.minWorkers}, max ${Ee.maxWorkers}.`),He)return O(4,"[pool] Already initialized, please kill it before creating a new one.");Ee.listenToProcessExits&&(O(3,"[pool] Attaching exit listeners to the process."),process.on("exit",(async()=>{await Ce()})),process.on("SIGINT",((e,t)=>{O(4,`The ${e} event with code: ${t}.`),process.exit(1)})),process.on("SIGTERM",((e,t)=>{O(4,`The ${e} event with code: ${t}.`),process.exit(1)})),process.on("uncaughtException",((e,t)=>{_(1,e,`The ${t} error.`),process.exit(1)}))),parseInt(Ee.minWorkers)>parseInt(Ee.maxWorkers)&&(Ee.minWorkers=Ee.maxWorkers);try{He=new l.Pool({...Le,min:parseInt(Ee.minWorkers),max:parseInt(Ee.maxWorkers),acquireTimeoutMillis:Ee.acquireTimeout,createTimeoutMillis:Ee.createTimeout,destroyTimeoutMillis:Ee.destroyTimeout,idleTimeoutMillis:Ee.idleTimeout,createRetryIntervalMillis:Ee.createRetryInterval,reapIntervalMillis:Ee.reaperInterval,propagateCreateError:!1}),He.on("release",(async e=>{await ge(e.page,!1),O(4,`[pool] Releasing a worker of an id ${e.id}.`)})),He.on("destroySuccess",((e,t)=>{O(4,`[pool] Destroyed a worker of an id ${t.id}.`)}));const e=[];for(let t=0;t<Ee.minWorkers;t++)try{const t=await He.acquire().promise;e.push(t)}catch(e){_(2,e,"[pool] Could not create an initial resource.")}e.forEach((e=>{He.release(e)})),O(3,"[pool] The pool is ready"+(e.length?` with ${e.length} initial resources waiting.`:"."))}catch(e){throw await me(),new M("[pool] Could not create the pool of workers.").setError(e)}};async function Ce(){return O(3,"[pool] Killing all workers."),He?.destroyed||He&&await He.destroy(),me()}const Oe=async(e,t)=>{let r;try{if(O(4,"[pool] Work received, starting to process."),++Te,Ee.benchmarking&&_e(),!He)throw new M("Work received, but pool has not been started.");try{O(4,"[pool] Acquiring a worker handle."),r=await He.acquire().promise}catch(e){throw new M("Error when acquiring available entry.").setError(e)}if(O(4,"[pool] Acquired a worker handle."),!r.page)throw new M("Resolved worker page is invalid: pool setup is wonky.");let o=(new Date).getTime();O(4,`[pool] Starting work on pool entry ${r.id}.`);const i=await ve(r.page,e,t);if(i instanceof Error)throw"Rasterization timeout"===i.message&&(r.page.close(),r.page=await he()),new M("Error encountered during export.").setError(i);He.release(r);const n=(new Date).getTime()-o;return xe+=n,Se=xe/++we,O(4,`[pool] Work completed in ${n} ms.`),{result:i,options:t}}catch(e){throw++ke,r&&He.release(r),new M(`[pool] In pool.postWork: ${e.message}`).setError(e)}};function _e(){const{min:e,max:t}=He;O(4,`[pool] The minimum number of resources allowed by pool: ${e}.`),O(4,`[pool] The maximum number of resources allowed by pool: ${t}.`),O(4,`[pool] The number of resources that are currently available: ${He.numFree()}.`),O(4,`[pool] The number of resources that are currently acquired: ${He.numUsed()}.`),O(4,`[pool] The number of callers waiting to acquire a resource: ${He.numPendingAcquires()}.`)}var Ae=()=>({min:He.min,max:He.max,available:He.numFree(),inUse:He.numUsed(),pendingAcquire:He.numPendingAcquires()}),Ie=()=>Te,je=()=>ke,$e=()=>Se,Pe=()=>we;let Ne=!1;const Fe=async(t,r)=>{O(4,"[chart] Starting exporting process.");const o=((e,t={})=>{let r={};return e.svg?(r=F(t),r.export.type=e.type||e.export.type,r.export.scale=e.scale||e.export.scale,r.export.outfile=e.outfile||e.export.outfile,r.payload={svg:e.svg}):r=re(t,e,S),r.export.outfile=r.export?.outfile||`chart.${r.export?.type||"png"}`,r})(t,te()),i=o.export;if(o.payload?.svg&&""!==o.payload.svg)try{return O(4,"[chart] Attempting to export from a SVG input."),Ge(o.payload.svg.trim(),o,r)}catch(e){return r(!1,new M("[chart] Error loading SVG input.").setError(e))}if(i.infile&&i.infile.length)try{return O(4,"[chart] Attempting to export from an input file."),o.export.instr=e.readFileSync(i.infile,"utf8"),Ge(o.export.instr.trim(),o,r)}catch(e){return r(!1,new M("[chart] Error loading input file.").setError(e))}if(i.instr&&""!==i.instr||i.options&&""!==i.options)try{return O(4,"[chart] Attempting to export from a raw input."),W(o.customCode?.allowCodeExecution)?We(o,r):"string"==typeof i.instr?Ge(i.instr.trim(),o,r):qe(o,i.instr||i.options,r)}catch(e){return r(!1,new M("[chart] Error loading raw input.").setError(e))}return r(!1,new M("[chart] No valid input specified. Check if at least one of the following parameters is correctly set: 'infile', 'instr', 'options', or 'svg'."))},Ue=e=>{const{chart:t,exporting:r}=e.export?.options||N(e.export?.instr),o=N(e.export?.globalOptions);let i=e.export?.scale||r?.scale||o?.exporting?.scale||e.export?.defaultScale||1;i=Math.max(.1,Math.min(i,5)),i=((e,t=1)=>{const r=Math.pow(10,t||0);return Math.round(+e*r)/r})(i,2);const n={height:e.export?.height||r?.sourceHeight||t?.height||o?.exporting?.sourceHeight||o?.chart?.height||e.export?.defaultHeight||400,width:e.export?.width||r?.sourceWidth||t?.width||o?.exporting?.sourceWidth||o?.chart?.width||e.export?.defaultWidth||600,scale:i};for(let[e,t]of Object.entries(n))n[e]="string"==typeof t?+t.replace(/px|%/gi,""):t;return n},qe=async(t,r,o,i)=>{let{export:n,customCode:s}=t;const a="boolean"==typeof s.allowCodeExecution?s.allowCodeExecution:Ne;if(s){if(a)if("string"==typeof t.customCode.resources)t.customCode.resources=P(t.customCode.resources,W(t.customCode.allowFileResources));else if(!t.customCode.resources)try{const r=e.readFileSync("resources.json","utf8");t.customCode.resources=P(r,W(t.customCode.allowFileResources))}catch(e){_(2,e,"[chart] The default resources.json cannot be loaded.")}}else s=t.customCode={};if(!a&&s){if(s.callback||s.resources||s.customCode)return o(!1,new M("[chart] The 'callback', 'resources' and 'customCode' options have been disabled for this server."));s.callback=!1,s.resources=!1,s.customCode=!1}if(r&&(r.chart=r.chart||{},r.exporting=r.exporting||{},r.exporting.enabled=!1),n.constr=n.constr||"chart",n.type=$(n.type,n.outfile),"svg"===n.type&&(n.width=!1),["globalOptions","themeOptions"].forEach((t=>{try{n&&n[t]&&("string"==typeof n[t]&&n[t].endsWith(".json")?n[t]=N(e.readFileSync(n[t],"utf8"),!0):n[t]=N(n[t],!0))}catch(e){n[t]={},_(2,e,`[chart] The '${t}' cannot be loaded.`)}})),s.allowCodeExecution)try{s.customCode=G(s.customCode,s.allowFileResources)}catch(e){_(2,e,"[chart] The 'customCode' cannot be loaded.")}if(s&&s.callback&&s.callback?.indexOf("{")<0)if(s.allowFileResources)try{s.callback=e.readFileSync(s.callback,"utf8")}catch(e){s.callback=!1,_(2,e,"[chart] The 'callback' cannot be loaded.")}else s.callback=!1;t.export={...t.export,...Ue(t)};try{return o(await Oe(n.strInj||r||i,t))}catch(e){return o(!1,e)}},We=(e,t)=>{try{let r,o=e.export.instr||e.export.options;return"string"!=typeof o&&(r=o=U(o,e.customCode?.allowCodeExecution)),r=o.replaceAll(/\t|\n|\r/g,"").trim(),";"===r[r.length-1]&&(r=r.substring(0,r.length-1)),e.export.strInj=r,qe(e,!1,t)}catch(r){return t(!1,new M(`[chart] Malformed input detected for ${e.export?.requestId||"?"}. Please make sure that your JSON/JavaScript options are sent using the "options" attribute, and that if you're using SVG, it is unescaped.`).setError(r))}},Ge=(e,t,r)=>{const{allowCodeExecution:o}=t.customCode;if(e.indexOf("<svg")>=0||e.indexOf("<?xml")>=0)return O(4,"[chart] Parsing input as SVG."),qe(t,!1,r,e);try{const o=JSON.parse(e.replaceAll(/\t|\n|\r/g," "));return qe(t,o,r)}catch(e){return W(o)?We(t,r):r(!1,new M("[chart] Only JSON configurations and SVG are allowed for this server. If this is your server, JavaScript custom code can be enabled by starting the server with the --allowCodeExecution flag.").setError(e))}},Me=(e,t,r,o)=>{_(1,e),"development"!==process.env.NODE_ENV&&delete e.stack,o(e)},De=(e,t,r,o)=>{const{statusCode:i,status:n,message:s,stack:a}=e,l=i||n||500;r.status(l).json({statusCode:l,message:s,stack:a})};var Ve=(e,t)=>{const r="Too many requests, you have been rate limited. Please try again later.",o={max:t.maxRequests||30,window:t.window||1,delay:t.delay||0,trustProxy:t.trustProxy||!1,skipKey:t.skipKey||!1,skipToken:t.skipToken||!1};o.trustProxy&&e.enable("trust proxy");const i=y({windowMs:60*o.window*1e3,max:o.max,delayMs:o.delay,handler:(e,t)=>{t.format({json:()=>{t.status(429).send({message:r})},default:()=>{t.status(429).send(r)}})},skip:e=>!1!==o.skipKey&&!1!==o.skipToken&&e.query.key===o.skipKey&&e.query.access_token===o.skipToken&&(O(4,"[rate limiting] Skipping rate limiter."),!0)});e.use(i),O(3,`[rate limiting] Enabled rate limiting: ${o.max} requests per ${o.window} minute per IP, trusting proxy: ${o.trustProxy}.`)};class Je extends M{constructor(e,t){super(e),this.status=this.statusCode=t}setStatus(e){return this.status=e,this}}class Ke extends Je{constructor(e,t){super(e||"Bad request",400),t&&(this.stack=t.stack)}}const ze={png:"image/png",jpeg:"image/jpeg",gif:"image/gif",pdf:"application/pdf",svg:"image/svg+xml"};let Xe=0;const Be=!1,Ye=[],Qe=[],Ze=(e,t,r,o)=>{let i=!0;const{id:n,uniqueId:s,type:a,body:l}=o;return e.some((e=>{if(e){let o=e(t,r,n,s,a,l);return void 0!==o&&!0!==o&&(i=o),!0}})),i},et=async(e,t,r)=>{try{(()=>{const e=process.hrtime.bigint()})();const r=te();Be;const i=e.body,n=++Xe,s=c.v4().replace(/-/g,"");let a=$(i.type);if(!i||"object"==typeof(o=i)&&null!==o&&0===Object.keys(o).length)throw new Ke("The request body is required. Make sure your Content-Type header is correct (accepted are application/json and multipart/form-data).");let l=N(i.infile||i.options||i.data);if(!l&&!i.svg)throw O(2,`Request ${s} from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Payload received: ${JSON.stringify(i)}.`),new Ke("No correct chart data found. Please make sure you are using application/json or multipart/form-data headers, and that the chart data is in the 'infile', 'options' or 'data' attribute if sending JSON or in the 'svg' if sending SVG.");let p=!1;if(p=Ze(Ye,e,t,{id:n,uniqueId:s,type:a,body:i}),!0!==p)return t.send(p);let u=!1;e.socket.on("close",(()=>{u=!0})),O(4,`[export] Got an incoming HTTP request ${s}.`),i.constr="string"==typeof i.constr&&i.constr||"chart";const d={export:{instr:l,type:a,constr:i.constr[0].toLowerCase()+i.constr.substr(1),height:i.height,width:i.width,scale:i.scale||r.export.scale,globalOptions:N(i.globalOptions,!0),themeOptions:N(i.themeOptions,!0)},customCode:{allowCodeExecution:Ne,allowFileResources:!1,resources:N(i.resources,!0),callback:i.callback,customCode:i.customCode}};Be,l&&(d.export.instr=U(l,d.customCode.allowCodeExecution));const h=re(r,d);if(h.export.options=l,h.payload={svg:i.svg||!1,b64:i.b64||!1,dataOptions:N(i.dataOptions,!0),noDownload:i.noDownload||!1,requestId:s},i.svg&&(e=>["localhost","(10).(.*).(.*).(.*)","(127).(.*).(.*).(.*)","(172).(1[6-9]|2[0-9]|3[0-1]).(.*).(.*)","(192).(168).(.*).(.*)"].some((t=>e.match(`xlink:href="(?:(http://|https://))?${t}`))))(h.payload.svg))throw new Ke("SVG potentially contain at least one forbidden URL in xlink:href element.");Be,await Fe(h,((r,o)=>{if(e.socket.removeAllListeners("close"),u)return O(3,"[export] The client closed the connection before the chart was done processing.");if(o)throw o;if(!r||!r.result)throw new Ke(`[export] Unexpected return from chart generation, please check your request data: ${s} is ${r.result}.`);return a=r.options.export.type,Ze(Qe,e,t,{id:n,body:r.result}),r.result?i.b64?"pdf"===a||"svg"==a?t.send(Buffer.from(r.result,"utf8").toString("base64")):t.send(r.result):(t.header("Content-Type",ze[a]||"image/png"),i.noDownload||t.attachment(`${e.params.filename||e.body.filename||"chart"}.${a||"png"}`),"svg"===a?t.send(r.result):t.send(Buffer.from(r.result,"base64"))):void 0}))}catch(e){r(e)}var o};const tt=JSON.parse(e.readFileSync(t.join(j,"package.json"))),rt=new Date;const ot=m();ot.disable("x-powered-by"),ot.use(g());const it=f.memoryStorage(),nt=f({storage:it,limits:{fieldsSize:"50MB"}});ot.use(nt.any()),ot.use(h.json({limit:"50mb"})),ot.use(h.urlencoded({extended:!0,limit:"50mb"})),ot.use(h.urlencoded({extended:!1,limit:"50mb"}));const st=e=>{e.on("clientError",(e=>{_(1,e,`[server] Client error: ${e.message}`)})),e.on("error",(e=>{_(1,e,`[server] Server error: ${e.message}`)})),e.on("connection",(e=>{e.on("error",(e=>{_(1,e,`[server] Socket error: ${e.message}`)}))}))},at=async r=>{try{if(!r.enable)return!1;if(!r.ssl.enable&&!r.ssl.force){const e=i.createServer(ot);st(e),e.listen(r.port,r.host),O(3,`[server] Started HTTP server on ${r.host}:${r.port}.`)}if(r.ssl.enable){let o,i;try{o=await e.promises.readFile(t.posix.join(r.ssl.certPath,"server.key"),"utf8"),i=await e.promises.readFile(t.posix.join(r.ssl.certPath,"server.crt"),"utf8")}catch(e){throw O(2,`[server] Unable to load key/certificate from the '${r.ssl.certPath}' path. Could not run secured layer server.`),e}if(o&&i){const e=n.createServer(ot);st(e),e.listen(r.ssl.port,r.host),O(3,`[server] Started HTTPS server on ${r.host}:${r.ssl.port}.`)}}r.rateLimiting&&r.rateLimiting.enable&&![0,NaN].includes(r.rateLimiting.maxRequests)&&Ve(ot,r.rateLimiting),ot.use(m.static(t.posix.join(j,"public"))),(e=>{!!e&&e.get("/health",((e,t)=>{t.send({status:"OK",bootTime:rt,uptime:Math.floor(((new Date).getTime()-rt.getTime())/1e3/60)+" minutes",version:tt.version,highchartsVersion:Z(),averageProcessingTime:$e(),performedExports:Pe(),failedExports:je(),exportAttempts:Ie(),sucessRatio:Pe()/Ie()*100,pool:Ae()})}))})(ot),(e=>{e.post("/",et),e.post("/:filename",et)})(ot),(e=>{!!e&&e.get("/",((e,r)=>{r.sendFile(t.join(j,"public","index.html"))}))})(ot),(e=>{!!e&&e.post("/change_hc_version/:newVersion",(async(e,t)=>{const r=process.env.HIGHCHARTS_ADMIN_TOKEN;if(!r||!r.length)return t.send({error:!0,message:"Server not configured to do run-time version changes: HIGHCHARTS_ADMIN_TOKEN not set."});const o=e.get("hc-auth");if(!o||o!==r)return t.send({error:!0,message:"Invalid or missing token: set token in the hc-auth header."});const i=e.params.newVersion;if(i){try{await Y(i)}catch(e){t.send({error:!0,message:e})}t.send({version:Z()})}else t.send({error:!0,message:"No new version supplied."})}))})(ot),(e=>{e.use(Me),e.use(De)})(ot)}catch(e){throw new M("[server] Could not configure and start the server.").setError(e)}};var lt={startServer:at,getExpress:()=>m,getApp:()=>ot,use:(e,...t)=>{ot.use(e,...t)},get:(e,...t)=>{ot.get(e,...t)},post:(e,...t)=>{ot.post(e,...t)},enableRateLimiting:e=>Ve(ot,e)},ct={batchExport:async t=>{const r=[];for(let o of t.export.batch.split(";"))o=o.split("="),2===o.length&&r.push(Fe({...t,export:{...t.export,infile:o[0],outfile:o[1]}},((t,r)=>{if(r)throw r;e.writeFileSync(t.options.export.outfile,Buffer.from(t.result,"base64"))})));await Promise.all(r).then((async()=>{await Ce()})).catch((e=>{throw new M("[chart] Error encountered during batch export.").setError(e)}))},singleExport:async t=>{t.export.instr=t.export.instr||t.export.options,await Fe(t,(async(t,r)=>{if(r)throw r;const{outfile:o,type:i}=t.options.export;e.writeFileSync(o||`chart.${i}`,"svg"!==i?Buffer.from(t.result,"base64"):t.result),await Ce()}))},startExport:Fe,mapToNewConfig:e=>{const t={};for(const[r,o]of Object.entries(e)){const e=E[r]?E[r].split("."):[];e.reduce(((t,r,i)=>t[r]=e.length-1===i?o:t[r]||{}),t)}return t},manualConfig:async t=>{let r={};e.existsSync(t)&&(r=JSON.parse(e.readFileSync(t,"utf8")));const o=Object.keys(k).map((e=>({title:`${e} options`,value:e})));return a({type:"multiselect",name:"category",message:"Which category do you want to configure?",hint:"Space: Select specific, A: Select all, Enter: Confirm.",instructions:"",choices:o},{onSubmit:async(o,i)=>{let n=0,s=[];for(const e of i)k[e]=k[e].map((t=>({...t,section:e}))),s=[...s,...k[e]];return await a(s,{onSubmit:async(o,i)=>{if("modules"===o.name?(i=i.length?i.map((e=>o.choices[e])):o.choices,r[o.section][o.name]=i):r[o.section]=ne(Object.assign({},r[o.section]||{}),o.name.split("."),o.choices?o.choices[i]:i),++n===s.length){try{await e.promises.writeFile(t,JSON.stringify(r,null,2),"utf8")}catch(e){_(1,e,"[config] Error while creating config.json.")}return!0}}}),!0}})},setOptions:(t,r)=>(r?.length&&(ee=function(t){const r=t.findIndex((e=>"loadConfig"===e.replace(/-/g,"")));if(r>-1&&t[r+1]){const o=t[r+1];try{if(o&&o.endsWith(".json"))return JSON.parse(e.readFileSync(o))}catch(e){_(2,e,`[config] Unable to load config from the ${o}.`)}}return{}}(r)),oe(x,ee),ee=ie(x),t&&(ee=re(ee,t,S)),r?.length&&(ee=function(e,t,r){for(let r=0;r<t.length;r++){let o=t[r].replace(/-/g,"");const i=E[o]?E[o].split("."):[];i.reduce(((n,s,a)=>(i.length-1===a&&void 0!==n[s]&&(t[++r]?n[s]=t[r]||n[s]:(console.log(`Missing argument value for ${o}!`.red,"\n"),e=q())),n[s])),e)}return e}(ee,r)),ee),log:O,logWithStack:_,killPool:Ce,server:lt,startServer:at,printLogo:r=>{const o=JSON.parse(e.readFileSync(t.join(j,"package.json"))).version;r?console.log(`Starting highcharts export server v${o}...`):console.log(e.readFileSync(j+"/msg/startup.msg").toString().bold.yellow,`v${o}`)},printUsage:q,initExport:async e=>{var t;return t=e.customCode&&e.customCode.allowCodeExecution,Ne=W(t),(e=>{A(e&&parseInt(e.level)),e&&e.dest&&I(e.dest,e.file||"highcharts-export-server.log")})(e.logging),await B(e.highcharts||{version:"latest"}),await Re({pool:e.pool||{minWorkers:1,maxWorkers:1},puppeteerArgs:e.puppeteer?.args||[]}),e}};module.exports=ct;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
