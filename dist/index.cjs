"use strict";require("colors");var e=require("fs"),t=require("path"),o=require("body-parser"),r=require("cors"),i=require("express"),n=require("multer"),s=require("http"),a=require("https"),l=require("dotenv"),c=require("express-rate-limit"),p=require("url"),u=require("https-proxy-agent"),d=require("uuid"),h=require("tarn"),g=require("puppeteer"),f=require("node:path"),m=require("node:crypto");require("prompts");var v="undefined"!=typeof document?document.currentScript:null;function y(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(o){if("default"!==o){var r=Object.getOwnPropertyDescriptor(e,o);Object.defineProperty(t,o,r.get?r:{enumerable:!0,get:function(){return e[o]}})}})),t.default=e,Object.freeze(t)}var b=y(p);l.config();const w={puppeteer:{args:{value:[],type:"string[]",description:"Array of arguments to send to puppeteer."}},highcharts:{version:{value:"latest",envLink:"HIGHCHARTS_VERSION",type:"string",description:"Highcharts version to use."},cdnURL:{value:"https://code.highcharts.com/",envLink:"HIGHCHARTS_CDN",type:"string",description:"The CDN URL of Highcharts scripts to use."},coreScripts:{envLink:"HIGHCHARTS_CORE_SCRIPTS",value:["highcharts","highcharts-more","highcharts-3d"],type:"string[]",description:"Highcharts core scripts to fetch."},modules:{envLink:"HIGHCHARTS_MODULES",value:["stock","map","gantt","exporting","export-data","parallel-coordinates","accessibility","annotations-advanced","boost-canvas","boost","data","draggable-points","static-scale","broken-axis","heatmap","tilemap","timeline","treemap","item-series","drilldown","histogram-bellcurve","bullet","funnel","funnel3d","pyramid3d","networkgraph","pareto","pattern-fill","pictorial","price-indicator","sankey","arc-diagram","dependency-wheel","series-label","solid-gauge","sonification","stock-tools","streamgraph","sunburst","variable-pie","variwide","vector","venn","windbarb","wordcloud","xrange","no-data-to-display","drag-panes","debugger","dumbbell","lollipop","cylinder","organization","dotplot","marker-clusters","hollowcandlestick","heikinashi"],type:"string[]",description:"Highcharts modules to fetch."},indicators:{envLink:"HIGHCHARTS_INDICATORS",value:["indicators-all"],type:"string[]",description:"Highcharts indicators to fetch."},scripts:{value:["https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js","https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js"],type:"string[]",description:"Additional direct scripts/optional dependencies (e.g. moment.js)."},forceFetch:{envLink:"HIGHCHARTS_FORCE_FETCH",value:!1,type:"boolean",description:"Should all the scripts be refetched after rerunning the server."}},export:{infile:{value:!1,type:"string",description:"The input file name along with a type (json or svg). It can be a correct JSON or SVG file."},instr:{value:!1,type:"string",description:"An input in a form of a stringified JSON or SVG file. Overrides the --infile."},options:{value:!1,type:"string",description:"An alias for the --instr option."},outfile:{value:!1,type:"string",description:"The output filename along with a type (jpeg, png, pdf or svg). Ignores the --type flag."},type:{envLink:"EXPORT_DEFAULT_TYPE",value:"png",type:"string",description:"The format of the file to export to. Can be jpeg, png, pdf or svg."},constr:{envLink:"EXPORT_DEFAULT_CONSTR",value:"chart",type:"string",description:"The constructor to use. Can be chart, stockChart, mapChart or ganttChart."},defaultHeight:{envLink:"EXPORT_DEFAULT_HEIGHT",value:400,type:"number",description:"The default height of the exported chart. Used when not found any value set."},defaultWidth:{envLink:"EXPORT_DEFAULT_WIDTH",value:600,type:"number",description:"The default width of the exported chart. Used when not found any value set."},defaultScale:{envLink:"EXPORT_DEFAULT_SCALE",value:1,type:"number",description:"The default scale of the exported chart. Ranges between 1 and 5."},height:{type:"number",value:!1,description:"The default height of the exported chart. Overrides the option in the chart settings."},width:{type:"number",value:!1,description:"The width of the exported chart. Overrides the option in the chart settings."},scale:{value:!1,type:"number",description:"The scale of the exported chart. Ranges between 1 and 5."},globalOptions:{value:!1,type:"string",description:"A stringified JSON or a filename with options to be passed into the Highcharts.setOptions."},themeOptions:{value:!1,type:"string",description:"A stringified JSON or a filename with theme options to be passed into the Highcharts.setOptions."},batch:{value:!1,type:"string",description:'Starts a batch job. A string that contains input/output pairs: "in=out;in=out;..".'}},customCode:{allowCodeExecution:{envLink:"HIGHCHARTS_ALLOW_CODE_EXECUTION",value:!1,type:"boolean",description:"If set to true, allow for the execution of arbitrary code when exporting."},allowFileResources:{envLink:"HIGHCHARTS_ALLOW_FILE_RESOURCES",value:!0,type:"boolean",description:"Allow injecting resources from the filesystem. Has no effect when running as a server."},customCode:{value:!1,type:"string",description:"A function to be called before chart initialization. Can be a filename with the js extension."},callback:{value:!1,type:"string",description:"A JavaScript file with a function to run on construction."},resources:{value:!1,type:"string",description:"An additional resource in a form of stringified JSON. It can contain files, js and css sections."},loadConfig:{value:!1,type:"string",description:"A file that contains a pre-defined config to use."},createConfig:{value:!1,type:"string",description:"Allows to set options through a prompt and save in a provided config file."}},server:{enable:{envLink:"HIGHCHARTS_SERVER_ENABLE",value:!1,type:"boolean",cliName:"enableServer",description:"If set to true, starts a server on 0.0.0.0."},host:{envLink:"HIGHCHARTS_SERVER_HOST",value:"0.0.0.0",type:"string",description:"The hostname of the server. Also starts a server listening on the supplied hostname."},port:{envLink:"HIGHCHARTS_SERVER_PORT",value:7801,type:"number",description:"The port to use for the server. Defaults to 7801."},ssl:{enable:{envLink:"HIGHCHARTS_SERVER_SSL_ENABLE",value:!1,type:"boolean",cliName:"enableSsl",description:"Enables the SSL protocol."},force:{envLink:"HIGHCHARTS_SERVER_SSL_FORCE",value:!1,type:"boolean",cliName:"sslForced",description:"If set to true, forces the server to only serve over HTTPS."},port:{envLink:"HIGHCHARTS_SERVER_SSL_PORT",value:443,type:"number",cliName:"sslPort",description:"The port on which to run the SSL server."},certPath:{envLink:"HIGHCHARTS_SSL_CERT_PATH",value:"",type:"string",description:"The path to the SSL certificate/key."}},rateLimiting:{enable:{envLink:"HIGHCHARTS_RATE_LIMIT_ENABLE",value:!1,type:"boolean",cliName:"enableRateLimiting",description:"Enables rate limiting."},maxRequests:{envLink:"HIGHCHARTS_RATE_LIMIT_MAX",value:10,type:"number",description:"Max requests allowed in a one minute."},window:{envLink:"HIGHCHARTS_RATE_LIMIT_WINDOW",value:1,type:"number",description:"The time window in minutes for rate limiting."},delay:{envLink:"HIGHCHARTS_RATE_LIMIT_DELAY",value:0,type:"number",description:"The amount to delay each successive request before hitting the max."},trustProxy:{envLink:"HIGHCHARTS_RATE_LIMIT_TRUST_PROXY",value:!1,type:"boolean",description:"Set this to true if behind a load balancer."},skipKey:{envLink:"HIGHCHARTS_RATE_LIMIT_SKIP_KEY",value:"",type:"number|string",description:"Allows bypassing the rate limiter and should be provided with skipToken argument."},skipToken:{envLink:"HIGHCHARTS_RATE_LIMIT_SKIP_TOKEN",value:"",type:"number|string",description:"Allows bypassing the rate limiter and should be provided with skipKey argument."}}},pool:{initialWorkers:{envLink:"HIGHCHARTS_POOL_MIN_WORKERS",value:4,type:"number",description:"The number of initial workers to spawn."},maxWorkers:{envLink:"HIGHCHARTS_POOL_MAX_WORKERS",value:8,type:"number",description:"The number of max workers to spawn."},workLimit:{envLink:"HIGHCHARTS_POOL_WORK_LIMIT",value:40,type:"number",description:"The pieces of work that can be performed before restarting process."},queueSize:{envLink:"HIGHCHARTS_POOL_QUEUE_SIZE",value:5,type:"number",description:"The size of the request overflow queue."},timeoutThreshold:{envLink:"HIGHCHARTS_POOL_TIMEOUT",value:5e3,type:"number",description:"The number of milliseconds before timing out."},acquireTimeout:{envLink:"HIGHCHARTS_POOL_ACQUIRE_TIMEOUT",value:5e3,type:"number",description:"The number of milliseconds to wait for acquiring a resource."},reaper:{envLink:"HIGHCHARTS_POOL_ENABLE_REAPER",value:!0,type:"boolean",description:"Whether or not to evict workers after a certain time period."},benchmarking:{envLink:"HIGHCHARTS_POOL_BENCHMARKING",value:!1,type:"boolean",description:"Enable benchmarking."},listenToProcessExits:{envLink:"HIGHCHARTS_POOL_LISTEN_TO_PROCESS_EXITS",value:!0,type:"boolean",description:"Set to false in order to skip attaching process.exit handlers."}},logging:{level:{envLink:"HIGHCHARTS_LOG_LEVEL",value:4,type:"number",cliName:"logLevel",description:"The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose)."},file:{envLink:"HIGHCHARTS_LOG_FILE",value:"highcharts-export-server.log",type:"string",cliName:"logFile",description:"A name of a log file. The --logDest also needs to be set to enable file logging."},dest:{envLink:"HIGHCHARTS_LOG_DEST",value:"log/",type:"string",cliName:"logDest",description:"The path to store log files. Also enables file logging."}},ui:{enable:{envLink:"HIGHCHARTS_UI_ENABLE",value:!1,type:"boolean",cliName:"enableUi",description:"Enables the UI for the export server."},route:{envLink:"HIGHCHARTS_UI_ROUTE",value:"/",type:"string",cliName:"uiRoute",description:"The route to attach the UI to."}},other:{noLogo:{envLink:"HIGHCHARTS_NO_LOGO",value:!1,type:"boolean",description:"Skip printing the logo on a startup. Will be replaced by a simple text."}},payload:{}};w.puppeteer.args.value.join(","),w.highcharts.version.value,w.highcharts.cdnURL.value,w.highcharts.modules.value,w.highcharts.scripts.value.join(","),w.highcharts.forceFetch.value,w.export.type.value,w.export.constr.value,w.export.defaultHeight.value,w.export.defaultWidth.value,w.export.defaultScale.value,w.customCode.allowCodeExecution.value,w.customCode.allowFileResources.value,w.server.enable.value,w.server.host.value,w.server.port.value,w.server.ssl.enable.value,w.server.ssl.force.value,w.server.ssl.port.value,w.server.ssl.certPath.value,w.server.rateLimiting.enable.value,w.server.rateLimiting.maxRequests.value,w.server.rateLimiting.window.value,w.server.rateLimiting.delay.value,w.server.rateLimiting.trustProxy.value,w.server.rateLimiting.skipKey.value,w.server.rateLimiting.skipToken.value,w.pool.initialWorkers.value,w.pool.maxWorkers.value,w.pool.workLimit.value,w.pool.queueSize.value,w.pool.timeoutThreshold.value,w.pool.acquireTimeout.value,w.pool.reaper.value,w.pool.benchmarking.value,w.pool.listenToProcessExits.value,w.logging.level.value,w.logging.file.value,w.logging.dest.value,w.ui.enable.value,w.ui.route.value,w.other.noLogo.value;const x=["options","globalOptions","themeOptions","resources","payload"],T={},k=(e,t="")=>{Object.keys(e).forEach((o=>{if(!["puppeteer","highcharts"].includes(o)){const r=e[o];void 0===r.value?k(r,`${t}.${o}`):T[r.cliName||o]=`${t}.${o}`.substring(1)}}))};k(w);let S={toConsole:!0,toFile:!1,pathCreated:!1,levelsDesc:[{title:"error",color:"red"},{title:"warning",color:"yellow"},{title:"notice",color:"blue"},{title:"verbose",color:"gray"}],listeners:[]};for(const[e,t]of Object.entries(w.logging))S[e]=t.value;const H=(...t)=>{const[o,...r]=t,{level:i,levelsDesc:n}=S;if(0===o||o>i||i>n.length)return;const s=`${(new Date).toString().split("(")[0].trim()} [${n[o-1].title}] -`;S.listeners.forEach((e=>{e(s,r.join(" "))})),S.toFile&&(S.pathCreated||(!e.existsSync(S.dest)&&e.mkdirSync(S.dest),S.pathCreated=!0),e.appendFile(`${S.dest}${S.file}`,[s].concat(r).join(" ")+"\n",(e=>{e&&(console.log(`[logger] Unable to write to log file: ${e}`),S.toFile=!1)}))),S.toConsole&&console.log.apply(void 0,[s.toString()[S.levelsDesc[o-1].color]].concat(r))},E=p.fileURLToPath(new URL("../.","undefined"==typeof document?require("url").pathToFileURL(__filename).href:v&&v.src||new URL("index.cjs",document.baseURI).href)),R=(e,t=/\s\s+/g,o=" ")=>e.replaceAll(t,o).trim(),L=(e,t)=>{const o=["png","jpeg","pdf","svg"];if(t){const r=t.split(".").pop();o.includes(r)&&e!==r&&(e=r)}return{"image/png":"png","image/jpeg":"jpeg","application/pdf":"pdf","image/svg+xml":"svg"}[e]||o.find((t=>t===e))||"png"},C=(t=!1,o)=>{const r=["js","css","files"];let i=t,n=!1;if(o&&t.endsWith(".json"))try{t?t&&t.endsWith(".json")?i=O(e.readFileSync(t,"utf8")):(i=O(t),!0===i&&(i=O(e.readFileSync("resources.json","utf8")))):i=O(e.readFileSync("resources.json","utf8"))}catch(e){return H(3,"[cli] No resources found.")}else i=O(t),o||delete i.files;for(const e in i)r.includes(e)?n||(n=!0):delete i[e];return n?(i.files&&(i.files=i.files.map((e=>e.trim())),(!i.files||i.files.length<=0)&&delete i.files),i):H(3,"[cli] No resources found.")};function O(e,t){try{const o=JSON.parse("string"!=typeof e?JSON.stringify(e):e);return"string"!=typeof o&&t?JSON.stringify(o):o}catch(e){return!1}}const _=e=>{if(null===e||"object"!=typeof e)return e;const t=Array.isArray(e)?[]:{};for(const o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=_(e[o]));return t},A=(e,t)=>JSON.stringify(e,((e,o)=>("string"==typeof o&&((o=o.trim()).startsWith("function(")||o.startsWith("function ("))&&o.endsWith("}")&&(o=t?`EXP_FUN${(o+"").replaceAll(/\n|\t|\r/g," ")}EXP_FUN`:void 0),"function"==typeof o?`EXP_FUN${(o+"").replaceAll(/\n|\t|\r/g," ")}EXP_FUN`:o))).replaceAll(/"EXP_FUN|EXP_FUN"/g,"");function $(){console.log("Usage of CLI arguments:".bold,"\n------",`\nFor more detailed information visit readme at: ${"https://github.com/highcharts/node-export-server#readme".bold.yellow}.`);const e=t=>{for(const[o,r]of Object.entries(t))if(Object.prototype.hasOwnProperty.call(r,"value")){let e=`  --${r.cliName||o} ${("<"+r.type+">").green} `;if(e.length<48)for(let t=e.length;t<48;t++)e+=".";console.log(e,r.description,`[Default: ${r.value.toString().bold}]`.blue)}else e(r)};Object.keys(w).forEach((t=>{["puppeteer","highcharts"].includes(t)||(console.log(`\n${t.toUpperCase()}`.red),e(w[t]))})),console.log("\n")}const I=e=>!["false","undefined","null","NaN","0",""].includes(e)&&!!e,j=(t,o)=>{if(t&&"string"==typeof t)return(t=t.trim()).endsWith(".js")?!!o&&j(e.readFileSync(t,"utf8")):t.startsWith("function()")||t.startsWith("function ()")||t.startsWith("()=>")||t.startsWith("() =>")?`(${t})()`:t.replace(/;$/,"")};var P=(e,t)=>{const o="Too many requests, you have been rate limited. Please try again later.",r={max:t.maxRequests||30,window:t.window||1,delay:t.delay||0,trustProxy:t.trustProxy||!1,skipKey:t.skipKey||!1,skipToken:t.skipToken||!1};r.trustProxy&&e.enable("trust proxy");const i=c({windowMs:60*r.window*1e3,max:r.max,delayMs:r.delay,handler:(e,t)=>{t.format({json:()=>{t.status(429).send({message:o})},default:()=>{t.status(429).send(o)}})},skip:e=>!1!==r.skipKey&&!1!==r.skipToken&&e.query.key===r.skipKey&&e.query.access_token===r.skipToken&&(H(4,"[rate-limiting] Skipping rate limiter."),!0)});e.use(i),H(3,R(`[rate-limiting] Enabled rate limiting: ${r.max} requests\n      per ${r.window} minute per IP, trusting proxy:\n      ${r.trustProxy}.`))};async function N(e,t={}){return new Promise(((o,r)=>{const i=(e=>e.startsWith("https")?a:s)(e);i.get(e,t,(e=>{let t="";e.on("data",(e=>{t+=e})),e.on("end",(()=>{t||r("Nothing was fetched from the URL."),e.text=t,o(e)}))})).on("error",(e=>{r(e)}))}))}l.config();const F=t.join(E,".cache"),U={cdnURL:"https://code.highcharts.com/",activeManifest:{},sources:"",hcVersion:""};let q=!1;const G=()=>U.hcVersion=U.sources.substr(0,U.sources.indexOf("*/")).replace("/*","").replace("*/","").replace(/\n/g,"").trim(),W=async(e,t)=>{try{e.endsWith(".js")&&(e=e.substring(0,e.length-3)),H(4,`[cache] Fetching script - ${e}.js`);const o=t?{agent:t,timeout:+process.env.PROXY_SERVER_TIMEOUT||5e3}:{},r=await N(`${e}.js`,o);if(200===r.statusCode)return r.text;throw`${r.statusCode}`}catch(t){throw H(1,`[cache] Error fetching script ${e}.js: ${t}.`),t}},M=async(t,o)=>{const{coreScripts:r,modules:i,indicators:n,scripts:s}=t,a="latest"!==t.version&&t.version?`${t.version}/`:"";H(3,"[cache] Updating cache to Highcharts ",a);const l=[...r.map((e=>`${a}${e}`)),...i.map((e=>"map"===e?`maps/${a}modules/${e}`:`${a}modules/${e}`)),...n.map((e=>`stock/${a}indicators/${e}`))];let c;const p=process.env.PROXY_SERVER_HOST,d=process.env.PROXY_SERVER_PORT;p&&d&&(c=new u({host:p,port:+d}));const h={};try{return U.sources=(await Promise.all([...l.map((async e=>{const o=await W(`${t.cdnURL||U.cdnURL}${e}`,c);return"string"==typeof o&&(h[e.replace(/(.*)\/|(.*)modules\/|stock\/(.*)indicators\/|maps\/(.*)modules\//gi,"")]=1),o})),...s.map((e=>W(e,c)))])).join(";\n"),G(),e.writeFileSync(o,U.sources),h}catch(e){H(1,"[cache] Unable to update local Highcharts cache.")}},D=async o=>{let r;const i=t.join(F,"manifest.json"),n=t.join(F,"sources.js");if(q=o,!e.existsSync(F)&&e.mkdirSync(F),!e.existsSync(i)||o.forceFetch)H(3,"[cache] Fetching and caching Highcharts dependencies."),r=await M(o,n);else{let t=!1;const s=JSON.parse(e.readFileSync(i));if(s.modules&&Array.isArray(s.modules)){const e={};s.modules.forEach((t=>e[t]=1)),s.modules=e}const{modules:a,coreScripts:l,indicators:c}=o,p=a.length+l.length+c.length;s.version!==o.version?(H(3,"[cache] Highcharts version mismatch in cache, need to re-fetch."),t=!0):Object.keys(s.modules||{}).length!==p?(H(3,"[cache] Cache and requested modules does not match, need to re-fetch."),t=!0):t=(o.modules||[]).some((e=>{if(!s.modules[e])return H(3,`[cache] The ${e} missing in cache, need to re-fetch.`),!0})),t?r=await M(o,n):(H(3,"[cache] Dependency cache is up to date, proceeding."),U.sources=e.readFileSync(n,"utf8"),r=s.modules,G())}await(async(o,r)=>{const i={version:o.version,modules:r||{}};U.activeManifest=i,H(4,"[cache] writing new manifest");try{e.writeFileSync(t.join(F,"manifest.json"),JSON.stringify(i),"utf8")}catch(e){H(1,`[cache] Error writing cache manifest: ${e}.`)}})(o,r)};var V=async e=>!!q&&await D(Object.assign(q,{version:e})),z=()=>U,J=()=>U.hcVersion;const K=m.randomBytes(64).toString("base64url"),X=f.join("tmp",`puppeteer-${K}`),B=[`--user-data-dir=${f.join(X,"profile")}`,"--autoplay-policy=user-gesture-required","--disable-background-networking","--disable-background-timer-throttling","--disable-backgrounding-occluded-windows","--disable-breakpad","--disable-client-side-phishing-detection","--disable-component-update","--disable-default-apps","--disable-dev-shm-usage","--disable-domain-reliability","--disable-extensions","--disable-features=AudioServiceOutOfProcess","--disable-hang-monitor","--disable-ipc-flooding-protection","--disable-notifications","--disable-offer-store-unmasked-wallet-cards","--disable-popup-blocking","--disable-print-preview","--disable-prompt-on-repost","--disable-renderer-backgrounding","--disable-session-crashed-bubble","--disable-setuid-sandbox","--disable-speech-api","--disable-sync","--hide-crash-restore-bubble","--hide-scrollbars","--ignore-gpu-blacklist","--metrics-recording-only","--mute-audio","--no-default-browser-check","--no-first-run","--no-pings","--no-sandbox","--no-zygote","--password-store=basic","--use-mock-keychain"],Y=b.fileURLToPath(new URL(".","undefined"==typeof document?require("url").pathToFileURL(__filename).href:v&&v.src||new URL("index.cjs",document.baseURI).href)),Q=e.readFileSync(Y+"/../templates/template.html","utf8");let Z;const ee=async()=>{if(!Z)return!1;const e=await Z.newPage();return await e.setContent(Q),await e.addScriptTag({path:Y+"/../.cache/sources.js"}),await e.evaluate((()=>window.setupHighcharts())),e.on("pageerror",(async t=>{H(1,"[page error]",t),await e.$eval("#container",((e,t)=>{window._displayErrors&&(e.innerHTML=t)}),`<h1>Chart input data error</h1>${t.toString()}`)})),e},te=async()=>{Z.connected&&await Z.close()};const oe=b.fileURLToPath(new URL(".","undefined"==typeof document?require("url").pathToFileURL(__filename).href:v&&v.src||new URL("index.cjs",document.baseURI).href)),re=async(e,t,o)=>await e.evaluate(((e,t)=>window.triggerExport(e,t)),t,o);var ie=async(o,r,i)=>{const n=[],s=async e=>{for(const e of n)await e.dispose();await e.evaluate((()=>{const[,...e]=document.getElementsByTagName("script"),[,...t]=document.getElementsByTagName("style"),[...o]=document.getElementsByTagName("link");for(const r of[...e,...t,...o])r.remove()}))};try{const a=()=>{};H(4,"[export] Determining export path.");const l=i.export;await o.evaluate((()=>requestAnimationFrame((()=>{}))));const c=l?.options?.chart?.displayErrors&&z().activeManifest.modules.debugger;await o.evaluate((e=>window._displayErrors=e),c);const p=()=>{};let u;if(r.indexOf&&(r.indexOf("<svg")>=0||r.indexOf("<?xml")>=0)){if(H(4,"[export] Treating as SVG."),"svg"===l.type)return r;u=!0;const e=()=>{};await o.setContent((e=>`\n<!DOCTYPE html>\n<html lang='en-US'>\n  <head>\n    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n    <title>Highcarts Export</title>\n  </head>\n  <style>\n    \n\nhtml, body {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n#table-div, #sliders, #datatable, #controls, .ld-row {\n  display: none;\n  height: 0;\n}\n\n#chart-container {\n  box-sizing: border-box;\n  margin: 0;\n  overflow: auto;\n  font-size: 0;\n}\n\n#chart-container > figure, div {\n  margin-top: 0 !important;\n  margin-bottom: 0 !important;\n}\n\n\n  </style>\n  <body>\n    <div id="chart-container">\n      ${e}\n    </div>\n  </body>\n</html>\n\n`)(r)),e()}else if(H(4,"[export] Treating as config."),l.strInj){const e=()=>{};await re(o,{chart:{height:l.height,width:l.width}},i),e()}else{r.chart.height=l.height,r.chart.width=l.width;const e=()=>{};await re(o,r,i),e()}p();const d=()=>{},h=i.customCode.resources;if(h){if(h.js&&n.push(await o.addScriptTag({content:h.js})),h.files)for(const t of h.files)try{const r=!t.startsWith("http");n.push(await o.addScriptTag(r?{content:e.readFileSync(t,"utf8")}:{url:t}))}catch(e){H(4,"[export] JS file not found.")}const r=()=>{};if(h.css){let e=h.css.match(/@import\s*([^;]*);/g);if(e)for(let r of e)r&&(r=r.replace("url(","").replace("@import","").replace(/"/g,"").replace(/'/g,"").replace(/;/,"").replace(/\)/g,"").trim(),r.startsWith("http")?n.push(await o.addStyleTag({url:r})):i.customCode.allowFileResources&&n.push(await o.addStyleTag({path:t.join(oe,r)})));n.push(await o.addStyleTag({content:h.css.replace(/@import\s*([^;]*);/g,"")||" "}))}r()}d();const g=u?await o.$eval("#chart-container svg:first-of-type",(async(e,t)=>({chartHeight:e.height.baseVal.value*t,chartWidth:e.width.baseVal.value*t})),parseFloat(l.scale)):await o.evaluate((async()=>{const{chartHeight:e,chartWidth:t}=window.Highcharts.charts[0];return{chartHeight:e,chartWidth:t}})),f=()=>{},m=Math.ceil(g?.chartHeight||l.height),v=Math.ceil(g?.chartWidth||l.width);await o.setViewport({height:m,width:v,deviceScaleFactor:u?1:parseFloat(l.scale)});const y=u?e=>{document.body.style.zoom=e,document.body.style.margin="0px"}:()=>{document.body.style.zoom=1};await o.evaluate(y,parseFloat(l.scale));const{height:b,width:w,x:x,y:T}=await(e=>e.$eval("#chart-container",(e=>{const{x:t,y:o,width:r,height:i}=e.getBoundingClientRect();return{x:t,y:o,width:r,height:Math.trunc(i>1?i:500)}})))(o);let k;u||await o.setViewport({width:Math.round(w),height:Math.round(b),deviceScaleFactor:parseFloat(l.scale)}),f();const S=()=>{};if("svg"===l.type)k=await(async e=>await e.$eval("#container svg:first-of-type",(e=>e.outerHTML)))(o);else if("png"===l.type||"jpeg"===l.type)k=await(async(e,t,o,r)=>await Promise.race([e.screenshot({type:t,encoding:o,clip:r,omitBackground:!0}),new Promise(((e,t)=>setTimeout((()=>t(new Error("Rasterization timeout"))),1500)))]))(o,l.type,"base64",{width:v,height:m,x:x,y:T});else{if("pdf"!==l.type)throw`Unsupported output format ${l.type}`;k=await(async(e,t,o,r)=>await e.pdf({height:t+1,width:o,encoding:r}))(o,m,v,"base64")}return await o.evaluate((()=>{const e=Highcharts.charts;if(e.length)for(const t of e)t&&t.destroy(),Highcharts.charts.shift()})),S(),a(),await s(o),k}catch(e){return await s(o),H(1,`[export] Error encountered during export: ${e}`),e}};let ne,se=0,ae=0,le=0,ce=0,pe=0,ue={},de=!1;const he={create:async()=>{const e=d.v4();let t=!1;const o=(new Date).getTime();try{if(t=await ee(),!t||t.isClosed())throw"invalid page";H(3,`[pool] Successfully created a worker ${e} - took ${(new Date).getTime()-o} ms.`)}catch(e){throw H(1,`[pool] Error creating a new page in pool entry creation! ${e}`),"Error creating page"}return{id:e,page:t,workCount:Math.round(Math.random()*(ue.workLimit/2))}},validate:e=>!(ue.workLimit&&++e.workCount>ue.workLimit)||(H(3,"[pool] Worker failed validation:",`exceeded work limit (limit is ${ue.workLimit})`),!1),destroy:e=>{H(3,`[pool] Destroying pool entry ${e.id}.`),e.page&&e.page.close()},log:(e,t)=>console.log(`${t}: ${e}`)},ge=async e=>{ne=e.puppeteerArgs;try{await(async e=>{const t=[...B,...e||[]];if(!Z){let e=0;const o=async()=>{try{H(3,"[browser] attempting to get a browser instance (try",e+")"),Z=await g.launch({headless:"new",args:t,userDataDir:"./tmp/"})}catch(t){H(0,"[browser]",t),++e<25?(H(3,"[browser] failed:",t),await new Promise((e=>setTimeout(e,4e3))),await o()):H(0,"Max retries reached")}};try{await o()}catch(e){return H(0,"[browser] Unable to open browser"),!1}if(!Z)return H(0,"[browser] Unable to open browser"),!1}return Z})(ne)}catch(e){H(0,"[pool|browser]",e)}if(ue=e&&e.pool?{...e.pool}:{},H(3,"[pool] Initializing pool:",`min ${ue.initialWorkers}, max ${ue.maxWorkers}.`),de)return H(4,"[pool] Already initialized, please kill it before creating a new one.");ue.listenToProcessExits&&(H(4,"[pool] Attaching exit listeners to the process."),process.on("exit",(async()=>{await fe()})),process.on("SIGINT",((e,t)=>{H(4,`The ${e} event with code: ${t}.`),process.exit(1)})),process.on("SIGTERM",((e,t)=>{H(4,`The ${e} event with code: ${t}.`),process.exit(1)})),process.on("uncaughtException",(async(e,t)=>{H(4,`The ${t} error, message: ${e.message}.`)})));try{de=new h.Pool({...he,min:ue.initialWorkers,max:ue.maxWorkers,createRetryIntervalMillis:200,createTimeoutMillis:ue.acquireTimeout,acquireTimeoutMillis:ue.acquireTimeout,destroyTimeoutMillis:ue.acquireTimeout,idleTimeoutMillis:ue.timeoutThreshold,reapIntervalMillis:1e3,propagateCreateError:!1}),de.on("createFail",((e,t)=>{H(1,`[pool] Error when creating worker of an event id ${e}:`,t)})),de.on("acquireFail",((e,t)=>{H(1,`[pool] Error when acquiring worker of an event id ${e}:`,t)})),de.on("destroyFail",((e,t,o)=>{H(1,`[pool] Error when destroying worker of an id ${t.id}, event id ${e}:`,o)})),de.on("release",(e=>{H(4,`[pool] Releasing a worker of an id ${e.id}`)})),de.on("destroySuccess",((e,t)=>{H(4,`[pool] Destroyed a worker of an id ${t.id}`)}));const e=[];for(let t=0;t<ue.initialWorkers;t++)e.push(await de.acquire().promise);e.forEach((e=>{de.release(e)})),H(3,`[pool] The pool is ready with ${ue.initialWorkers} initial resources waiting.`)}catch(e){throw H(1,`[pool] Couldn't create the worker pool ${e}`),e}};async function fe(){return H(3,"[pool] Killing all workers."),de.destroyed?(await te(),!0):(await de.destroy(),await te(),!0)}const me=async(e,t)=>{let o;const r=e=>{throw++ce,o&&de.release(o),"In pool.postWork: "+e};if(H(4,"[pool] Work received, starting to process."),ue.benchmarking&&ve(),++ae,!de)return H(1,"[pool] Work received, but pool has not been started."),r("Pool is not inited but work was posted to it!");try{H(4,"[pool] Acquiring worker"),o=await de.acquire().promise}catch(e){return r(`[pool] Error when acquiring available entry: ${e}`)}if(H(4,"[pool] Acquired worker handle"),!o.page)return r("Resolved worker page is invalid: pool setup is wonky");try{let i=(new Date).getTime();H(4,`[pool] Starting work on pool entry ${o.id}.`);const n=await ie(o.page,e,t);if(n instanceof Error)return"Rasterization timeout"===n.message&&(o.page.close(),o.page=await ee()),r(n);de.release(o);const s=(new Date).getTime()-i;return le+=s,pe=le/++se,H(4,`[pool] Work completed in ${s} ms.`),{data:n,options:t}}catch(e){r(`Error trying to perform puppeteer export: ${e}.`)}};function ve(){const{min:e,max:t,size:o,available:r,borrowed:i,pending:n,spareResourceCapacity:s}=de;H(4,`[pool] The minimum number of resources allowed by pool: ${e}.`),H(4,`[pool] The maximum number of resources allowed by pool: ${t}.`),H(4,`[pool] The number of all resources in pool (free or in use): ${o}.`),H(4,`[pool] The number of resources that are currently available: ${r}.`),H(4,`[pool] The number of resources that are currently acquired: ${i}.`),H(4,`[pool] The number of callers waiting to acquire a resource: ${n}.`),H(4,`[pool] The number of how many more resources can the pool manage/create: ${s}.`)}var ye=()=>({min:de.min,max:de.max,size:de.size,available:de.available,borrowed:de.borrowed,pending:de.pending,spareResourceCapacity:de.spareResourceCapacity}),be=()=>ae,we=()=>ce,xe=()=>pe,Te=()=>se;const ke=process.env.npm_package_version,Se=new Date;let He={};const Ee=()=>He,Re=(e,t,o=[])=>{const r=_(e);for(const[e,n]of Object.entries(t))r[e]="object"!=typeof(i=n)||Array.isArray(i)||null===i||o.includes(e)||void 0===r[e]?void 0!==n?n:r[e]:Re(r[e],n,o);var i;return r};function Le(e,t={},o=""){Object.keys(e).forEach((r=>{if(!["puppeteer","highcharts"].includes(r)){const i=e[r],n=t&&t[r];let s;void 0===i.value?Le(i,n,`${o}.${r}`):(void 0!==n&&(i.value=n),i.envLink&&("boolean"===i.type?i.value=I([process.env[i.envLink],i.value].find((e=>e||"false"===e))):"number"===i.type?(s=+process.env[i.envLink],i.value=s>=0?s:i.value):i.type.indexOf("]")>=0&&process.env[i.envLink]?i.value=process.env[i.envLink].split(","):i.value=process.env[i.envLink]||i.value))}}))}function Ce(e){let t={};for(const[o,r]of Object.entries(e))t[o]=Object.prototype.hasOwnProperty.call(r,"value")?r.value:Ce(r);return t}let Oe=!1;const _e=async(t,o)=>{H(4,"[chart] Starting exporting process.");const r=((e,t={})=>{let o={};return e.svg?(o=_(t),o.export.type=e.type||e.export.type,o.export.scale=e.scale||e.export.scale,o.export.outfile=e.outfile||e.export.outfile,o.payload={svg:e.svg}):o=Re(t,e,x),o.export.outfile=o.export?.outfile||`chart.${o.export?.type||"png"}`,o})(t,Ee()),i=r.export;return r.payload?.svg&&""!==r.payload.svg?je(r.payload.svg.trim(),r,o):i.infile&&i.infile.length?(H(4,"[chart] Attempting to export from an input file."),e.readFile(i.infile,"utf8",((e,t)=>e?H(1,`[chart] Error loading input file: ${e}.`):(r.export.instr=t,je(r.export.instr.trim(),r,o))))):i.instr&&""!==i.instr||i.options&&""!==i.options?(H(4,"[chart] Attempting to export from a raw input."),I(r.customCode?.allowCodeExecution)?Ie(r,o):"string"==typeof i.instr?je(i.instr.trim(),r,o):$e(r,i.instr||i.options,o)):(H(1,R(`[chart] No input specified.\n      ${JSON.stringify(i,void 0,"  ")}.`)),o&&o(!1,{error:!0,message:"No input specified."}))},Ae=e=>{const{chart:t,exporting:o}=e.export?.options||O(e.export?.instr),r=O(e.export?.globalOptions);let i=e.export?.scale||o?.scale||r?.exporting?.scale||e.export?.defaultScale||1;return i=Math.max(.1,Math.min(i,5)),i=((e,t=1)=>{const o=Math.pow(10,t||0);return Math.round(+e*o)/o})(i,2),{height:e.export?.height||o?.sourceHeight||t?.height||r?.exporting?.sourceHeight||r?.chart?.height||e.export?.defaultHeight||400,width:e.export?.width||o?.sourceWidth||t?.width||r?.exporting?.sourceWidth||r?.chart?.width||e.export?.defaultWidth||600,scale:i}},$e=(t,o,r,i)=>{let{export:n,customCode:s}=t;const a="boolean"==typeof s.allowCodeExecution?s.allowCodeExecution:Oe;if(s){if("string"==typeof t.customCode.resources)t.customCode.resources=C(t.customCode.resources,I(t.customCode.allowFileResources));else if(!t.customCode.resources)try{const o=e.readFileSync("resources.json","utf8");t.customCode.resources=C(o,I(t.customCode.allowFileResources))}catch(e){H(3,"[chart] The default resources.json file not found.")}}else s=t.customCode={};if(!a&&s){if(s.callback||s.resources||s.customCode)return r&&r(!1,{error:!0,message:R("The callback, resources and customCode have been disabled for this\n            server.")});s.callback=!1,s.resources=!1,s.customCode=!1}if(o&&(o.chart=o.chart||{},o.exporting=o.exporting||{},o.exporting.enabled=!1),n.constr=n.constr||"chart",n.type=L(n.type,n.outfile),"svg"===n.type&&(n.width=!1),["globalOptions","themeOptions"].forEach((t=>{try{n&&n[t]&&("string"==typeof n[t]&&n[t].endsWith(".json")?n[t]=O(e.readFileSync(n[t],"utf8"),!0):n[t]=O(n[t],!0))}catch(e){n[t]={},H(1,`[chart] The ${t} not found.`)}})),s.allowCodeExecution&&(s.customCode=j(s.customCode,s.allowFileResources)),s&&s.callback&&s.callback?.indexOf("{")<0)if(s.allowFileResources)try{s.callback=e.readFileSync(s.callback,"utf8")}catch(e){H(2,`[chart] Error loading callback: ${e}.`),s.callback=!1}else s.callback=!1;t.export={...t.export,...Ae(t)},me(n.strInj||o||i,t).then((e=>r(e))).catch((e=>(H(0,"[chart] When posting work:",e),r(!1,e))))},Ie=(e,t)=>{try{let o,r=e.export.instr||e.export.options;return"string"!=typeof r&&(o=r=A(r,e.customCode?.allowCodeExecution)),o=r.replaceAll(/\t|\n|\r/g,"").trim(),";"===o[o.length-1]&&(o=o.substring(0,o.length-1)),e.export.strInj=o,$e(e,!1,t)}catch(o){const r=R(`Malformed input detected for ${e.export?.requestId||"?"}:\n      Please make sure that your JSON/JavaScript options\n      are sent using the "options" attribute, and that if you're using\n      SVG, it is unescaped.`);return H(1,r),t&&t(!1,JSON.stringify({error:!0,message:r}))}},je=(e,t,o)=>{const{allowCodeExecution:r}=t.customCode;if(e.indexOf("<svg")>=0||e.indexOf("<?xml")>=0)return H(4,"[chart] Parsing input as SVG."),$e(t,!1,o,e);try{const r=JSON.parse(e.replaceAll(/\t|\n|\r/g," "));return $e(t,r,o)}catch(e){return I(r)?Ie(t,o):o&&o(!1,{error:!0,message:R("Only JSON configurations and SVG is allowed for this server. If\n            this is your server, JavaScript exporting can be enabled by starting\n            the server with the --allowCodeExecution flag.")})}},Pe={png:"image/png",jpeg:"image/jpeg",gif:"image/gif",pdf:"application/pdf",svg:"image/svg+xml"};let Ne=0;const Fe=[],Ue=[],qe=(e,t,o,r)=>{let i=!0;const{id:n,uniqueId:s,type:a,body:l}=r;return e.some((e=>{if(e){let r=e(t,o,n,s,a,l);return void 0!==r&&!0!==r&&(i=r),!0}})),i},Ge=(e,t)=>{(()=>{const e=process.hrtime.bigint()})();const o=Ee(),r=e.body,i=++Ne,n=d.v4().replace(/-/g,"");let s=L(r.type);if(!r)return t.status(400).send(R("Body is required. Sending a body? Make sure your Content-type header\n        is correct. Accepted is application/json and multipart/form-data."));let a=O(r.infile||r.options||r.data);if(!a&&!r.svg)return H(2,R(`Request ${n} from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Check your payload.`)),t.status(400).send(R("No correct chart data found. Please make sure you are using\n        application/json or multipart/form-data headers, and that the chart\n        data is in the 'infile', 'options' or 'data' attribute if sending\n        JSON or in the 'svg' if sending SVG."));let l=!1;if(l=qe(Fe,e,t,{id:i,uniqueId:n,type:s,body:r}),!0!==l)return t.send(l);let c=!1;e.socket.on("close",(()=>{c=!0})),H(4,`[export] Got an incoming HTTP request ${n}.`),r.constr="string"==typeof r.constr&&r.constr||"chart";const p={export:{instr:a,type:s,constr:r.constr[0].toLowerCase()+r.constr.substr(1),height:r.height,width:r.width,scale:r.scale||o.export.scale,globalOptions:O(r.globalOptions,!0),themeOptions:O(r.themeOptions,!0)},customCode:{allowCodeExecution:Oe,allowFileResources:!1,resources:O(r.resources,!0),callback:r.callback,customCode:r.customCode}};a&&(p.export.instr=A(a,p.customCode.allowCodeExecution));const u=Re(o,p);if(u.export.options=a,u.payload={svg:r.svg||!1,b64:r.b64||!1,dataOptions:O(r.dataOptions,!0),noDownload:r.noDownload||!1,requestId:n},r.svg&&(h=u.payload.svg,["localhost","(10).(.*).(.*).(.*)","(127).(.*).(.*).(.*)","(172).(1[6-9]|2[0-9]|3[0-1]).(.*).(.*)","(192).(168).(.*).(.*)"].some((e=>h.match(`xlink:href="(?:(http://|https://))?${e}`)))))return t.status(400).send("SVG potentially contain at least one forbidden URL in xlink:href element.");var h;_e(u,((o,a)=>(e.socket.removeAllListeners("close"),c?H(3,R("[export] The client closed the connection before the chart was done\n          processing.")):a?(H(1,R(`[export] Work: ${n} could not be completed, sending:\n          ${a}`)),t.status(400).send(a.message)):o&&o.data?(s=o.options.export.type,qe(Ue,e,t,{id:i,body:o.data}),o.data?r.b64?"pdf"===s?t.send(Buffer.from(o.data,"utf8").toString("base64")):t.send(o.data):(t.header("Content-Type",Pe[s]||"image/png"),r.noDownload||t.attachment(`${e.params.filename||"chart"}.${s||"png"}`),"svg"===s?t.send(o.data):t.send(Buffer.from(o.data,"base64"))):void 0):(H(1,R(`[export] Unexpected return from chart generation, please check your\n          data Request: ${n} is ${o.data}.`)),t.status(400).send("Unexpected return from chart generation, please check your data.")))))};const We=i();We.disable("x-powered-by"),We.use(r());const Me=n.memoryStorage(),De=n({storage:Me,limits:{fieldsSize:"50MB"}});We.use(De.any()),We.use(o.json({limit:"50mb"})),We.use(o.urlencoded({extended:!0,limit:"50mb"})),We.use(o.urlencoded({extended:!1,limit:"50mb"}));const Ve=e=>H(1,`[server] Socket error: ${e}`),ze=e=>{e.on("clientError",Ve),e.on("error",Ve),e.on("connection",(e=>e.on("error",(e=>Ve(e)))))},Je=async o=>{if(!o.enable)return!1;if(!o.ssl.enable&&!o.ssl.force){const e=s.createServer(We);ze(e),e.listen(o.port,o.host),H(3,`[server] Started HTTP server on ${o.host}:${o.port}.`)}if(o.ssl.enable){let r,i;try{r=await e.promises.readFile(t.posix.join(o.ssl.certPath,"server.key"),"utf8"),i=await e.promises.readFile(t.posix.join(o.ssl.certPath,"server.crt"),"utf8")}catch(e){H(1,`[server] Unable to load key/certificate from ${o.ssl.certPath}.`)}if(r&&i){const e=a.createServer(We);ze(e),e.listen(o.ssl.port,o.host),H(3,`[server] Started HTTPS server on ${o.host}:${o.ssl.port}.`)}}o.rateLimiting&&o.rateLimiting.enable&&![0,NaN].includes(o.rateLimiting.maxRequests)&&P(We,o.rateLimiting),We.use(i.static(t.posix.join(E,"public"))),(e=>{!!e&&e.get("/health",((e,t)=>{t.send({status:"OK",bootTime:Se,uptime:Math.floor(((new Date).getTime()-Se.getTime())/1e3/60)+" minutes",version:ke,highchartsVersion:J(),averageProcessingTime:xe(),performedExports:Te(),failedExports:we(),exportAttempts:be(),sucessRatio:Te()/be()*100,pool:ye()})}))})(We),(e=>{e.post("/",Ge),e.post("/:filename",Ge)})(We),(e=>{!!e&&e.get("/",((e,o)=>{o.sendFile(t.join(E,"public","index.html"))}))})(We),(e=>{!!e&&e.post("/change_hc_version/:newVersion",(async(e,t)=>{const o=process.env.HIGHCHARTS_ADMIN_TOKEN;if(!o||!o.length)return t.send({error:!0,message:"Server not configured to do run-time version changes: HIGHCHARTS_ADMIN_TOKEN not set"});const r=e.get("hc-auth");if(!r||r!==o)return t.send({error:!0,message:"Invalid or missing token: set token in the hc-auth header"});const i=e.params.newVersion;if(i){try{await V(i)}catch(e){t.send({error:!0,message:e})}t.send({version:J()})}else t.send({error:!0,message:"No new version supplied"})}))})(We)};var Ke={startServer:Je,getExpress:()=>i,getApp:()=>We,use:(e,...t)=>{We.use(e,...t)},get:(e,...t)=>{We.get(e,...t)},post:(e,...t)=>{We.post(e,...t)},enableRateLimiting:e=>P(We,e)},Xe={log:H,mapToNewConfig:e=>{const t={};for(const[o,r]of Object.entries(e)){const e=T[o]?T[o].split("."):[];e.reduce(((t,o,i)=>t[o]=e.length-1===i?r:t[o]||{}),t)}return t},setOptions:(t,o)=>(o?.length&&(He=function(t){const o=t.findIndex((e=>"loadConfig"===e.replace(/-/g,"")));if(o>-1&&t[o+1]){const r=t[o+1];try{if(r&&r.endsWith(".json"))return JSON.parse(e.readFileSync(r))}catch(e){H(1,`[config] Unable to load config from the ${r}: ${e}`)}}return{}}(o)),Le(w,He),He=Ce(w),t&&(He=Re(He,t,x)),o?.length&&(He=function(e,t,o){for(let o=0;o<t.length;o++){let r=t[o].replace(/-/g,"");const i=T[r]?T[r].split("."):[];i.reduce(((n,s,a)=>(i.length-1===a&&void 0!==n[s]&&(t[++o]?n[s]=t[o]||n[s]:(console.log(`Missing argument value for ${r}!`.red,"\n"),e=$())),n[s])),e)}return e}(He,o)),He),singleExport:t=>{t.export.instr=t.export.instr||t.export.options,_e(t,((t,o)=>{o&&(H(1,`[cli] ${o.message}`),process.exit(1));const{outfile:r,type:i}=t.options.export;e.writeFileSync(r||`chart.${i}`,"svg"!==i?Buffer.from(t.data,"base64"):t.data),fe()}))},startExport:_e,batchExport:t=>{const o=[];for(let r of t.export.batch.split(";"))r=r.split("="),2===r.length&&o.push(new Promise(((o,i)=>{_e({...t,export:{...t.export,infile:r[0],outfile:r[1]}},((t,r)=>{if(r)return i(r);e.writeFileSync(t.options.export.outfile,Buffer.from(t.data,"base64")),o()}))})));Promise.all(o).then((()=>{fe()})).catch((e=>{H(1,`[chart] Error encountered during batch export: ${e}`),fe()}))},server:Ke,startServer:Je,killPool:fe,initPool:async(e={})=>{var t,o;return t=e.customCode&&e.customCode.allowCodeExecution,Oe=I(t),(o=e.logging&&parseInt(e.logging.level))>=0&&o<=S.levelsDesc.length&&(S.level=o),e.logging&&e.logging.dest&&((e,t)=>{if(S={...S,dest:e||S.dest,file:t||S.file,toFile:!0},0===S.dest.length)return H(1,"[logger] File logging init: no path supplied.");S.dest.endsWith("/")||(S.dest+="/")})(e.logging.dest,e.logging.file||"highcharts-export-server.log"),await D(e.highcharts||{version:"latest"}),await ge({pool:e.pool||{initialWorkers:1,maxWorkers:1},puppeteerArgs:e.puppeteer?.args||[]}),e}};module.exports=Xe;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
