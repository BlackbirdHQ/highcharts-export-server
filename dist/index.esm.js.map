{"version":3,"file":"index.esm.js","sources":["../lib/schemas/config.js","../lib/logger.js","../lib/utils.js","../lib/server/rate_limit.js","../lib/fetch.js","../lib/cache.js","../lib/browser.js","../lib/export.js","../lib/benchmark.js","../templates/svg_export/svg_export.js","../lib/config.js","../lib/chart.js","../lib/pool.js","../lib/server/routes/health.js","../lib/server/routes/export.js","../lib/server/server.js","../lib/server/routes/ui.js","../lib/server/routes/change-hc-version.js","../lib/index.js"],"sourcesContent":["/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\n// Load .env into environment variables\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\n// This is the configuration object with all options and their default values,\n// also from the .env file if one exists\nexport const defaultConfig = {\n  puppeteer: {\n    args: {\n      value: [],\n      type: 'string[]',\n      description: 'Array of arguments to send to puppeteer.'\n    }\n  },\n  highcharts: {\n    version: {\n      value: 'latest',\n      envLink: 'HIGHCHARTS_VERSION',\n      type: 'string',\n      description: 'Highcharts version to use.'\n    },\n    cdnURL: {\n      value: 'https://code.highcharts.com/',\n      envLink: 'HIGHCHARTS_CDN',\n      type: 'string',\n      description: 'The CDN URL of Highcharts scripts to use.'\n    },\n    coreScripts: {\n      envLink: 'HIGHCHARTS_CORE_SCRIPTS',\n      value: ['highcharts', 'highcharts-more', 'highcharts-3d'],\n      type: 'string[]',\n      description: 'Highcharts core scripts to fetch.'\n    },\n    modules: {\n      envLink: 'HIGHCHARTS_MODULES',\n      value: [\n        'stock',\n        'map',\n        'gantt',\n        'exporting',\n        'export-data',\n        'parallel-coordinates',\n        'accessibility',\n        'annotations-advanced',\n        'boost-canvas',\n        'boost',\n        'data',\n        'draggable-points',\n        'static-scale',\n        'broken-axis',\n        'heatmap',\n        'tilemap',\n        'timeline',\n        'treemap',\n        'item-series',\n        'drilldown',\n        'histogram-bellcurve',\n        'bullet',\n        'funnel',\n        'funnel3d',\n        'pyramid3d',\n        'networkgraph',\n        'pareto',\n        'pattern-fill',\n        'pictorial',\n        'price-indicator',\n        'sankey',\n        'arc-diagram',\n        'dependency-wheel',\n        'series-label',\n        'solid-gauge',\n        'sonification',\n        'stock-tools',\n        'streamgraph',\n        'sunburst',\n        'variable-pie',\n        'variwide',\n        'vector',\n        'venn',\n        'windbarb',\n        'wordcloud',\n        'xrange',\n        'no-data-to-display',\n        'drag-panes',\n        'debugger',\n        'dumbbell',\n        'lollipop',\n        'cylinder',\n        'organization',\n        'dotplot',\n        'marker-clusters',\n        'hollowcandlestick',\n        'heikinashi'\n      ],\n      type: 'string[]',\n      description: 'Highcharts modules to fetch.'\n    },\n    indicators: {\n      envLink: 'HIGHCHARTS_INDICATORS',\n      value: ['indicators-all'],\n      type: 'string[]',\n      description: 'Highcharts indicators to fetch.'\n    },\n    scripts: {\n      value: [\n        'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js'\n      ],\n      type: 'string[]',\n      description:\n        'Additional direct scripts/optional dependencies (e.g. moment.js).'\n    }\n  },\n  export: {\n    infile: {\n      value: false,\n      type: 'string',\n      description:\n        'The input file name along with a type (json or svg). It can be a correct JSON or SVG file.'\n    },\n    instr: {\n      value: false,\n      type: 'string',\n      description:\n        'An input in a form of a stringified JSON or SVG file. Overrides the --infile.'\n    },\n    options: {\n      value: false,\n      type: 'string',\n      description: 'An alias for the --instr option.'\n    },\n    outfile: {\n      value: false,\n      type: 'string',\n      description:\n        'The output filename along with a type (jpeg, png, pdf or svg). Ignores the --type flag.'\n    },\n    type: {\n      envLink: 'EXPORT_DEFAULT_TYPE',\n      value: 'png',\n      type: 'string',\n      description:\n        'The format of the file to export to. Can be jpeg, png, pdf or svg.'\n    },\n    constr: {\n      envLink: 'EXPORT_DEFAULT_CONSTR',\n      value: 'chart',\n      type: 'string',\n      description:\n        'The constructor to use. Can be chart, stockChart, mapChart or ganttChart.'\n    },\n    defaultHeight: {\n      envLink: 'EXPORT_DEFAULT_HEIGHT',\n      value: 400,\n      type: 'number',\n      description:\n        'The default height of the exported chart. Used when not found any value set.'\n    },\n    defaultWidth: {\n      envLink: 'EXPORT_DEFAULT_WIDTH',\n      value: 600,\n      type: 'number',\n      description:\n        'The default width of the exported chart. Used when not found any value set.'\n    },\n    defaultScale: {\n      envLink: 'EXPORT_DEFAULT_SCALE',\n      value: 1,\n      type: 'number',\n      description:\n        'The default scale of the exported chart. Ranges between 1 and 5.'\n    },\n    height: {\n      type: 'number',\n      value: false,\n      description:\n        'The default height of the exported chart. Overrides the option in the chart settings.'\n    },\n    width: {\n      type: 'number',\n      value: false,\n      description:\n        'The width of the exported chart. Overrides the option in the chart settings.'\n    },\n    scale: {\n      value: false,\n      type: 'number',\n      description: 'The scale of the exported chart. Ranges between 1 and 5.'\n    },\n    globalOptions: {\n      value: false,\n      type: 'string',\n      description:\n        'A stringified JSON or a filename with options to be passed into the Highcharts.setOptions.'\n    },\n    themeOptions: {\n      value: false,\n      type: 'string',\n      description:\n        'A stringified JSON or a filename with theme options to be passed into the Highcharts.setOptions.'\n    },\n    batch: {\n      value: false,\n      type: 'string',\n      description:\n        'Starts a batch job. A string that contains input/output pairs: \"in=out;in=out;..\".'\n    }\n  },\n  customCode: {\n    allowCodeExecution: {\n      envLink: 'HIGHCHARTS_ALLOW_CODE_EXECUTION',\n      value: false,\n      type: 'boolean',\n      description:\n        'If set to true, allow for the execution of arbitrary code when exporting.'\n    },\n    allowFileResources: {\n      envLink: 'HIGHCHARTS_ALLOW_FILE_RESOURCES',\n      value: true,\n      type: 'boolean',\n      description:\n        'Allow injecting resources from the filesystem. Has no effect when running as a server.'\n    },\n    customCode: {\n      value: false,\n      type: 'string',\n      description:\n        'A function to be called before chart initialization. Can be a filename with the js extension.'\n    },\n    callback: {\n      value: false,\n      type: 'string',\n      description: 'A JavaScript file with a function to run on construction.'\n    },\n    resources: {\n      value: false,\n      type: 'string',\n      description:\n        'An additional resource in a form of stringified JSON. It can contain files, js and css sections.'\n    },\n    loadConfig: {\n      value: false,\n      type: 'string',\n      description: 'A file that contains a pre-defined config to use.'\n    },\n    createConfig: {\n      value: false,\n      type: 'string',\n      description:\n        'Allows to set options through a prompt and save in a provided config file.'\n    }\n  },\n  server: {\n    enable: {\n      envLink: 'HIGHCHARTS_SERVER_ENABLE',\n      value: false,\n      type: 'boolean',\n      cliName: 'enableServer',\n      description: 'If set to true, starts a server on 0.0.0.0.'\n    },\n    host: {\n      envLink: 'HIGHCHARTS_SERVER_HOST',\n      value: '0.0.0.0',\n      type: 'string',\n      description:\n        'The hostname of the server. Also starts a server listening on the supplied hostname.'\n    },\n    port: {\n      envLink: 'HIGHCHARTS_SERVER_PORT',\n      value: 7801,\n      type: 'number',\n      description: 'The port to use for the server. Defaults to 7801.'\n    },\n    ssl: {\n      enable: {\n        envLink: 'HIGHCHARTS_SERVER_SSL_ENABLE',\n        value: false,\n        type: 'boolean',\n        cliName: 'enableSsl',\n        description: 'Enables the SSL protocol.'\n      },\n      force: {\n        envLink: 'HIGHCHARTS_SERVER_SSL_FORCE',\n        value: false,\n        type: 'boolean',\n        cliName: 'sslForced',\n        description:\n          'If set to true, forces the server to only serve over HTTPS.'\n      },\n      port: {\n        envLink: 'HIGHCHARTS_SERVER_SSL_PORT',\n        value: 443,\n        type: 'number',\n        cliName: 'sslPort',\n        description: 'The port on which to run the SSL server.'\n      },\n      certPath: {\n        envLink: 'HIGHCHARTS_SSL_CERT_PATH',\n        value: '',\n        type: 'string',\n        description: 'The path to the SSL certificate/key.'\n      }\n    },\n    rateLimiting: {\n      enable: {\n        envLink: 'HIGHCHARTS_RATE_LIMIT_ENABLE',\n        value: false,\n        type: 'boolean',\n        cliName: 'enableRateLimiting',\n        description: 'Enables rate limiting.'\n      },\n      maxRequests: {\n        envLink: 'HIGHCHARTS_RATE_LIMIT_MAX',\n        value: 10,\n        type: 'number',\n        description: 'Max requests allowed in a one minute.'\n      },\n      window: {\n        envLink: 'HIGHCHARTS_RATE_LIMIT_WINDOW',\n        value: 1,\n        type: 'number',\n        description: 'The time window in minutes for rate limiting.'\n      },\n      delay: {\n        envLink: 'HIGHCHARTS_RATE_LIMIT_DELAY',\n        value: 0,\n        type: 'number',\n        description: 'The amount to delay each successive request before hitting the max.'\n      },\n      trustProxy: {\n        envLink: 'HIGHCHARTS_RATE_LIMIT_TRUST_PROXY',\n        value: false,\n        type: 'boolean',\n        description: 'Set this to true if behind a load balancer.'\n      },\n      skipKey: {\n        envLink: 'HIGHCHARTS_RATE_LIMIT_SKIP_KEY',\n        value: '',\n        type: 'number|string',\n        description:\n          'Allows bypassing the rate limiter and should be provided with skipToken argument.'\n      },\n      skipToken: {\n        envLink: 'HIGHCHARTS_RATE_LIMIT_SKIP_TOKEN',\n        value: '',\n        type: 'number|string',\n        description:\n          'Allows bypassing the rate limiter and should be provided with skipKey argument.'\n      }\n    }\n  },\n  pool: {\n    initialWorkers: {\n      envLink: 'HIGHCHARTS_POOL_MIN_WORKERS',\n      value: 4,\n      type: 'number',\n      description: 'The number of initial workers to spawn.'\n    },\n    maxWorkers: {\n      envLink: 'HIGHCHARTS_POOL_MAX_WORKERS',\n      value: 8,\n      type: 'number',\n      description: 'The number of max workers to spawn.'\n    },\n    workLimit: {\n      envLink: 'HIGHCHARTS_POOL_WORK_LIMIT',\n      value: 40,\n      type: 'number',\n      description:\n        'The pieces of work that can be performed before restarting process.'\n    },\n    queueSize: {\n      envLink: 'HIGHCHARTS_POOL_QUEUE_SIZE',\n      value: 5,\n      type: 'number',\n      description: 'The size of the request overflow queue.'\n    },\n    timeoutThreshold: {\n      envLink: 'HIGHCHARTS_POOL_TIMEOUT',\n      value: 5000,\n      type: 'number',\n      description: 'The number of milliseconds before timing out.'\n    },\n    acquireTimeout: {\n      envLink: 'HIGHCHARTS_POOL_ACQUIRE_TIMEOUT',\n      value: 5000,\n      type: 'number',\n      description: 'The number of milliseconds to wait for acquiring a resource.'\n    },\n    reaper: {\n      envLink: 'HIGHCHARTS_POOL_ENABLE_REAPER',\n      value: true,\n      type: 'boolean',\n      description:\n        'Whether or not to evict workers after a certain time period.'\n    },\n    benchmarking: {\n      envLink: 'HIGHCHARTS_POOL_BENCHMARKING',\n      value: false,\n      type: 'boolean',\n      description: 'Enable benchmarking.'\n    },\n    listenToProcessExits: {\n      envLink: 'HIGHCHARTS_POOL_LISTEN_TO_PROCESS_EXITS',\n      value: true,\n      type: 'boolean',\n      description:\n        'Set to false in order to skip attaching process.exit handlers.'\n    }\n  },\n  payload: {},\n  logging: {\n    level: {\n      envLink: 'HIGHCHARTS_LOG_LEVEL',\n      value: 4,\n      type: 'number',\n      cliName: 'logLevel',\n      description:\n        'The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose).'\n    },\n    file: {\n      envLink: 'HIGHCHARTS_LOG_FILE',\n      value: 'highcharts-export-server.log',\n      type: 'string',\n      cliName: 'logFile',\n      description:\n        'A name of a log file. The --logDest also needs to be set to enable file logging.'\n    },\n    dest: {\n      envLink: 'HIGHCHARTS_LOG_DEST',\n      value: 'log/',\n      type: 'string',\n      cliName: 'logDest',\n      description: 'The path to store log files. Also enables file logging.'\n    }\n  },\n  ui: {\n    enable: {\n      envLink: 'HIGHCHARTS_UI_ENABLE',\n      value: false,\n      type: 'boolean',\n      cliName: 'enableUi',\n      description: 'Enables the UI for the export server.'\n    },\n    route: {\n      envLink: 'HIGHCHARTS_UI_ROUTE',\n      value: '/',\n      type: 'string',\n      cliName: 'uiRoute',\n      description: 'The route to attach the UI to.'\n    }\n  },\n  other: {\n    noLogo: {\n      envLink: 'HIGHCHARTS_NO_LOGO',\n      value: false,\n      type: 'boolean',\n      description:\n        'Skip printing the logo on a startup. Will be replaced by a simple text.'\n    }\n  }\n};\n\n// The config descriptions object for the prompts functionality. It contains\n// information like:\n// * Type of a prompt\n// * Name of an option\n// * Short description of a chosen option\n// * Initial value\nexport const promptsConfig = {\n  puppeteer: [\n    {\n      type: 'list',\n      name: 'args',\n      message: 'Puppeteer arguments',\n      initial: defaultConfig.puppeteer.args.value.join(','),\n      separator: ','\n    }\n  ],\n  highcharts: [\n    {\n      type: 'text',\n      name: 'version',\n      message: 'Highcharts version',\n      initial: defaultConfig.highcharts.version.value\n    },\n    {\n      type: 'text',\n      name: 'cdnURL',\n      message: 'The url of CDN',\n      initial: defaultConfig.highcharts.cdnURL.value\n    },\n    {\n      type: 'multiselect',\n      name: 'modules',\n      message: 'Available modules',\n      instructions: 'Space: Select specific, A: Select all, Enter: Confirm.',\n      choices: defaultConfig.highcharts.modules.value\n    },\n    {\n      type: 'list',\n      name: 'scripts',\n      message: 'Custom scripts',\n      initial: defaultConfig.highcharts.scripts.value.join(','),\n      separator: ','\n    }\n  ],\n  export: [\n    {\n      type: 'select',\n      name: 'type',\n      message: 'The default type of a file to export to',\n      hint: `Default: ${defaultConfig.export.type.value}`,\n      initial: 0,\n      choices: ['png', 'jpeg', 'pdf', 'svg']\n    },\n    {\n      type: 'select',\n      name: 'constr',\n      message: 'The default constructor for Highcharts to use',\n      hint: `Default: ${defaultConfig.export.constr.value}`,\n      initial: 0,\n      choices: ['chart', 'stockChart', 'mapChart', 'ganttChart']\n    },\n    {\n      type: 'number',\n      name: 'defaultHeight',\n      message: 'The default fallback height of the exported chart',\n      initial: defaultConfig.export.defaultHeight.value\n    },\n    {\n      type: 'number',\n      name: 'defaultWidth',\n      message: 'The default fallback width of the exported chart',\n      initial: defaultConfig.export.defaultWidth.value\n    },\n    {\n      type: 'number',\n      name: 'defaultScale',\n      message: 'The default fallback scale of the exported chart',\n      initial: defaultConfig.export.defaultScale.value,\n      min: 0.1,\n      max: 5\n    }\n  ],\n  customCode: [\n    {\n      type: 'toggle',\n      name: 'allowCodeExecution',\n      message: 'Allow to execute custom code',\n      initial: defaultConfig.customCode.allowCodeExecution.value\n    },\n    {\n      type: 'toggle',\n      name: 'allowFileResources',\n      message: 'Allow file resources',\n      initial: defaultConfig.customCode.allowFileResources.value\n    }\n  ],\n  server: [\n    {\n      type: 'toggle',\n      name: 'enable',\n      message: 'Starts a server on 0.0.0.0',\n      initial: defaultConfig.server.enable.value\n    },\n    {\n      type: 'text',\n      name: 'host',\n      message: 'A hostname of a server',\n      initial: defaultConfig.server.host.value\n    },\n    {\n      type: 'number',\n      name: 'port',\n      message: 'A port of a server',\n      initial: defaultConfig.server.port.value\n    },\n    {\n      type: 'toggle',\n      name: 'ssl.enable',\n      message: 'Enable SSL protocol',\n      initial: defaultConfig.server.ssl.enable.value\n    },\n    {\n      type: 'toggle',\n      name: 'ssl.force',\n      message: 'Force to only serve over HTTPS',\n      initial: defaultConfig.server.ssl.force.value\n    },\n    {\n      type: 'number',\n      name: 'ssl.port',\n      message: 'Port on which to run the SSL server',\n      initial: defaultConfig.server.ssl.port.value\n    },\n    {\n      type: 'text',\n      name: 'ssl.certPath',\n      message: 'A path where to find the SSL certificate/key',\n      initial: defaultConfig.server.ssl.certPath.value\n    },\n    {\n      type: 'toggle',\n      name: 'rateLimiting.enable',\n      message: 'Enable rate limiting',\n      initial: defaultConfig.server.rateLimiting.enable.value\n    },\n    {\n      type: 'number',\n      name: 'rateLimiting.maxRequests',\n      message: 'Max requests allowed in a one minute',\n      initial: defaultConfig.server.rateLimiting.maxRequests.value\n    },\n    {\n      type: 'number',\n      name: 'rateLimiting.window',\n      message: 'The time window in minutes for rate limiting',\n      initial: defaultConfig.server.rateLimiting.window.value\n    },\n    {\n      type: 'number',\n      name: 'rateLimiting.delay',\n      message: 'The amount to delay each successive request before hitting the max',\n      initial: defaultConfig.server.rateLimiting.delay.value\n    },\n    {\n      type: 'toggle',\n      name: 'rateLimiting.trustProxy',\n      message: 'Set this to true if behind a load balancer',\n      initial: defaultConfig.server.rateLimiting.trustProxy.value\n    },\n    {\n      type: 'text',\n      name: 'rateLimiting.skipKey',\n      message:\n        'Allows bypassing the rate limiter and should be provided with skipToken argument',\n      initial: defaultConfig.server.rateLimiting.skipKey.value\n    },\n    {\n      type: 'text',\n      name: 'rateLimiting.skipToken',\n      message:\n        'Allows bypassing the rate limiter and should be provided with skipKey argument',\n      initial: defaultConfig.server.rateLimiting.skipToken.value\n    }\n  ],\n  pool: [\n    {\n      type: 'number',\n      name: 'initialWorkers',\n      message: 'The number of initial workers to spawn',\n      initial: defaultConfig.pool.initialWorkers.value\n    },\n    {\n      type: 'number',\n      name: 'maxWorkers',\n      message: 'The number of max workers to spawn',\n      initial: defaultConfig.pool.maxWorkers.value\n    },\n    {\n      type: 'number',\n      name: 'workLimit',\n      message:\n        'The pieces of work that can be performed before restarting a puppeteer process',\n      initial: defaultConfig.pool.workLimit.value\n    },\n    {\n      type: 'number',\n      name: 'queueSize',\n      message: 'The size of the request overflow queue',\n      initial: defaultConfig.pool.queueSize.value\n    },\n    {\n      type: 'number',\n      name: 'timeoutThreshold',\n      message: 'The number of seconds before timing out',\n      initial: defaultConfig.pool.timeoutThreshold.value\n    },\n    {\n      type: 'number',\n      name: 'acquireTimeout',\n      message: 'The number of milliseconds to wait for acquiring a resource',\n      initial: defaultConfig.pool.acquireTimeout.value\n    },\n    {\n      type: 'toggle',\n      name: 'reaper',\n      message: 'The reaper to remove hanging processes',\n      initial: defaultConfig.pool.reaper.value\n    },\n    {\n      type: 'toggle',\n      name: 'benchmarking',\n      message: 'Set benchmarking',\n      initial: defaultConfig.pool.benchmarking.value\n    },\n    {\n      type: 'toggle',\n      name: 'listenToProcessExits',\n      message: 'Set to false in order to skip attaching process.exit handlers',\n      initial: defaultConfig.pool.listenToProcessExits.value\n    }\n  ],\n  logging: [\n    {\n      type: 'number',\n      name: 'level',\n      message:\n        'The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose)',\n      initial: defaultConfig.logging.level.value,\n      round: 0,\n      min: 0,\n      max: 4\n    },\n    {\n      type: 'text',\n      name: 'file',\n      message:\n        'A name of a log file. The --logDest also needs to be set to enable file logging',\n      initial: defaultConfig.logging.file.value\n    },\n    {\n      type: 'text',\n      name: 'dest',\n      message: 'A path to log files. It enables file logging',\n      initial: defaultConfig.logging.dest.value\n    }\n  ],\n  ui: [\n    {\n      type: 'toggle',\n      name: 'enable',\n      message: 'Enable UI for the export server',\n      initial: defaultConfig.ui.enable.value\n    },\n    {\n      type: 'text',\n      name: 'route',\n      message: 'A route to attach the UI to',\n      initial: defaultConfig.ui.route.value\n    }\n  ],\n  other: [\n    {\n      type: 'toggle',\n      name: 'noLogo',\n      message:\n        'Skip printing the logo on a startup. Will be replaced by a simple text',\n      initial: defaultConfig.other.noLogo.value\n    }\n  ]\n};\n\n// Argument nesting level of all export server options\nconst nestedArgs = {};\n\n// Map of properties from envs\nconst envVars = [];\n\n/**\n * Builds maps and load env vars.\n *\n * @param {object} obj - The object based on which the initial configuration be\n * made.\n * @param {string } propChain - Required for creating a string chain of\n * properties for nested arguments.\n */\nconst initConfig = (obj, propChain = '') => {\n  const toBoolean = (item) =>\n    ['false', 'undefined', 'null', 'NaN', '0', ''].includes(item)\n      ? false\n      : !!item;\n\n  Object.keys(obj).forEach((k) => {\n    if (!['puppeteer', 'highcharts'].includes(k)) {\n      const entry = obj[k];\n      let numEnvVal;\n\n      if (typeof entry.value === 'undefined') {\n        initConfig(entry, `${propChain}.${k}`);\n      } else {\n        if (entry.envLink) {\n          // Load the env var\n          if (entry.type === 'boolean') {\n            entry.value = toBoolean(\n              [process.env[entry.envLink], entry.value].find(\n                (el) => el || el === 'false'\n              )\n            );\n          } else if (entry.type === 'number') {\n            numEnvVal = +process.env[entry.envLink];\n            entry.value = numEnvVal >= 0 ? numEnvVal : entry.value;\n          } else if (\n            entry.type.indexOf(']') >= 0 &&\n            process.env[entry.envLink]\n          ) {\n            entry.value = process.env[entry.envLink].split(',');\n          } else {\n            entry.value = process.env[entry.envLink] || entry.value;\n          }\n\n          // Add to list of env vars\n          envVars.push({\n            name: entry.envLink,\n            description: entry.description,\n            type: entry.type\n          });\n        }\n\n        // Create the chain of nested arguments\n        nestedArgs[entry.cliName || k] = `${propChain}.${k}`.substring(1);\n      }\n    }\n  });\n};\n\ninitConfig(defaultConfig);\n\nexport default {\n  defaultConfig,\n  promptsConfig,\n  envVars,\n  nestedArgs\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { appendFile, existsSync, mkdirSync } from 'fs';\n\nimport { defaultConfig } from './schemas/config.js';\n\n// The default logging config\nlet logging = {\n  // Flags for logging status\n  toConsole: true,\n  toFile: false,\n  pathCreated: false,\n  // Log levels\n  levelsDesc: [\n    {\n      title: 'error',\n      color: 'red'\n    },\n    {\n      title: 'warning',\n      color: 'yellow'\n    },\n    {\n      title: 'notice',\n      color: 'blue'\n    },\n    {\n      title: 'verbose',\n      color: 'gray'\n    }\n  ],\n  // Log listeners\n  listeners: []\n};\n\n// Gather init logging options\nfor (const [key, option] of Object.entries(defaultConfig.logging)) {\n  logging[key] = option.value;\n}\n\n/**\n * Logs a message. Accepts a variable amount of arguments. Arguments after\n * `level` will be passed directly to console.log, and/or will be joined\n * and appended to the log file.\n *\n * @param {any} args - An array of arguments where the first is the log level\n * and the rest are strings to build a message with.\n */\nexport const log = (...args) => {\n  const [newLevel, ...texts] = args;\n\n  // Current logging options\n  const { level, levelsDesc } = logging;\n\n  // Check if log level is within a correct range\n  if (newLevel === 0 || newLevel > level || level > levelsDesc.length) {\n    return;\n  }\n\n  // Get rid of the GMT text information\n  const newDate = new Date().toString().split('(')[0].trim();\n\n  // Create a message's prefix\n  const prefix = `${newDate} [${levelsDesc[newLevel - 1].title}] -`;\n\n  // Call available log listeners\n  logging.listeners.forEach((fn) => {\n    fn(prefix, texts.join(' '));\n  });\n\n  // Log to file\n  if (logging.toFile) {\n    if (!logging.pathCreated) {\n      // Create if does not exist\n      !existsSync(logging.dest) && mkdirSync(logging.dest);\n\n      // We now assume the path is available, e.g. it's the responsibility\n      // of the user to create the path with the correct access rights.\n      logging.pathCreated = true;\n    }\n\n    // Add the content to a file\n    appendFile(\n      `${logging.dest}${logging.file}`,\n      [prefix].concat(texts).join(' ') + '\\n',\n      (error) => {\n        if (error) {\n          console.log(`[logger] Unable to write to log file: ${error}`);\n          logging.toFile = false;\n        }\n      }\n    );\n  }\n\n  // Log to console\n  if (logging.toConsole) {\n    console.log.apply(\n      undefined,\n      [prefix.toString()[logging.levelsDesc[newLevel - 1].color]].concat(texts)\n    );\n  }\n};\n\n/**\n * Sets the file logging configuration.\n *\n * @param {string} logDest - A path to log to.\n * @param {string} logFile - The name of the log file.\n */\nexport const enableFileLogging = (logDest, logFile) => {\n  // Update logging options\n  logging = {\n    ...logging,\n    dest: logDest || logging.dest,\n    file: logFile || logging.file,\n    toFile: true\n  };\n\n  if (logging.dest.length === 0) {\n    return log(1, '[logger] File logging init: no path supplied.');\n  }\n\n  if (!logging.dest.endsWith('/')) {\n    logging.dest += '/';\n  }\n};\n\n/**\n * Adds a log listener.\n *\n * @param {function} fn - The function to call when getting a log event.\n */\nexport const listen = (fn) => {\n  logging.listeners.push(fn);\n};\n\n/**\n * Sets the current log level. Log levels are:\n * - 0 = no logging\n * - 1 = error\n * - 2 = warning\n * - 3 = notice\n * - 4 = verbose\n *\n * @param {number} newLevel - The new log level (0 - 4).\n */\nexport const setLogLevel = (newLevel) => {\n  if (newLevel >= 0 && newLevel <= logging.levelsDesc.length) {\n    logging.level = newLevel;\n  }\n};\n\n/**\n * Enables or disables logging to the stdout.\n *\n * @param {boolean} enabled - Whether log to console or not.\n */\nexport const toggleSTDOut = (enabled) => {\n  logging.toConsole = enabled;\n};\n\nexport default {\n  log,\n  enableFileLogging,\n  listen,\n  setLogLevel,\n  toggleSTDOut\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { readFileSync } from 'fs';\nimport { fileURLToPath } from 'url';\n\nimport { log } from './logger.js';\n\nconst MAX_BACKOFF_ATTEMPTS = 6;\n\nexport const __dirname = fileURLToPath(new URL('../.', import.meta.url));\n\n/**\n * Clears text from whitespaces with a regex rule.\n *\n * @param {string} rule - The rule for clearing a string, default to /\\s\\s+/g.\n * @return {string} - Cleared text.\n */\nexport const clearText = (text, rule = /\\s\\s+/g, replacer = ' ') =>\n  text.replaceAll(rule, replacer).trim();\n\n/**\n * Delays calling the function by time calculated based on the backoff\n * algorithm.\n *\n * @param {function} fn - A function to try to call with the backoff algorithm\n * on.\n * @param {number} attempt - The number of an attempt, where the first one is 0.\n */\nexport const expBackoff = async (fn, attempt = 0, ...args) => {\n  try {\n    // Try to call the function\n    return await fn(...args);\n  } catch (error) {\n    // Calculate delay in ms\n    const delayInMs = 2 ** attempt * 1000;\n\n    // If the attempt exceeds the maximum attempts of reapeat, throw an error\n    if (++attempt >= MAX_BACKOFF_ATTEMPTS) {\n      throw error;\n    }\n\n    // Wait given amount of time\n    await new Promise((response) => setTimeout(response, delayInMs));\n    log(\n      3,\n      `[pool] Waited ${delayInMs}ms until next call for the resource id: ${args[0]}.`\n    );\n\n    // Try again\n    return expBackoff(fn, attempt, ...args);\n  }\n};\n\n/**\n * Fixes to supported type format if MIME.\n *\n * @param {string} type - Type to be corrected.\n * @param {string} outfile - Name of the outfile.\n */\nexport const fixType = (type, outfile) => {\n  // MIME types\n  const mimeTypes = {\n    'image/png': 'png',\n    'image/jpeg': 'jpeg',\n    'application/pdf': 'pdf',\n    'image/svg+xml': 'svg'\n  };\n\n  // Formats\n  const formats = ['png', 'jpeg', 'pdf', 'svg'];\n\n  // Check if type and outfile's extensions are the same\n  if (outfile) {\n    const outType = outfile.split('.').pop();\n\n    // Check if extension has a correct type\n    if (formats.includes(outType) && type !== outType) {\n      type = outType;\n    }\n  }\n\n  // Return a correct type\n  return mimeTypes[type] || formats.find((t) => t === type) || 'png';\n};\n\n/**\n * Handles the provided resources.\n *\n * @param {string} resources - The stringified resources.\n * @param {string} allowFileResources - Decide if resources from file are\n * allowed.\n */\nexport const handleResources = (resources = false, allowFileResources) => {\n  const allowedProps = ['js', 'css', 'files'];\n\n  let handledResources = resources;\n  let correctResources = false;\n\n  // Try to load resources from a file\n  if (allowFileResources && resources.endsWith('.json')) {\n    try {\n      if (!resources) {\n        handledResources = isCorrectJSON(\n          readFileSync('resources.json', 'utf8')\n        );\n      } else if (resources && resources.endsWith('.json')) {\n        handledResources = isCorrectJSON(readFileSync(resources, 'utf8'));\n      } else {\n        handledResources = isCorrectJSON(resources);\n        if (handledResources === true) {\n          handledResources = isCorrectJSON(\n            readFileSync('resources.json', 'utf8')\n          );\n        }\n      }\n    } catch (notice) {\n      return log(3, `[cli] No resources found.`);\n    }\n  } else {\n    // Try to get JSON\n    handledResources = isCorrectJSON(resources);\n\n    // Get rid of the files section\n    if (!allowFileResources) {\n      delete handledResources.files;\n    }\n  }\n\n  // Filter from unnecessary properties\n  for (const propName in handledResources) {\n    if (!allowedProps.includes(propName)) {\n      delete handledResources[propName];\n    } else if (!correctResources) {\n      correctResources = true;\n    }\n  }\n\n  // Check if at least one of allowed properties is present\n  if (!correctResources) {\n    return log(3, `[cli] No resources found.`);\n  }\n\n  // Handle files section\n  if (handledResources.files) {\n    handledResources.files = handledResources.files.map((item) => item.trim());\n    if (!handledResources.files || handledResources.files.length <= 0) {\n      delete handledResources.files;\n    }\n  }\n\n  // Return resources\n  return handledResources;\n};\n\n/**\n * Checks if provided data is or can be a correct JSON.\n *\n * @param {any} data - Data to be checked.\n * @param {boolean} toString - If true, return stringified representation.\n */\nexport function isCorrectJSON(data, toString) {\n  try {\n    // Get the string representation if not already before parsing\n    const parsedData = JSON.parse(\n      typeof data !== 'string' ? JSON.stringify(data) : data\n    );\n\n    // Return a stringified representation of a JSON if required\n    if (typeof parsedData !== 'string' && toString) {\n      return JSON.stringify(parsedData);\n    }\n\n    // Return a JSON\n    return parsedData;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Checks if item is an object.\n *\n * @param {any} item - Item to be checked.\n */\nexport const isObject = (item) =>\n  typeof item === 'object' && !Array.isArray(item) && item !== null;\n\n/**\n * Checks if string contains private range urls.\n *\n * @export utils\n * @param item {string} item to be checked\n */\nexport const isPrivateRangeUrlFound = (item) => {\n  return [\n    'localhost',\n    '(10).(.*).(.*).(.*)',\n    '(127).(.*).(.*).(.*)',\n    '(172).(1[6-9]|2[0-9]|3[0-1]).(.*).(.*)',\n    '(192).(168).(.*).(.*)'\n  ].some((ipRegEx) =>\n    item.match(`xlink:href=\"(?:(http://|https://))?${ipRegEx}`)\n  );\n};\n\n/**\n * Maps the old options to the new config structure.\n *\n * @param {object} oldOptions - Options to be mapped.\n */\nexport const mapToNewConfig = async (oldOptions) => {\n  const newOptions = {};\n  const { default: defaultSchemaConfig } = await import('./schemas/config.js');\n  const nestedArgs = defaultSchemaConfig.nestedArgs;\n\n  // Cycle through old-structured options\n  for (const [key, value] of Object.entries(oldOptions)) {\n    const propertiesChain = nestedArgs[key] ? nestedArgs[key].split('.') : [];\n\n    // Populate object in correct properties levels\n    propertiesChain.reduce(\n      (obj, prop, index) =>\n        (obj[prop] =\n          propertiesChain.length - 1 === index ? value : obj[prop] || {}),\n      newOptions\n    );\n  }\n  return newOptions;\n};\n\n/**\n * Creates and returns a deep copy of the given object.\n *\n * @param {object} object - Object to copy.\n * @return {object} - Deep copy of the object.\n */\nexport const deepCopy = (obj) => {\n  if (obj === null || typeof obj !== 'object') {\n    return obj;\n  }\n\n  const copy = Array.isArray(obj) ? [] : {};\n\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      copy[key] = deepCopy(obj[key]);\n    }\n  }\n\n  return copy;\n}\n\n/**\n * Merges the new options to the options object. It omits undefined values.\n *\n * @param {object} options - Old options.\n * @param {object} newOptions - New options.\n * @param {string[]} absoluteProps - Array of object names that should be force\n * merged.\n */\nexport const mergeConfigOptions = (options, newOptions, absoluteProps = []) => {\n  const mergedOptions = deepCopy(options);\n\n  for (const [key, value] of Object.entries(newOptions)) {\n    mergedOptions[key] =\n      isObject(value) &&\n      !absoluteProps.includes(key) &&\n      mergedOptions[key] !== undefined\n        ? mergeConfigOptions(mergedOptions[key], value, absoluteProps)\n        : value !== undefined\n        ? value\n        : mergedOptions[key];\n  }\n\n  return mergedOptions;\n};\n\n/**\n * Stringifies object with options. Possible to preserve functions with\n * allowFunctions flag.\n *\n * @param {object} options - Options to stringify.\n * @param {boolean} allowFunctions - Flag for keeping functions.\n */\nexport const optionsStringify = (options, allowFunctions) => {\n  const replacerCallback = (name, value) => {\n    if (typeof value === 'string') {\n      value = value.trim();\n\n      // If allowFunctions is set to true, preserve functions\n      if (\n        (value.startsWith('function(') || value.startsWith('function (')) &&\n        value.endsWith('}')\n      ) {\n        value = allowFunctions\n          ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\n          : undefined;\n      }\n    }\n\n    return typeof value === 'function'\n      ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\n      : value;\n  };\n\n  // Stringify options and if required, replace special functions marks\n  return JSON.stringify(options, replacerCallback).replaceAll(\n    /\"EXP_FUN|EXP_FUN\"/g,\n    ''\n  );\n};\n\n/**\n * Pairs argument with a corresponding value.\n *\n * @param {object} options - All server options.\n * @param {string[]} args - Array of arguments from a user.\n * @param {object} defaultConfig - The default config object.\n */\nexport const pairArgumentValue = async (options, args, defaultConfig) => {\n  const { default: defaultSchemaConfig } = await import('./schemas/config.js');\n  const nestedArgs = defaultSchemaConfig.nestedArgs;\n\n  for (let i = 0; i < args.length; i++) {\n    let option = args[i].replace(/-/g, '');\n\n    // Find the right place for property's value\n    const propertiesChain = nestedArgs[option]\n      ? nestedArgs[option].split('.')\n      : [];\n\n    propertiesChain.reduce((obj, prop, index) => {\n      if (propertiesChain.length - 1 === index) {\n        // Finds an option and set a corresponding value\n        if (typeof obj[prop] !== 'undefined') {\n          if (args[++i]) {\n            obj[prop] = args[i] || obj[prop];\n          } else {\n            console.log(`Missing argument value for ${option}!`.red, '\\n');\n            options = printUsage(defaultConfig);\n          }\n        }\n      }\n      return obj[prop];\n    }, options);\n  }\n\n  return options;\n};\n\n/**\n * Prints the export server logo.\n *\n * @param {boolean} noLogo - Whether to display logo or text.\n */\nexport const printLogo = (noLogo) => {  \n\n  // Get package version either from env or from package.json  \n  const packageVersion = process.env.npm_package_version ||\n    JSON.parse(readFileSync(new URL('../package.json', import.meta.url))).version;\n\n  // Print text only\n  if (noLogo) {\n    console.log(`Starting highcharts export server v${packageVersion}...`);\n    return;\n  }\n\n  // Print the logo\n  console.log(\n    readFileSync(__dirname + '/msg/startup.msg').toString().bold.yellow,\n    `v${packageVersion}`\n  );\n};\n\n/**\n * Prints the CLI usage. If required, it can list properties recursively\n *\n * @param {object} defaultConfig - The default config object.\n */\nexport function printUsage(defaultConfig) {\n  const pad = 48;\n  const readme = 'https://github.com/highcharts/node-export-server#readme';\n\n  // Display readme information\n  console.log(\n    'Usage of CLI arguments:'.bold,\n    '\\n------',\n    `\\nFor more detailed information visit readme at: ${readme.bold.yellow}.`\n  );\n\n  const cycleCategories = (categories) => {\n    for (const [name, option] of Object.entries(categories)) {\n      // If category has more levels, go further\n      if (!Object.prototype.hasOwnProperty.call(option, 'value')) {\n        cycleCategories(option);\n      } else {\n        let descName = `  --${option.cliName || name} ${\n          ('<' + option.type + '>').green\n        } `;\n        if (descName.length < pad) {\n          for (let i = descName.length; i < pad; i++) {\n            descName += '.';\n          }\n        }\n\n        // Display correctly aligned messages\n        console.log(\n          descName,\n          option.description,\n          `[Default: ${option.value.toString().bold}]`.blue\n        );\n      }\n    }\n  };\n\n  // Cycle through options of each categories and display the usage info\n  Object.keys(defaultConfig).forEach((category) => {\n    // Only puppeteer and highcharts categories cannot be configured through CLI\n    if (!['puppeteer', 'highcharts'].includes(category)) {\n      console.log(`\\n${category.toUpperCase()}`.red);\n      cycleCategories(defaultConfig[category]);\n    }\n  });\n  console.log('\\n');\n}\n\n/**\n * Rounds number to passed precision.\n *\n * @param {number} value - Number to round.\n * @param {number} precision - A precision of rounding.\n */\nexport const roundNumber = (value, precision = 1) => {\n  const multiplier = Math.pow(10, precision || 0);\n  return Math.round(+value * multiplier) / multiplier;\n};\n\n/**\n * Casts the item to boolean.\n *\n * @param {any} item - Item to be cast.\n */\nexport const toBoolean = (item) =>\n  ['false', 'undefined', 'null', 'NaN', '0', ''].includes(item)\n    ? false\n    : !!item;\n\n/**\n * If necessary, places a custom code inside a function.\n *\n * @param {any} customCode - The customCode.\n */\nexport const wrapAround = (customCode, allowFileResources) => {\n  if (customCode && typeof customCode === 'string') {\n    customCode = customCode.trim();\n\n    if (customCode.endsWith('.js')) {\n      return allowFileResources\n        ? wrapAround(readFileSync(customCode, 'utf8'))\n        : false;\n    } else if (\n      customCode.startsWith('function()') ||\n      customCode.startsWith('function ()') ||\n      customCode.startsWith('()=>') ||\n      customCode.startsWith('() =>')\n    ) {\n      return `(${customCode})()`;\n    }\n    return customCode.replace(/;$/, '');\n  }\n};\n\n/**\n * Utility to measure time.\n */\nexport const measureTime = () => {\n  const start = process.hrtime.bigint();\n  return () => Number(process.hrtime.bigint() - start) / 1000000;\n};\n\nexport default {\n  __dirname,\n  clearText,\n  expBackoff,\n  fixType,\n  handleResources,\n  isCorrectJSON,\n  isObject,\n  isPrivateRangeUrlFound,\n  mapToNewConfig,\n  mergeConfigOptions,\n  optionsStringify,\n  pairArgumentValue,\n  printLogo,\n  printUsage,\n  roundNumber,\n  toBoolean,\n  wrapAround,\n  measureTime\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport rateLimit from 'express-rate-limit';\n\nimport { clearText } from '../utils.js';\nimport { log } from '../logger.js';\n\n/**\n * Enables rate limiting for a given app.\n *\n * @param {object} app - The express app.\n * @param {object} limitConfig - The options for the rate limiting.\n */\nexport default (app, limitConfig) => {\n  const msg =\n    'Too many requests, you have been rate limited. Please try again later.';\n\n  // Options for the rate limiter\n  const rateOptions = {\n    max: limitConfig.maxRequests || 30,\n    window: limitConfig.window || 1,\n    delay: limitConfig.delay || 0,\n    trustProxy: limitConfig.trustProxy || false,\n    skipKey: limitConfig.skipKey || false,\n    skipToken: limitConfig.skipToken || false\n  };\n\n  // Set if behind a proxy\n  if (rateOptions.trustProxy) {\n    app.enable('trust proxy');\n  }\n\n  // Create a limiter\n  const limiter = rateLimit({\n    windowMs: rateOptions.window * 60 * 1000,\n    // Limit each IP to 100 requests per windowMs\n    max: rateOptions.max,\n    // Disable delaying, full speed until the max limit is reached\n    delayMs: rateOptions.delay,\n    handler: (request, response) => {\n      response.format({\n        json: () => {\n          response.status(429).send({ message: msg });\n        },\n        default: () => {\n          response.status(429).send(msg);\n        }\n      });\n    },\n    skip: (request) => {\n      // Allow bypassing the limiter if a valid key/token has been sent\n      if (\n        rateOptions.skipKey !== false &&\n        rateOptions.skipToken !== false &&\n        request.query.key === rateOptions.skipKey &&\n        request.query.access_token === rateOptions.skipToken\n      ) {\n        log(4, '[rate-limiting] Skipping rate limiter.');\n        return true;\n      }\n      return false;\n    }\n  });\n\n  // Use a limiter as a middleware\n  app.use(limiter);\n\n  log(\n    3,\n    clearText(\n      `[rate-limiting] Enabled rate limiting: ${rateOptions.max} requests\n      per ${rateOptions.window} minute per IP, trusting proxy:\n      ${rateOptions.trustProxy}.`\n    )\n  );\n};\n","/**\n * This module exports two functions: fetch (for GET requests) and post (for POST requests).\n */\n\nimport http from 'http';\nimport https from 'https';\n\n/**\n * Determines the protocol of the given URL (either `http` or `https`).\n *\n * @function\n * @param {string} url - The URL whose protocol needs to be determined.\n * @returns {Object} Returns the `https` module if the URL starts with 'https',\n * otherwise returns the `http` module.\n * @private\n *\n * @example\n *\n * const protocol = getProtocol('https://example.com');\n * console.log(protocol); // Outputs the 'https' module\n */\nconst getProtocol = (url) => {\n  return url.startsWith('https') ? https : http;\n}\n\n/**\n * Sends a GET request to the specified URL with optional request options.\n *\n * @function\n * @async\n * @param {string} url - The URL to fetch.\n * @param {Object} [requestOptions={}] - Optional request options and headers.\n * @returns {Promise<Object>} Returns a promise that resolves with the response object.\n * The response object contains a `.text` property with the raw response data.\n * @throws {Error} Throws an error if the request fails or if no data is fetched from the URL.\n *\n * @example\n *\n * async function getData() {\n *   try {\n *     const response = await fetch('https://api.example.com/data');\n *     console.log(response.text);\n *   } catch (error) {\n *     console.error('Error fetching data:', error);\n *   }\n * }\n *\n * getData();\n */\nasync function fetch(url, requestOptions = {}) {\n  return new Promise((resolve, reject) => {\n    const protocol = getProtocol(url);\n\n    protocol.get(url, requestOptions, (res) => {\n      let data = '';\n\n      // A chunk of data has been received.\n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n\n      // The whole response has been received.\n      res.on('end', () => {\n        if (!data) {\n          reject('Nothing was fetched from the URL.');\n        }\n\n        res.text = data;\n        resolve(res);\n      });\n\n    }).on('error', (error) => {\n      reject(error);\n    });\n  });\n}\n\n/**\n * Sends a POST request to the specified URL with the given body and request options.\n *\n * @function\n * @async\n * @param {string} url - The URL to which the request should be sent.\n * @param {Object} [body={}] - The data to be sent as the request body, in JSON format.\n * @param {Object} [requestOptions={}] - Optional request options and headers.\n * @returns {Promise<Object>} - Returns a promise that resolves with the parsed JSON response.\n * @throws {Error} Throws an error if the request fails or if the response cannot be parsed.\n *\n * @example\n *\n * async function sendData() {\n *   const dataToSend = {\n *     key1: 'value1',\n *     key2: 'value2',\n *   };\n *   try {\n *     const response = await post('https://api.example.com/data', dataToSend);\n *     console.log(response);\n *   } catch (error) {\n *     console.error('Error sending data:', error);\n *   }\n * }\n *\n * sendData();\n */\nasync function post(url, body = {}, requestOptions = {}) {\n  return new Promise((resolve, reject) => {\n    const protocol = getProtocol(url);\n    const data = JSON.stringify(body);\n\n    // Set default headers and merge with requestOptions\n    const options = Object.assign({\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Content-Length': data.length,\n      },\n    }, requestOptions);\n\n    const req = protocol.request(url, options, (res) => {\n      let responseData = '';\n\n      // A chunk of data has been received.\n      res.on('data', (chunk) => {\n        responseData += chunk;\n      });\n\n      // The whole response has been received.\n      res.on('end', () => {\n        try {\n          res.text = responseData;\n          resolve(res);\n        } catch (error) {\n          reject(error);\n        }\n      });\n\n    }).on('error', (error) => {\n      reject(error);\n    });\n\n    // Write the request body and end the request.\n    req.write(data);\n    req.end();\n  });\n}\n\nexport default fetch;\nexport { fetch, post };","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\n// The cache manager manages the Highcharts library and its dependencies.\n// The cache itself is stored in .cache, and is checked by the config system\n// before starting the service\n\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';\nimport { join } from 'path';\n\nimport dotenv from 'dotenv';\nimport HttpsProxyAgent from 'https-proxy-agent';\nimport fetch from './fetch.js';\n\nimport { log } from './logger.js';\nimport { __dirname } from '../lib/utils.js';\n\ndotenv.config();\n\nconst cachePath = join(__dirname, '.cache');\n\nconst cache = {\n  cdnURL: 'https://code.highcharts.com/',\n  activeManifest: {},\n  sources: '',\n  hcVersion: ''\n};\n\n// TODO: The config should be accesssible globally so we don't have to do this sort of thing..\nlet appliedConfig = false;\n\n/**\n * Extracts the Highcharts version from the cache\n */\nconst extractVersion = () =>\n  (cache.hcVersion = cache.sources\n    .substr(0, cache.sources.indexOf('*/'))\n    .replace('/*', '')\n    .replace('*/', '')\n    .replace(/\\n/g, '')\n    .trim());\n\n/**\n * Saves the Highcharts part of a config to a manifest file in the cache\n *\n * @param {object} config - Highcarts related configuration object.\n * @param {object} fetchedModules - An object that contains mapped names of\n * fetched Highcharts modules to use.\n */\nconst saveConfigToManifest = async (config, fetchedModules) => {\n  const newManifest = {\n    version: config.version,\n    modules: fetchedModules || {}\n  };\n\n  // Update cache object with the current modules\n  cache.activeManifest = newManifest;\n\n  log(4, '[cache] writing new manifest');\n\n  try {\n    writeFileSync(\n      join(cachePath, 'manifest.json'),\n      JSON.stringify(newManifest),\n      'utf8'\n    );\n  } catch (error) {\n    log(1, `[cache] Error writing cache manifest: ${error}.`);\n  }\n};\n\n/**\n * Fetches a single script.\n *\n * @param {string} script - A path to script to get.\n * @param {object} proxyAgent - The proxy agent to use for a request.\n */\nconst fetchScript = async (script, proxyAgent) => {\n  try {\n    // Get rid of the .js from the custom strings\n    if (script.endsWith('.js')) {\n        script = script.substring(0, script.length - 3);\n    }\n\n    log(4, `[cache] Fetching script - ${script}.js`);\n\n    // If exists, add proxy agent to request options\n    const requestOptions = proxyAgent\n      ? {\n          agent: proxyAgent,\n          timeout: +process.env['PROXY_SERVER_TIMEOUT'] || 5000\n        }\n      : {};\n\n    // Fetch the script\n    const response = await fetch(`${script}.js`, requestOptions);\n\n    // If OK, return its text representation\n    if (response.statusCode === 200) {\n      return response.text;\n    }\n\n    throw `${response.statusCode}`;\n  } catch (error) {\n    log(1, `[cache] Error fetching script ${script}.js: ${error}.`);\n    throw error;\n  }\n};\n\n/**\n * Updates the Highcharts cache.\n *\n * @param {object} config - Highcarts related configuration object.\n * @param {string} sourcePath - A path to the file where save updated sources.\n * @return {object} An object that contains mapped names of fetched Highcharts\n * modules to use.\n */\nconst updateCache = async (config, sourcePath) => {\n  const { coreScripts, modules, indicators, scripts: customScripts } = config;\n  const hcVersion =\n    config.version === 'latest' || !config.version ? '' : `${config.version}/`;\n\n  log(3, '[cache] Updating cache to Highcharts ', hcVersion);\n\n  // Gather all scripts to fetch\n  const allScripts = [\n    ...coreScripts.map((c) => `${hcVersion}${c}`),\n    ...modules.map((m) =>\n      m === 'map' ? `maps/${hcVersion}modules/${m}` : `${hcVersion}modules/${m}`\n    ),\n    ...indicators.map((i) => `stock/${hcVersion}indicators/${i}`)\n  ];\n\n  // Configure proxy if exists\n  let proxyAgent;\n  const proxyHost = process.env['PROXY_SERVER_HOST'];\n  const proxyPort = process.env['PROXY_SERVER_PORT'];\n\n  if (proxyHost && proxyPort) {\n    proxyAgent = new HttpsProxyAgent({\n      host: proxyHost,\n      port: +proxyPort\n    });\n  }\n\n  const fetchedModules = {};\n  try {\n    cache.sources = // TODO: convert to for loop\n      (\n        await Promise.all([\n          ...allScripts.map(async (script) => {\n            const text = await fetchScript(\n              `${config.cdnURL || cache.cdnURL}${script}`,\n              proxyAgent\n            );\n\n            // If fetched correctly, set it\n            if (typeof text === 'string') {\n              fetchedModules[\n                script.replace(\n                  /(.*)\\/|(.*)modules\\/|stock\\/(.*)indicators\\/|maps\\/(.*)modules\\//gi,\n                  ''\n                )\n              ] = 1;\n            }\n\n            return text;\n          }),\n          ...customScripts.map((script) => fetchScript(script, proxyAgent))\n        ])\n      ).join(';\\n');\n    extractVersion();\n\n    // Save the fetched modules into caches' source JSON\n    writeFileSync(sourcePath, cache.sources);\n    return fetchedModules;\n  } catch (error) {\n    log(1, '[cache] Unable to update local Highcharts cache.');\n  }\n};\n\nexport const updateVersion = async (newVersion) =>\n  appliedConfig\n    ? await checkCache(\n        Object.assign(appliedConfig, {\n          version: newVersion\n        })\n      )\n    : false;\n\n/**\n * Fetches any missing Highcharts and dependencies\n *\n * @param {object} config - Highcarts related configuration object.\n */\nexport const checkCache = async (config) => {\n  let fetchedModules;\n  // Prepare paths to manifest and sources from the .cache folder\n  const manifestPath = join(cachePath, 'manifest.json');\n  const sourcePath = join(cachePath, 'sources.js');\n\n  // TODO: deal with trying to switch to the running version\n  // const activeVersion = appliedConfig ? appliedConfig.version : false;\n\n  appliedConfig = config;\n\n  // Create the .cache destination if it doesn't exist already\n  !existsSync(cachePath) && mkdirSync(cachePath);\n\n  // Load the .cache manifest\n  if (existsSync(manifestPath)) {\n    let requestUpdate = false;\n\n    // Read the manifest JSON\n    const manifest = JSON.parse(readFileSync(manifestPath));\n\n    // Check if the modules is an array, if so, we rewrite it to a map to make\n    // it easier to resolve modules.\n    if (manifest.modules && Array.isArray(manifest.modules)) {\n      const moduleMap = {};\n      manifest.modules.forEach((m) => (moduleMap[m] = 1));\n      manifest.modules = moduleMap;\n    }\n\n    const { modules, coreScripts, indicators } = config;\n    const numberOfModules =\n      modules.length + coreScripts.length + indicators.length;\n\n    // Compare the loaded config with the contents in .cache.\n    // If there are changes, fetch requested modules and products,\n    // and bake them into a giant blob. Save the blob.\n    if (manifest.version !== config.version) {\n      log(3, '[cache] Highcharts version mismatch in cache, need to re-fetch.');\n      requestUpdate = true;\n    } else if (Object.keys(manifest.modules || {}).length !== numberOfModules) {\n      log(\n        3,\n        '[cache] Cache and requested modules does not match, need to re-fetch.'\n      );\n      requestUpdate = true;\n    } else {\n      // Check each module, if anything is missing refetch everything\n      requestUpdate = (config.modules || []).some((moduleName) => {\n        if (!manifest.modules[moduleName]) {\n          log(\n            3,\n            `[cache] The ${moduleName} missing in cache, need to re-fetch.`\n          );\n          return true;\n        }\n      });\n    }\n\n    if (requestUpdate) {\n      fetchedModules = await updateCache(config, sourcePath);\n    } else {\n      log(3, '[cache] Dependency cache is up to date, proceeding.');\n\n      // Load the sources\n      cache.sources = readFileSync(sourcePath, 'utf8');\n\n      // Get current modules map\n      fetchedModules = manifest.modules;\n      extractVersion();\n    }\n  } else {\n    // So we don't have one yet, which means we need to fetch everything\n    log(3, '[cache] Fetching and caching Highcharts dependencies.');\n    fetchedModules = await updateCache(config, sourcePath);\n  }\n\n  // Finally, save the new manifest, which is basically our current config\n  // in a slightly different format\n  await saveConfigToManifest(config, fetchedModules);\n};\n\nexport default {\n  checkCache,\n  updateVersion,\n  getCache: () => cache,\n  highcharts: () => cache.sources,\n  version: () => cache.hcVersion\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport puppeteer from 'puppeteer';\nimport fs from 'fs';\nimport * as url from 'url';\nimport { log } from './logger.js';\nimport path from 'node:path';\n\n// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1463328\n// Not ideal - leaves trash in the FS\nimport { randomBytes } from 'node:crypto';\nconst RANDOM_PID = randomBytes(64).toString('base64url');\nconst PUPPETEER_DIR = path.join('tmp', `puppeteer-${RANDOM_PID}`);\nconst DATA_DIR = path.join(PUPPETEER_DIR, 'profile');\n\n// The minimal args to speed up the browser\nconst minimalArgs = [\n  `--user-data-dir=${DATA_DIR}`,\n  '--autoplay-policy=user-gesture-required',\n  '--disable-background-networking',\n  '--disable-background-timer-throttling',\n  '--disable-backgrounding-occluded-windows',\n  '--disable-breakpad',\n  '--disable-client-side-phishing-detection',\n  '--disable-component-update',\n  '--disable-default-apps',\n  '--disable-dev-shm-usage',\n  '--disable-domain-reliability',\n  '--disable-extensions',\n  '--disable-features=AudioServiceOutOfProcess',\n  '--disable-hang-monitor',\n  '--disable-ipc-flooding-protection',\n  '--disable-notifications',\n  '--disable-offer-store-unmasked-wallet-cards',\n  '--disable-popup-blocking',\n  '--disable-print-preview',\n  '--disable-prompt-on-repost',\n  '--disable-renderer-backgrounding',\n  '--disable-session-crashed-bubble',\n  '--disable-setuid-sandbox',\n  '--disable-speech-api',\n  '--disable-sync',\n  '--hide-crash-restore-bubble',\n  '--hide-scrollbars',\n  '--ignore-gpu-blacklist',\n  '--metrics-recording-only',\n  '--mute-audio',\n  '--no-default-browser-check',\n  '--no-first-run',\n  '--no-pings',\n  '--no-sandbox',\n  '--no-zygote',\n  '--password-store=basic',\n  '--use-mock-keychain'\n];\n\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\n\nconst template = fs.readFileSync(\n  __dirname + '/../templates/template.html',\n  'utf8'\n);\n\nlet browser;\n\nexport const newPage = async () => {\n  if (!browser) return false;\n\n  const p = await browser.newPage();\n\n  await p.setContent(template);\n  await p.addScriptTag({ path: __dirname + '/../.cache/sources.js' });\n  // eslint-disable-next-line no-undef\n  await p.evaluate(() => window.setupHighcharts());\n\n  p.on('pageerror', async (err) => {\n    // TODO: Consider adding a switch here that turns on log(0) logging\n    // on page errors.\n    log(1, '[page error]', err);\n    await p.$eval(\n      '#container',\n      (element, errorMessage) => {\n        // eslint-disable-next-line no-undef\n        if (window._displayErrors) {\n          element.innerHTML = errorMessage;\n        }\n      },\n      `<h1>Chart input data error</h1>${err.toString()}`\n    );\n  });\n\n  return p;\n};\n\nexport const create = async (puppeteerArgs) => {\n  const allArgs = [...minimalArgs, ...(puppeteerArgs || [])];\n\n  // Create a browser\n  if (!browser) {\n    let tryCount = 0;\n\n    const open = async () => {\n      try {\n        log(\n          3,\n          '[browser] attempting to get a browser instance (try',\n          tryCount + ')'\n        );\n\n        browser = await puppeteer.launch({\n          headless: 'new',\n          args: allArgs,\n          userDataDir: './tmp/'\n        });\n      } catch (e) {\n        log(0, '[browser]', e);\n        if (++tryCount < 25) {\n          log(3, '[browser] failed:', e);\n          await new Promise((response) => setTimeout(response, 4000));\n          await open();\n        } else {\n          log(0, 'Max retries reached');\n        }\n      }\n    };\n\n    try {\n      await open();\n    } catch (e) {\n      log(0, '[browser] Unable to open browser');\n      return false;\n    }\n\n    if (!browser) {\n      log(0, '[browser] Unable to open browser');\n      return false;\n    }\n  }\n\n  // Return a browser promise\n  return browser;\n};\n\nexport const get = async () => {\n  if (!browser) {\n    throw 'no valid browser has been created';\n  }\n\n  return browser;\n};\n\nexport const close = async () => {\n  return await browser.close();\n};\n\nexport default {\n  get,\n  close,\n  newPage\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\n// TODO: remove this temp benchmark stuff. I had this idea of doing a general benchmarking\n// system, but it adds so much bloat in the code that it shouldn't be there.\n\nimport benchmark from './benchmark.js';\nimport cache from './cache.js';\nimport { log } from './logger.js';\nimport svgTemplate from './../templates/svg_export/svg_export.js';\n\nimport { readFileSync } from 'fs';\nimport path from 'path';\nimport * as url from 'url';\n\nconst __basedir = url.fileURLToPath(new URL('.', import.meta.url));\n\n// const jsonTemplate = require('./../templates/json_export/json_export.js');\n\n/**\n * Gets the clip region for the chart DOM node.\n *\n * @param {object} page - A page of a browser instance.\n * @return {object} - A clipped region.\n */\nconst getClipRegion = (page) =>\n  page.$eval('#chart-container', (element) => {\n    const { x, y, width, height } = element.getBoundingClientRect();\n    return {\n      x,\n      y,\n      width,\n      height: Math.trunc(height > 1 ? height : 500)\n    };\n  });\n\n/**\n * Rasterizes the page to an image (PNG or JPEG)\n *\n * @param {object} page - A page of a browser instance.\n * @param {string} type - The type of a result image.\n * @param {string} encoding - The type of encoding used.\n * @param {string} clip - The clip region.\n * @returns {string} - A string representation of a screenshot.\n */\nconst createImage = async (page, type, encoding, clip) =>\n  await Promise.race([\n    page.screenshot({\n      type,\n      encoding,\n      clip\n    }),\n    new Promise((resolve, reject) =>\n      setTimeout(() => reject(new Error('Rasterization timeout')), 1500)\n    )\n  ]);\n\n/**\n * Turns page into a PDF.\n *\n * @param {object} page - A page of a browser instance.\n * @param {number} height - The height of a chart.\n * @param {number} width - The width of a chart.\n * @param {string} encoding - The type of encoding used.\n * @return {object} - A buffer with PDF representation.\n */\nconst createPDF = async (page, height, width, encoding) =>\n  await page.pdf({\n    // This will remove an extra empty page in PDF exports\n    height: height + 1,\n    width,\n    encoding\n  });\n\n/**\n * Exports as a SVG.\n *\n * @param {object} page - A page of a browser instance.\n * @return {object} - The outerHTML element with the SVG representation.\n */\nconst createSVG = async (page) =>\n  await page.$eval(\n    '#container svg:first-of-type',\n    (element) => element.outerHTML\n  );\n\n/** Load config into a page and render a chart */\nconst setAsConfig = async (page, chart, options) =>\n  await page.evaluate(\n    // eslint-disable-next-line no-undef\n    (chart, options) => window.triggerExport(chart, options),\n    chart,\n    options\n  );\n\n/** Load SVG into a page */\n// const setAsSVG = async (page, svgStr) => true;\n\n/**\n * Does an export for a given browser.\n *\n * @param {object} browser - A browser instance.\n * @param {object} chart - Chart's options.\n * @param {object} options - All options object.\n * @return {object} - The data returned from one of the methods for exporting\n * a specific type of an image.\n */\nexport default async (page, chart, options) => {\n  /**\n   * Keeps track of all resources added on the page with addXXXTag. etc\n   * It's VITAL that all added resources ends up here so we can clear things\n   * out when doing a new export in the same page!\n   */\n  const injectedResources = [];\n\n  /** Clear out all state set on the page with addScriptTag/addStyleTag. */\n  const clearInjected = async (page) => {\n    for (const res of injectedResources) {\n      await res.dispose();\n    }\n\n    // Reset all CSS and script tags\n    await page.evaluate(() => {\n      ///\n      // // eslint-disable-next-line no-undef\n      // Highcharts.setOptionsObj = {};\n      ///\n      // eslint-disable-next-line no-undef\n      const [, ...scriptsToRemove] = document.getElementsByTagName('script');\n      // eslint-disable-next-line no-undef\n      const [, ...stylesToRemove] = document.getElementsByTagName('style');\n      // eslint-disable-next-line no-undef\n      const [...linksToRemove] = document.getElementsByTagName('link');\n\n      // Remove tags\n      for (const element of [\n        ...scriptsToRemove,\n        ...stylesToRemove,\n        ...linksToRemove\n      ]) {\n        element.remove();\n      }\n    });\n  };\n\n  try {\n    const exportBench = benchmark('Puppeteer');\n\n    log(4, '[export] Determining export path.');\n\n    const exportOptions = options.export;\n\n    // Force a rAF\n    // See https://github.com/puppeteer/puppeteer/issues/7507\n    // eslint-disable-next-line no-undef\n    await page.evaluate(() => requestAnimationFrame(() => {}));\n\n    // Decide whether display error or debbuger wrapper around it\n    const displayErrors =\n      exportOptions?.options?.chart?.displayErrors &&\n      cache.getCache().activeManifest.modules.debugger;\n\n    // eslint-disable-next-line no-undef\n    await page.evaluate((d) => (window._displayErrors = d), displayErrors);\n\n    const svgBench = benchmark('SVG handling');\n\n    let isSVG;\n\n    if (\n      chart.indexOf &&\n      (chart.indexOf('<svg') >= 0 || chart.indexOf('<?xml') >= 0)\n    ) {\n      // SVG INPUT HANDLING\n\n      log(4, '[export] Treating as SVG.');\n\n      // If input is also svg, just return it\n      if (exportOptions.type === 'svg') {\n        return chart;\n      }\n\n      isSVG = true;\n      const setPageBench = benchmark('Setting content');\n      await page.setContent(svgTemplate(chart));\n      setPageBench();\n    } else {\n      // JSON Config handling\n\n      log(4, '[export] Treating as config.');\n\n      // Need to perform straight inject\n      if (exportOptions.strInj) {\n        // Injection based configuration export\n        const setPageBench = benchmark('Setting page content (inject)');\n\n        await setAsConfig(\n          page,\n          {\n            chart: {\n              height: exportOptions.height,\n              width: exportOptions.width\n            }\n          },\n          options\n        );\n\n        setPageBench();\n      } else {\n        // Basic configuration export\n\n        chart.chart.height = exportOptions.height;\n        chart.chart.width = exportOptions.width;\n\n        const setContentBench = benchmark('Setting page content (config)');\n        await setAsConfig(page, chart, options);\n        setContentBench();\n      }\n    }\n\n    svgBench();\n    const resBench = benchmark('Applying resources');\n\n    // Use resources\n    const resources = options.customCode.resources;\n    if (resources) {\n      // Load custom JS code\n      if (resources.js) {\n        injectedResources.push(\n          await page.addScriptTag({\n            content: resources.js\n          })\n        );\n      }\n\n      // Load scripts from all custom files\n      if (resources.files) {\n        for (const file of resources.files) {\n          try {\n            const isLocal = !file.startsWith('http') ? true : false;\n\n            // Add each custom script from resources' files\n            injectedResources.push(\n              await page.addScriptTag(\n                isLocal\n                  ? {\n                      content: readFileSync(file, 'utf8')\n                    }\n                  : {\n                      url: file\n                    }\n              )\n            );\n          } catch (notice) {\n            log(4, '[export] JS file not found.');\n          }\n        }\n      }\n\n      const cssBench = benchmark('Loading css');\n\n      // Load CSS\n      if (resources.css) {\n        let cssImports = resources.css.match(/@import\\s*([^;]*);/g);\n        if (cssImports) {\n          // Handle css section\n          for (let cssImportPath of cssImports) {\n            if (cssImportPath) {\n              cssImportPath = cssImportPath\n                .replace('url(', '')\n                .replace('@import', '')\n                .replace(/\"/g, '')\n                .replace(/'/g, '')\n                .replace(/;/, '')\n                .replace(/\\)/g, '')\n                .trim();\n\n              // Add each custom css from resources\n              if (cssImportPath.startsWith('http')) {\n                injectedResources.push(\n                  await page.addStyleTag({\n                    url: cssImportPath\n                  })\n                );\n              } else if (options.customCode.allowFileResources) {\n                injectedResources.push(\n                  await page.addStyleTag({\n                    path: path.join(__basedir, cssImportPath)\n                  })\n                );\n              }\n            }\n          }\n        }\n\n        // The rest of the CSS section will be content by now\n        injectedResources.push(\n          await page.addStyleTag({\n            content: resources.css.replace(/@import\\s*([^;]*);/g, '') || ' '\n          })\n        );\n      }\n\n      cssBench();\n    }\n\n    resBench();\n\n    // Get the real chart size\n    const size = isSVG\n      ? await page.$eval(\n          '#chart-container svg:first-of-type',\n          async (element, scale) => {\n            return {\n              chartHeight: element.height.baseVal.value * scale,\n              chartWidth: element.width.baseVal.value * scale\n            };\n          },\n          parseFloat(exportOptions.scale)\n        )\n      : await page.evaluate(async () => {\n          // eslint-disable-next-line no-undef\n          const { chartHeight, chartWidth } = window.Highcharts.charts[0];\n          return {\n            chartHeight,\n            chartWidth\n          };\n        });\n\n    const vpBench = benchmark('Setting viewport');\n\n    // Set final height and width for viewport\n    const viewportHeight = Math.ceil(size?.chartHeight || exportOptions.height);\n    const viewportWidth = Math.ceil(size?.chartWidth || exportOptions.width);\n\n    // Set the viewport for the first time\n    // NOTE: the call to setViewport is expensive - can we get away with only\n    // calling it once, e.g. moving this one into the isSVG condition below?\n    await page.setViewport({\n      height: viewportHeight,\n      width: viewportWidth,\n      deviceScaleFactor: isSVG ? 1 : parseFloat(exportOptions.scale)\n    });\n\n    // Prepare a zoom callback for the next evaluate call\n    const zoomCallback = isSVG\n      ? // In case of SVG the zoom must be set directly for body\n        (scale) => {\n          // Set the zoom as scale\n          // eslint-disable-next-line no-undef\n          document.body.style.zoom = scale;\n\n          // Set the margin to 0px\n          // eslint-disable-next-line no-undef\n          document.body.style.margin = '0px';\n        }\n      : // No need for such scale manipulation in case of other types of exports\n        () => {\n          // Reset the zoom for other exports than to SVGs\n          // eslint-disable-next-line no-undef\n          document.body.style.zoom = 1;\n        };\n\n    // Set the zoom accordingly\n    await page.evaluate(zoomCallback, parseFloat(exportOptions.scale));\n\n    // Get the clip region for the page\n    const { height, width, x, y } = await getClipRegion(page);\n\n    if (!isSVG) {\n      // Set the final viewport now that we have the real height\n      await page.setViewport({\n        width: Math.round(width),\n        height: Math.round(height),\n        deviceScaleFactor: parseFloat(exportOptions.scale)\n      });\n    }\n\n    vpBench();\n\n    let data;\n\n    const expBenchmark = benchmark('Rasterizing chart');\n\n    // RASTERIZATION\n    if (exportOptions.type === 'svg') {\n      // SVG\n      data = await createSVG(page);\n    } else if (exportOptions.type === 'png' || exportOptions.type === 'jpeg') {\n      // PNG or JPEG\n      data = await createImage(page, exportOptions.type, 'base64', {\n        width: viewportWidth,\n        height: viewportHeight,\n        x,\n        y\n      });\n    } else if (exportOptions.type === 'pdf') {\n      // PDF\n      data = await createPDF(page, viewportHeight, viewportWidth, 'base64');\n    } else {\n      throw `Unsupported output format ${exportOptions.type}`;\n    }\n\n    // Destroy old charts after the export is done\n    await page.evaluate(() => {\n      // eslint-disable-next-line no-undef\n      const oldCharts = Highcharts.charts;\n\n      // Check in any already existing charts\n      if (oldCharts.length) {\n        // Destroy old charts\n        for (const oldChart of oldCharts) {\n          oldChart && oldChart.destroy();\n          // eslint-disable-next-line no-undef\n          Highcharts.charts.shift();\n        }\n      }\n    });\n\n    expBenchmark();\n    exportBench();\n\n    await clearInjected(page);\n\n    return data;\n  } catch (error) {\n    await clearInjected(page);\n    log(1, `[export] Error encountered during export: ${error}`);\n\n    return error;\n  }\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2022, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { log } from './logger.js';\nconst timers = {};\n\n// TODO: Read from config\nlet enabled = false;\n\nexport default (id) => {\n  if (!enabled) {\n    return () => {};\n  }\n\n  timers[id] = new Date();\n  return () => {\n    log(\n      3,\n      `[benchmark] - ${id}: ${new Date().getTime() - timers[id].getTime()}ms`\n    );\n  };\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport cssTemplate from './css.js';\n\nexport default (chart) => `\n<!DOCTYPE html>\n<html lang='en-US'>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    <title>Highcarts Export</title>\n  </head>\n  <style>\n    ${cssTemplate()}\n  </style>\n  <body>\n    <div id=\"chart-container\">\n      ${chart}\n    </div>\n  </body>\n</html>\n\n`;\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { existsSync, readFileSync, promises as fsPromises } from 'fs';\n\nimport prompts from 'prompts';\n\nimport { log } from './logger.js';\n\nimport { mergeConfigOptions } from './utils.js';\nimport { promptsConfig } from './schemas/config.js';\n\n/**\n * Loads the configuration from JSON file.\n *\n * @param {object} options - All options object.\n * @return {object} - Updated options object.\n */\nexport const loadConfigFile = async (options) => {\n  const configFile = options.customCode && options.customCode.loadConfig;\n  try {\n    // An additional config file\n    if (configFile) {\n      // Return options updated with the properties from the loaded JSON file\n      options = mergeConfigOptions(\n        options,\n        JSON.parse(readFileSync(configFile))\n      );\n    }\n\n    // Return updated options\n    return options;\n  } catch (error) {\n    log(1, `[config] Unable to load config from the ${configFile}: ${error}`);\n  }\n};\n\n/**\n * Recursively sets a property in a correct indentation level based on the\n * array of nested properties names.\n *\n * @param {object} objectToUpdate - Object where a property must be set on a\n * correct level.\n * @param  {string[]}nestedNames - Array of nasted names that indicates\n * indentation level.\n * @param {any} value - A value to assign to the property.\n * @return {object} - Updated options object.\n */\nconst recursiveProps = (objectToUpdate, nestedNames, value) => {\n  while (nestedNames.length > 1) {\n    const propName = nestedNames.shift();\n\n    // Create a property in object if it doesn't exist\n    if (!Object.prototype.hasOwnProperty.call(objectToUpdate, propName)) {\n      objectToUpdate[propName] = {};\n    }\n\n    // Call function again if there still names to go\n    objectToUpdate[propName] = recursiveProps(\n      Object.assign({}, objectToUpdate[propName]),\n      nestedNames,\n      value\n    );\n\n    return objectToUpdate;\n  }\n\n  // Assign the final value\n  objectToUpdate[nestedNames[0]] = value;\n  return objectToUpdate;\n};\n\n/**\n * Displays a prompt for the manual configuration.\n *\n * @param {string} configFileName - The name of a configuration file.\n */\nexport const manualConfiguration = async (configFileName) => {\n  // Prepare a config object\n  let configFile = {};\n\n  // Check if provided config file exists\n  if (existsSync(configFileName)) {\n    configFile = JSON.parse(readFileSync(configFileName, 'utf8'));\n  }\n\n  // Question about a configuration category\n  const onSubmit = async (p, categories) => {\n    let questionsCounter = 0;\n    let allQuestions = [];\n\n    // Create a corresponding property in the manualConfig object\n    for (const section of categories) {\n      // Mark each option with a section\n      promptsConfig[section] = promptsConfig[section].map((option) => ({\n        ...option,\n        section\n      }));\n\n      // Collect the questions\n      allQuestions = [...allQuestions, ...promptsConfig[section]];\n    }\n\n    await prompts(allQuestions, {\n      onSubmit: async (prompt, answer) => {\n        // Get the default modules\n        if (prompt.name === 'modules') {\n          answer = answer.length\n            ? answer.map((module) => prompt.choices[module])\n            : prompt.choices;\n\n          configFile[prompt.section][prompt.name] = answer;\n        } else {\n          configFile[prompt.section] = recursiveProps(\n            Object.assign({}, configFile[prompt.section] || {}),\n            prompt.name.split('.'),\n            answer\n          );\n        }\n\n        if (++questionsCounter === allQuestions.length) {\n          try {\n            await fsPromises.writeFile(\n              configFileName,\n              JSON.stringify(configFile, null, 2),\n              'utf8'\n            );\n          } catch (error) {\n            log(1, `[config] Error while creating config.json: ${error}`);\n          }\n          return true;\n        }\n      }\n    });\n\n    return true;\n  };\n\n  // Find the categories\n  const choices = Object.keys(promptsConfig).map((choice) => ({\n    title: `${choice} options`,\n    value: choice\n  }));\n\n  // Category prompt\n  return prompts(\n    {\n      type: 'multiselect',\n      name: 'category',\n      message: 'Which category do you want to configure?',\n      hint: 'Space: Select specific, A: Select all, Enter: Confirm.',\n      instructions: '',\n      choices\n    },\n    { onSubmit }\n  );\n};\n\n/**\n * Inits default options recursively.\n *\n * @param {any} items - Items to update options from.\n * @return {object} - Updated options object.\n */\nexport const initDefaultOptions = (items) => {\n  let options = {};\n  for (const [name, item] of Object.entries(items)) {\n    options[name] = Object.prototype.hasOwnProperty.call(item, 'value')\n      ? item.value\n      : initDefaultOptions(item);\n  }\n  return options;\n};\n\n/**\n * Initializes options for the `startExport` method by merging user options\n * with the default options and pool options.\n *\n * @param {any} exportOptions - User options for exporting.\n * @param {any} poolOptions - Options of the pool which is used for export.\n * @return {object} - User options merged with default options.\n */\nexport const initExportSettings = (exportOptions, poolOptions = {}) => {\n  let options = {};\n\n  if (exportOptions.svg) {\n    options = poolOptions; // default poolOptions\n    options.export.type = exportOptions.type || exportOptions.export.type;\n    options.export.scale = exportOptions.scale || exportOptions.export.scale;\n    options.export.outfile = exportOptions.outfile || exportOptions.export.outfile;\n    options.payload = {\n      svg: exportOptions.svg\n    };\n  } else {\n    options = mergeConfigOptions(\n      poolOptions,\n      exportOptions,\n      // Omit going down recursively with the belows\n      ['options', 'globalOptions', 'themeOptions', 'resources']\n    );\n  }\n\n  options.export.outfile = options.export?.outfile || `chart.${options.export?.type || 'png'}`;\n  return options;\n}\n\nexport default {\n  loadConfigFile,\n  manualConfiguration,\n  initDefaultOptions,\n  initExportSettings\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { readFile, readFileSync } from 'fs';\n\nimport { log } from './logger.js';\nimport { postWork } from './pool.js';\nimport {\n  clearText,\n  fixType,\n  handleResources,\n  isCorrectJSON,\n  optionsStringify,\n  roundNumber,\n  toBoolean,\n  wrapAround\n} from './utils.js';\nimport { initExportSettings } from './config.js';\n\nlet allowCodeExecution = false;\n\nlet poolOptions = {};\n\n/**\n * Function for choosing chart size and scale based on options prioritization.\n *\n * @param {object} options - All options object.\n * @return {object} - An object with updated size and scale for a chart.\n */\nexport const findChartSize = (options) => {\n  const { chart, exporting } =\n    options.export?.options || isCorrectJSON(options.export?.instr);\n\n  // See if globalOptions holds chart or exporting size\n  const globalOptions = isCorrectJSON(options.export?.globalOptions);\n\n  // Secure scale value\n  let scale = roundNumber(\n    options.export?.scale ||\n      exporting?.scale ||\n      globalOptions?.exporting?.scale ||\n      options.export?.defaultScale ||\n      1\n  );\n\n  if (scale > 5) {\n    scale = 5;\n  } else if (scale < 0.1) {\n    scale = 1;\n  }\n\n  // Find chart size and scale\n  return {\n    height:\n      options.export?.height ||\n      exporting?.sourceHeight ||\n      chart?.height ||\n      globalOptions?.exporting?.sourceHeight ||\n      globalOptions?.chart?.height ||\n      options.export?.defaultHeight ||\n      400,\n    width:\n      options.export?.width ||\n      exporting?.sourceWidth ||\n      chart?.width ||\n      globalOptions?.exporting?.sourceWidth ||\n      globalOptions?.chart?.width ||\n      options.export?.defaultWidth ||\n      600,\n    scale\n  };\n};\n\n/**\n * Function for final options preparation before export.\n *\n * @param {object} options - All options object.\n * @param {object} chartJson - Chart JSON.\n * @param {function} endCallback - The end callback.\n * @param {string} svg - The SVG representation.\n */\nconst doExport = (options, chartJson, endCallback, svg) => {\n  let { export: exportOptions, customCode: customCodeOptions } = options;\n\n    const allowCodeExecutionScoped = (\n        typeof customCodeOptions.allowCodeExecution === 'boolean' ?\n            customCodeOptions.allowCodeExecution : allowCodeExecution\n    );\n\n  if (!customCodeOptions) {\n    customCodeOptions = options.customCode = {};\n  } else if (typeof options.customCode.resources === 'string') {\n    // Process resources\n    options.customCode.resources = handleResources(\n      options.customCode.resources,\n      toBoolean(options.customCode.allowFileResources)\n    );\n  } else if (!options.customCode.resources) {\n    try {\n      const resources = readFileSync('resources.json', 'utf8');\n      options.customCode.resources = handleResources(\n        resources,\n        toBoolean(options.customCode.allowFileResources)\n      );\n    } catch (err) {\n      log(3, `[chart] The default resources.json file not found.`);\n    }\n  }\n\n  // If the allowCodeExecution flag isn't set, we should refuse the usage\n  // of callback, resources, and custom code. Additionally, the worker will\n  // refuse to run arbitrary JavaScript. Prioritized should be the scoped\n  // option, then we should take a look at the overall pool option.\n  if (!allowCodeExecutionScoped && customCodeOptions) {\n    if (\n      customCodeOptions.callback ||\n      customCodeOptions.resources ||\n      customCodeOptions.customCode\n    ) {\n      // Send back a friendly message saying that the exporter does not support\n      // these settings.\n      return (\n        endCallback &&\n        endCallback(false, {\n          error: true,\n          message: clearText(\n            `The callback, resources and customCode have been disabled for this\n            server.`\n          )\n        })\n      );\n    }\n\n    // Reset all additional custom code\n    customCodeOptions.callback = false;\n    customCodeOptions.resources = false;\n    customCodeOptions.customCode = false;\n  }\n\n  // Clean properties to keep it lean and mean\n  if (chartJson) {\n    chartJson.chart = chartJson.chart || {};\n    chartJson.exporting = chartJson.exporting || {};\n    chartJson.exporting.enabled = false;\n  }\n\n  exportOptions.constr = exportOptions.constr || 'chart';\n  exportOptions.type = fixType(exportOptions.type, exportOptions.outfile);\n  if (exportOptions.type === 'svg') {\n    exportOptions.width = false;\n  }\n\n  // Prepare global and theme options\n  ['globalOptions', 'themeOptions'].forEach((optionsName) => {\n    try {\n      if (exportOptions && exportOptions[optionsName]) {\n        if (\n          typeof exportOptions[optionsName] === 'string' &&\n          exportOptions[optionsName].endsWith('.json')\n        ) {\n          exportOptions[optionsName] = isCorrectJSON(\n            readFileSync(exportOptions[optionsName], 'utf8'),\n            true\n          );\n        } else {\n          exportOptions[optionsName] = isCorrectJSON(\n            exportOptions[optionsName],\n            true\n          );\n        }\n      }\n    } catch (error) {\n      exportOptions[optionsName] = {};\n      log(1, `[chart] The ${optionsName} not found.`);\n    }\n  });\n\n  // Prepare customCode\n  if (customCodeOptions.allowCodeExecution) {\n    customCodeOptions.customCode = wrapAround(\n      customCodeOptions.customCode,\n      customCodeOptions.allowFileResources\n    );\n  }\n\n  // Get the callback\n  if (\n    customCodeOptions &&\n    customCodeOptions.callback &&\n    customCodeOptions.callback?.indexOf('{') < 0\n  ) {\n    // The allowFileResources is always set to false for HTTP requests to avoid\n    // injecting arbitrary files from the fs\n    if (customCodeOptions.allowFileResources) {\n      try {\n        customCodeOptions.callback = readFileSync(\n          customCodeOptions.callback,\n          'utf8'\n        );\n      } catch (error) {\n        log(2, `[chart] Error loading callback: ${error}.`);\n        customCodeOptions.callback = false;\n      }\n    } else {\n      customCodeOptions.callback = false;\n    }\n  }\n\n  // Size search\n  options.export = {\n    ...options.export,\n    ...findChartSize(options)\n  };\n\n  // Post the work to the pool\n  postWork(exportOptions.strInj || chartJson || svg, options)\n    .then((result) => endCallback(result))\n    .catch((error) => {\n      log(0, '[chart] When posting work:', error);\n      return endCallback(false, error);\n    });\n};\n\n/**\n * Function for straight injecting the code.\n * Dangerous and must be used deliberately by someone who sets up a server\n * (see  --allowCodeExecution).\n *\n * @param {object} options - All options object.\n * @param {function} endCallback - The function to call when exporting is done.\n */\nconst doStraightInject = (options, endCallback) => {\n  try {\n    let strInj;\n    let instr = options.export.instr || options.export.options;\n\n    if (typeof instr !== 'string') {\n      // Try to stringify options\n      strInj = instr = optionsStringify(\n        instr,\n        options.customCode?.allowCodeExecution\n      );\n    }\n    strInj = instr.replaceAll(/\\t|\\n|\\r/g, '').trim();\n\n    // Get rid of the ;\n    if (strInj[strInj.length - 1] === ';') {\n      strInj = strInj.substring(0, strInj.length - 1);\n    }\n\n    // Save as stright inject string\n    options.export.strInj = strInj;\n    return doExport(options, false, endCallback);\n  } catch (error) {\n    const message = clearText(\n      `Malformed input detected for ${options.export?.requestId || '?'}:\n      Please make sure that your JSON/JavaScript options\n      are sent using the \"options\" attribute, and that if you're using\n      SVG, it is unescaped.`\n    );\n\n    log(1, message);\n    return (\n      endCallback &&\n      endCallback(\n        false,\n        JSON.stringify({\n          error: true,\n          message\n        })\n      )\n    );\n  }\n};\n\n/**\n * Prepares an input before exporting.\n *\n * @param {string} stringToExport - String representation of SVG/export options.\n * @param {object} options - All options object.\n * @param {function} endCallback - The function to call when exporting is done.\n */\nconst exportAsString = (stringToExport, options, endCallback) => {\n  const { allowCodeExecution } = options.customCode;\n\n  // Check if it is SVG\n  if (\n    stringToExport.indexOf('<svg') >= 0 ||\n    stringToExport.indexOf('<?xml') >= 0\n  ) {\n    log(4, '[chart] Parsing input as SVG.');\n    return doExport(options, false, endCallback, stringToExport);\n  }\n\n  try {\n    // Try to parse to JSON and call the doExport function\n    const chartJSON = JSON.parse(stringToExport.replaceAll(/\\t|\\n|\\r/g, ' '));\n\n    // If a correct JSON, do the export\n    return doExport(options, chartJSON, endCallback);\n  } catch (error) {\n    // Not a valid JSON\n    if (toBoolean(allowCodeExecution)) {\n      return doStraightInject(options, endCallback);\n    } else {\n      // Do not allow straight injection without the allowCodeExecution flag\n      return (\n        endCallback &&\n        endCallback(false, {\n          error: true,\n          message: clearText(\n            `Only JSON configurations and SVG is allowed for this server. If\n            this is your server, JavaScript exporting can be enabled by starting\n            the server with the --allowCodeExecution flag.`\n          )\n        })\n      );\n    }\n  }\n};\n\n/**\n * Starts an exporting process\n *\n * @param {object} settings - Settings for export.\n * @param {function} endCallback - The function to call when exporting is done.\n */\nexport default {\n  startExport: async (settings, endCallback) => {\n    // Starting exporting process message\n    log(4, '[chart] Starting exporting process.');\n\n    // Initialize options\n    const options = initExportSettings(settings, poolOptions);\n\n    // Get the export options\n    const exportOptions = options.export;\n\n    // If SVG is an input (argument can be sent only by the request)\n    if (options.payload?.svg && options.payload.svg !== '') {\n      return exportAsString(options.payload.svg.trim(), options, endCallback);\n    }\n\n    // Export using options from the file\n    if (exportOptions.infile && exportOptions.infile.length) {\n      log(4, '[chart] Attempting to export from an input file.');\n\n      // Try to read the file\n      return readFile(exportOptions.infile, 'utf8', (error, infile) => {\n        if (error) {\n          return log(1, `[chart] Error loading input file: ${error}.`);\n        }\n\n        // Get the string representation\n        options.export.instr = infile;\n        return exportAsString(\n          options.export.instr.trim(),\n          options,\n          endCallback\n        );\n      });\n    }\n\n    // Export with options from the raw representation\n    if (\n      (exportOptions.instr && exportOptions.instr !== '') ||\n      (exportOptions.options && exportOptions.options !== '')\n    ) {\n      log(4, '[chart] Attempting to export from a raw input.');\n\n      // Perform a direct inject when forced\n      if (toBoolean(options.customCode?.allowCodeExecution)) {\n        return doStraightInject(options, endCallback);\n      }\n\n      // Either try to parse to JSON first or do the direct export\n      return typeof exportOptions.instr === 'string'\n        ? exportAsString(exportOptions.instr.trim(), options, endCallback)\n        : doExport(\n            options,\n            exportOptions.instr || exportOptions.options,\n            endCallback\n          );\n    }\n\n    // No input specified, pass an error message to the callback\n    log(\n      1,\n      clearText(\n        `[chart] No input specified.\n        ${JSON.stringify(exportOptions, undefined, '  ')}.`\n      )\n    );\n\n    return (\n      endCallback &&\n      endCallback(false, {\n        error: true,\n        message: 'No input specified.'\n      })\n    );\n  },\n  getAllowCodeExecution: () => allowCodeExecution,\n  setAllowCodeExecution: (value) => {\n    allowCodeExecution = toBoolean(value);\n  },\n  setPoolOptions: (options) => {\n    poolOptions = options;\n  },\n  findChartSize\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { v4 as uuid } from 'uuid';\nimport { Pool } from 'tarn';\nimport {\n  close,\n  newPage as browserNewPage,\n  create as createBrowser\n} from './browser.js';\nimport { log } from './logger.js';\n\nimport puppeteerExport from './export.js';\nimport chart from './chart.js';\n\nlet performedExports = 0;\nlet exportAttempts = 0;\nlet timeSpent = 0;\nlet droppedExports = 0;\nlet spentAverage = 0;\nlet poolConfig = {};\n\n// The pool instance\nlet pool = false;\n\n// Custom puppeteer arguments\nlet puppeteerArgs;\n\nconst factory = {\n  /**\n   * Creates a new worker.\n   *\n   * @return {object} - An object with the id of a resource, the work count and\n   * a reference to the browser page.\n   */\n  create: async () => {\n    const id = uuid();\n    let page = false;\n\n    const s = new Date().getTime();\n\n    try {\n      page = await browserNewPage();\n\n      if (!page || page.isClosed()) {\n        throw 'invalid page';\n      }\n\n      log(\n        3,\n        `[pool] Successfully created a worker ${id} - took ${\n          new Date().getTime() - s\n        } ms.`\n      );\n    } catch (error) {\n      log(\n        1,\n        `[pool] Error creating a new page in pool entry creation! ${error}`\n      );\n\n      throw 'Error creating page';\n    }\n\n    return {\n      id,\n      page,\n      // Try to distribute the initial work count\n      workCount: Math.round(Math.random() * (poolConfig.workLimit / 2))\n    };\n  },\n\n  /**\n   * Validates a worker.\n   *\n   * @param {object} workerHandle - A browser's instance.\n   *\n   * @return {boolean} - Bool that indicates if a resource is valid or not.\n   */\n  validate: (workerHandle) => {\n    if (\n      poolConfig.workLimit &&\n      ++workerHandle.workCount > poolConfig.workLimit\n    ) {\n      log(\n        3,\n        `[pool] Worker failed validation:`,\n        `exceeded work limit (limit is ${poolConfig.workLimit})`\n      );\n      return false;\n    }\n    return true;\n  },\n\n  /**\n   * Destroys a worker.\n   *\n   * @param {object} workerHandle - A browser's instance.\n   */\n  destroy: (workerHandle) => {\n    log(3, `[pool] Destroying pool entry ${workerHandle.id}.`);\n\n    if (workerHandle.page) {\n      // We don't really need to wait around for this.\n      workerHandle.page.close();\n    }\n  },\n\n  // Logger function\n  log: (message, logLevel) => console.log(`${logLevel}: ${message}`)\n}\n\n/**\n * Inits the pool of resources.\n *\n * @param {object} config - Pool configuration along with custom puppeteer\n * arguments for the puppeteer.launch function.\n */\nexport const init = async (config) => {\n  // The newest puppeteer arguments for the browser creation\n  puppeteerArgs = config.puppeteerArgs;\n\n  // Wait until we've sucessfully created a browser instance.\n  try {\n    await createBrowser(puppeteerArgs);\n  } catch (e) {\n    log(0, '[pool|browser]', e);\n  }\n\n  // For the module scope usage\n  poolConfig = config && config.pool ? { ...config.pool } : {};\n\n  log(\n    3,\n    '[pool] Initializing pool:',\n    `min ${poolConfig.initialWorkers}, max ${poolConfig.maxWorkers}.`\n  );\n\n  if (pool) {\n    return log(\n      4,\n      '[pool] Already initialized, please kill it before creating a new one.'\n    );\n  }\n\n  // Attach process' exit listeners\n  if (poolConfig.listenToProcessExits) {\n    attachProcessExitListeners();\n  }\n\n  try {\n    // Create a pool along with a minimal number of resources\n    pool = new Pool({\n      // Get the create/validate/destroy/log functions\n      ...factory,\n      min: poolConfig.initialWorkers,\n      max: poolConfig.maxWorkers,\n      createRetryIntervalMillis: 200,\n      createTimeoutMillis: poolConfig.acquireTimeout,\n      acquireTimeoutMillis: poolConfig.acquireTimeout,\n      destroyTimeoutMillis: poolConfig.acquireTimeout,\n      idleTimeoutMillis: poolConfig.timeoutThreshold,\n      reapIntervalMillis: 1000, // poolConfig.reaper ? 120000 : 0, for now\n      propagateCreateError: false\n    });\n\n    // Set events\n    pool.on('createFail', (eventId, err) => {\n      log(1, `[pool] Error when creating worker of an event id ${eventId}:`, err);\n    });\n\n    pool.on('acquireFail', (eventId, err) => {\n      log(1, `[pool] Error when acquiring worker of an event id ${eventId}:`, err);\n    });\n\n    pool.on('destroyFail', (eventId, resource, err) => {\n      log(1, `[pool] Error when destroying worker of an id ${resource.id}, event id ${eventId}:`, err);\n    });\n\n    pool.on('release', (resource) => {\n      log(4, `[pool] Releasing a worker of an id ${resource.id}`);\n    });\n\n    pool.on('destroySuccess', (eventId, resource) => {\n      log(4, `[pool] Destroyed a worker of an id ${resource.id}`);\n    });\n\n    const initialResources = [];\n    // Create an initial number of resources\n    for (let i = 0; i < poolConfig.initialWorkers; i++) {\n      initialResources.push(await pool.acquire().promise);\n    }\n\n    // Release the initial number of resources back to the pool\n    initialResources.forEach((resource) => {\n      pool.release(resource);\n    });\n\n    log(\n      3,\n      `[pool] The pool is ready with ${poolConfig.initialWorkers} initial resources waiting.`\n    );\n  } catch (error) {\n    log(1, `[pool] Couldn't create the worker pool ${error}`);\n    throw error;\n  }\n};\n\n/**\n * Attaches process' exit listeners.\n */\nexport function attachProcessExitListeners() {\n  log(4, '[pool] Attaching exit listeners to the process.');\n\n  // Kill all pool resources on exit\n  process.on('exit', async () => {\n    await killAll();\n  });\n\n  // Handler for the SIGINT\n  process.on('SIGINT', (name, code) => {\n    log(4, `The ${name} event with code: ${code}.`);\n    process.exit(1);\n  });\n\n  // Handler for the SIGTERM\n  process.on('SIGTERM', (name, code) => {\n    log(4, `The ${name} event with code: ${code}.`);\n    process.exit(1);\n  });\n\n  // Handler for the uncaughtException\n  process.on('uncaughtException', async (error, name) => {\n    log(4, `The ${name} error, message: ${error.message}.`);\n  });\n}\n\n/**\n * Kills the pool and flush the browser instance.\n */\nexport async function killAll() {\n  log(3, '[pool] Killing all workers.');\n\n  chart.setPoolOptions({});\n\n  // Close browser instance\n  try {\n    await close();\n  } catch {\n    // if the browser has already been closed,\n    // skip the rest of this function\n    log(4, \"[pool] Worker has already been killed.\");\n    return;\n  }\n\n  // Return true when pool is already dead\n  if (!pool) {\n    return true;\n  }\n\n  // Destroy the pool\n  return pool.destroy();\n}\n\n/**\n * Posts work to the pool.\n *\n * @param {object} chart - Chart's options.\n * @param {object} options - All options object.\n */\nexport const postWork = async (chart, options) => {\n  let workerHandle;\n\n  // Handle fail conditions\n  const fail = (msg) => {\n    ++droppedExports;\n\n    if (workerHandle) {\n      pool.release(workerHandle);\n    }\n\n    throw 'In pool.postWork: ' + msg;\n  };\n\n  log(4, '[pool] Work received, starting to process.');\n\n  if (poolConfig.benchmarking) {\n    getPoolInfo();\n  }\n\n  ++exportAttempts;\n\n  if (!pool) {\n    log(1, '[pool] Work received, but pool has not been started.');\n    return fail('Pool is not inited but work was posted to it!');\n  }\n\n  // Acquire the worker along with the id of resource and work count\n  try {\n    log(4, '[pool] Acquiring worker');\n    workerHandle = await pool.acquire().promise;\n  } catch (error) {\n    return fail(`[pool] Error when acquiring available entry: ${error}`);\n  }\n\n  log(4, '[pool] Acquired worker handle');\n\n  if (!workerHandle.page) {\n    return fail('Resolved worker page is invalid: pool setup is wonky');\n  }\n\n  try {\n    // Save the start time\n    let workStart = new Date().getTime();\n\n    log(4, `[pool] Starting work on pool entry ${workerHandle.id}.`);\n\n    // Perform an export on a puppeteer level\n    const result = await puppeteerExport(workerHandle.page, chart, options);\n\n    // Check if it's an error\n    if (result instanceof Error) {\n      // TODO: If the export failed because puppeteer timed out, we need to force kill the worker so we get a new page. That needs to be handled better than this hack.\n      if (result.message === 'Rasterization timeout') {\n        workerHandle.page.close();\n        workerHandle.page = await browserNewPage();\n      }\n\n      return fail(result);\n    }\n\n    // Release the resource back to the pool\n    pool.release(workerHandle);\n\n    // Used for statistics in averageTime and processedWorkCount, which\n    // in turn is used by the /health route.\n    const workEnd = new Date().getTime();\n    const exportTime = workEnd - workStart;\n    timeSpent += exportTime;\n    spentAverage = timeSpent / ++performedExports;\n\n    log(4, `[pool] Work completed in ${exportTime} ms.`);\n\n    // Otherwise return the result\n    return {\n      data: result,\n      options\n    };\n  } catch (error) {\n    fail(`Error trying to perform puppeteer export: ${error}.`);\n  }\n};\n\n/**\n * Gets the pool.\n */\nexport function getPool() {\n  return pool;\n}\n\nexport const getPoolInfoJSON = () => ({\n  min: pool.min,\n  max: pool.max,\n  size: pool.size,\n  available: pool.available,\n  borrowed: pool.borrowed,\n  pending: pool.pending,\n  spareResourceCapacity: pool.spareResourceCapacity\n});\n\n/**\n * Gets the pool's information.\n */\nexport function getPoolInfo() {\n  const {\n    min,\n    max,\n    size,\n    available,\n    borrowed,\n    pending,\n    spareResourceCapacity\n  } = pool;\n\n  log(4, `[pool] The minimum number of resources allowed by pool: ${min}.`);\n  log(4, `[pool] The maximum number of resources allowed by pool: ${max}.`);\n  log(\n    4,\n    `[pool] The number of all resources in pool (free or in use): ${size}.`\n  );\n  log(\n    4,\n    `[pool] The number of resources that are currently available: ${available}.`\n  );\n  log(\n    4,\n    `[pool] The number of resources that are currently acquired: ${borrowed}.`\n  );\n  log(\n    4,\n    `[pool] The number of callers waiting to acquire a resource: ${pending}.`\n  );\n  log(\n    4,\n    `[pool] The number of how many more resources can the pool manage/create: ${spareResourceCapacity}.`\n  );\n}\n\nexport default {\n  init,\n  killAll,\n  postWork,\n  getPool,\n  getPoolInfo,\n  getPoolInfoJSON,\n  workAttempts: () => exportAttempts,\n  droppedWork: () => droppedExports,\n  averageTime: () => spentAverage,\n  processedWorkCount: () => performedExports\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport cache from '../../cache.js';\nimport pool from '../../pool.js';\n\nconst packageVersion = process.env.npm_package_version;\nconst serverStartTime = new Date();\n\n/**\n * Adds the /health route which outputs basic stats for the server\n */\nexport default (app) =>\n  !app\n    ? false\n    : app.get('/health', (request, response) => {\n        response.send({\n          status: 'OK',\n          bootTime: serverStartTime,\n          uptime:\n            Math.floor(\n              (new Date().getTime() - serverStartTime.getTime()) / 1000 / 60\n            ) + ' minutes',\n          version: packageVersion,\n          highchartsVersion: cache.version(),\n          averageProcessingTime: pool.averageTime(),\n          performedExports: pool.processedWorkCount(),\n          failedExports: pool.droppedWork(),\n          exportAttempts: pool.workAttempts(),\n          sucessRatio: (pool.processedWorkCount() / pool.workAttempts()) * 100,\n          // eslint-disable-next-line import/no-named-as-default-member\n          pool: pool.getPoolInfoJSON()\n        });\n      });\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { v4 as uuid } from 'uuid';\n\nimport chart from '../../chart.js';\nimport { initDefaultOptions } from '../../config.js';\nimport { log } from '../../logger.js';\nimport {\n  clearText,\n  fixType,\n  isCorrectJSON,\n  isPrivateRangeUrlFound,\n  mergeConfigOptions,\n  optionsStringify,\n  measureTime\n} from '../../utils.js';\nimport { defaultConfig } from '../../schemas/config.js';\n\n// Reversed MIME types\nconst reversedMime = {\n  png: 'image/png',\n  jpeg: 'image/jpeg',\n  gif: 'image/gif',\n  pdf: 'application/pdf',\n  svg: 'image/svg+xml'\n};\n\n// The requests counter\nlet requestsCounter = 0;\n\nconst benchmark = false;\n\n// The array of callbacks to call before a request\nconst beforeRequest = [];\n\n// The array of callbacks to call after a request\nconst afterRequest = [];\n\n/**\n * Calls callbacks.\n *\n * @param {Array} callbacks - An array of callbacks.\n * @param {object} request - The request.\n * @param {object} response - The response.\n * @param {object} data - The data to send to callbacks.\n * @return {object} - The result from a callback.\n */\nconst doCallbacks = (callbacks, request, response, data) => {\n  let result = true;\n  const { id, uniqueId, type, body } = data;\n\n  callbacks.some((callback) => {\n    if (callback) {\n      let callResponse = callback(request, response, id, uniqueId, type, body);\n\n      if (callResponse !== undefined && callResponse !== true) {\n        result = callResponse;\n      }\n\n      return true;\n    }\n  });\n\n  return result;\n};\n\n/**\n * Handles an export.\n *\n * @param {object} request - The request.\n * @param {object} response - The response.\n */\nconst exportHandler = (request, response) => {\n  // Start counting time\n  const stopCounter = measureTime();\n\n  // Get default options from the config\n  const defaultOptions = initDefaultOptions(defaultConfig);\n\n  // Init default options\n  if (benchmark) {\n    console.log('Init default options:', stopCounter(), 'ms.');\n  }\n\n  const body = request.body;\n  const id = ++requestsCounter;\n  const uniqueId = uuid().replace(/-/g, '');\n  let type = fixType(body.type);\n\n  // Fix type\n  if (benchmark) {\n    console.log('Fix type:', stopCounter(), 'ms.');\n  }\n\n  // Throw 'Bad Request' if there's no body\n  if (!body) {\n    return response.status(400).send(\n      clearText(\n        `Body is required. Sending a body? Make sure your Content-type header\n        is correct. Accepted is application/json and multipart/form-data.`\n      )\n    );\n  }\n\n  // All of the below can be used\n  let instr = isCorrectJSON(body.infile || body.options || body.data);\n\n  // Is correct JSON\n  if (benchmark) {\n    console.log('Is correct JSON:', stopCounter(), 'ms.');\n  }\n\n  // Throw 'Bad Request' if there's no JSON or SVG to export\n  if (!instr && !body.svg) {\n    log(\n      2,\n      clearText(\n        `Request ${uniqueId} from ${\n          request.headers['x-forwarded-for'] || request.connection.remoteAddress\n        } was incorrect. Check your payload.`\n      )\n    );\n\n    return response.status(400).send(\n      clearText(\n        `No correct chart data found. Please make sure you are using\n        application/json or multipart/form-data headers, and that the chart\n        data is in the 'infile', 'options' or 'data' attribute if sending\n        JSON or in the 'svg' if sending SVG.`\n      )\n    );\n  }\n\n  let callResponse = false;\n\n  // Call the before request functions\n  callResponse = doCallbacks(beforeRequest, request, response, {\n    id,\n    uniqueId,\n    type,\n    body\n  });\n\n  // Do callbacks\n  if (benchmark) {\n    console.log('Do callbacks:', stopCounter(), 'ms.');\n  }\n\n  // Block the request if one of a callbacks failed\n  if (callResponse !== true) {\n    return response.send(callResponse);\n  }\n\n  let connectionAborted = false;\n\n  // In case the connection is closed, force to abort further actions\n  request.socket.on('close', () => {\n    connectionAborted = true;\n  });\n\n  log(4, `[export] Got an incoming HTTP request ${uniqueId}.`);\n\n  body.constr = (typeof body.constr === 'string' && body.constr) || 'chart';\n\n  // Gather and organize options from the payload\n  const requestOptions = {\n    export: {\n      instr,\n      type,\n      constr: body.constr[0].toLowerCase() + body.constr.substr(1),\n      height: body.height,\n      width: body.width,\n      scale: body.scale || defaultOptions.export.scale,\n      globalOptions: isCorrectJSON(body.globalOptions, true),\n      themeOptions: isCorrectJSON(body.themeOptions, true)\n    },\n    customCode: {\n      allowCodeExecution: chart.getAllowCodeExecution(),\n      allowFileResources: false,\n      resources: isCorrectJSON(body.resources, true),\n      callback: body.callback,\n      customCode: body.customCode\n    }\n  };\n\n  // Organize options\n  if (benchmark) {\n    console.log('Organize options:', stopCounter(), 'ms.');\n  }\n\n  if (instr) {\n    // Stringify JSON with options\n    requestOptions.export.instr = optionsStringify(\n      instr,\n      requestOptions.customCode.allowCodeExecution\n    );\n\n    // Stringify JSON with options\n    if (benchmark) {\n      console.log('Stringify JSON with options:', stopCounter(), 'ms.');\n    }\n  }\n\n  // Merge the request options into default ones\n  const options = mergeConfigOptions(defaultOptions, requestOptions);\n\n  // Merge config options\n  if (benchmark) {\n    console.log('Merge config options:', stopCounter(), 'ms.');\n  }\n\n  // Save the JSON if exists\n  options.export.options = instr;\n\n  // Lastly, add the server specific arguments into options as payload\n  options.payload = {\n    svg: body.svg || false,\n    b64: body.b64 || false,\n    dataOptions: isCorrectJSON(body.dataOptions, true),\n    noDownload: body.noDownload || false,\n    requestId: uniqueId\n  };\n\n  // Setting payload\n  if (benchmark) {\n    console.log('Setting payload:', stopCounter(), 'ms.');\n  }\n\n  // Test xlink:href elements from payload's SVG\n  if (body.svg && isPrivateRangeUrlFound(options.payload.svg)) {\n    return response\n      .status(400)\n      .send(\n        'SVG potentially contain at least one forbidden URL in xlink:href element.'\n      );\n  }\n\n  // Check URL range\n  if (benchmark) {\n    console.log('Check URL range:', stopCounter(), 'ms.');\n  }\n\n  // Start the export process\n  chart.startExport(options, (info, error) => {\n    // Remove the close event from the socket\n    request.socket.removeAllListeners('close');\n\n    // After Puppeteer exporting\n    if (benchmark) {\n      console.log('After Puppeteer exporting:', stopCounter(), 'ms.', '\\n');\n    }\n\n    // If the connection was closed, do nothing\n    if (connectionAborted) {\n      return log(\n        3,\n        clearText(\n          `[export] The client closed the connection before the chart was done\n          processing.`\n        )\n      );\n    }\n\n    // If error, return it\n    if (error) {\n      log(\n        1,\n        clearText(\n          `[export] Work: ${uniqueId} could not be completed, sending:\n          ${error}`\n        )\n      );\n      return response.status(400).send(error.message);\n    }\n\n    // If data is missing, return the error\n    if (!info || !info.data) {\n      log(\n        1,\n        clearText(\n          `[export] Unexpected return from chart generation, please check your\n          data Request: ${uniqueId} is ${info.data}.`\n        )\n      );\n      return response\n        .status(400)\n        .send(\n          'Unexpected return from chart generation, please check your data.'\n        );\n    }\n\n    // Get the type from options\n    type = info.options.export.type;\n\n    // The after request callbacks\n    doCallbacks(afterRequest, request, response, { id, body: info.data });\n\n    if (info.data) {\n      // If only base64 is required, return it\n      if (body.b64) {\n        // Check if it is already base64 or a raw SVG\n        if (type === 'pdf') {\n          return response.send(\n            Buffer.from(info.data, 'utf8').toString('base64')\n          );\n        }\n        return response.send(info.data);\n      }\n\n      // Set correct content type\n      response.header('Content-Type', reversedMime[type] || 'image/png');\n\n      // Decide whether to download or not chart file\n      if (!body.noDownload) {\n        response.attachment(\n          `${request.params.filename || 'chart'}.${type || 'png'}`\n        );\n      }\n\n      // If SVG, return plain content\n      return type === 'svg'\n        ? response.send(info.data)\n        : response.send(Buffer.from(info.data, 'base64'));\n    }\n  });\n};\n\nexport default (app) => {\n  app.post('/', exportHandler);\n  app.post('/:filename', exportHandler);\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { promises as fsPromises } from 'fs';\nimport { posix } from 'path';\n\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport express from 'express';\nimport multer from 'multer';\nimport http from 'http';\nimport https from 'https';\n\nimport { log } from '../logger.js';\nimport rateLimit from './rate_limit.js';\nimport { __dirname } from '../utils.js';\n\nimport healthRoute from './routes/health.js';\nimport exportRoutes from './routes/export.js';\nimport vswitchRoute from './routes/change-hc-version.js';\nimport uiRoute from './routes/ui.js';\n\n// Create express app\nconst app = express();\n\n// Disable the X-Powered-By header\napp.disable('x-powered-by');\n\n// Enable CORS support\napp.use(cors());\n\n// Enable parsing of form data (files) with Multer package\nconst storage = multer.memoryStorage();\nconst upload = multer({\n    storage,\n    limits: {\n        fieldsSize: '50MB'\n    }\n});\n\napp.use(upload.any());\n\n// Enable body parser\napp.use(bodyParser.json({ limit: '50mb' }));\napp.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\napp.use(bodyParser.urlencoded({ extended: false, limit: '50mb' }));\n\n/**\n * Error handler function.\n *\n * @param {object} error - An error object.\n * @return {string} - An error message.\n */\nconst errorHandler = (error) => log(1, `[server] Socket error: ${error}`);\n\n/**\n * Attaches error handlers for a server.\n *\n * @param {object} server - The http/https server.\n */\nconst attachErrorHandlers = (server) => {\n  server.on('clientError', errorHandler);\n  server.on('error', errorHandler);\n  server.on('connection', (socket) =>\n    socket.on('error', (error) => errorHandler(error, socket))\n  );\n};\n\nexport const start = async (serverConfig) => {\n  // Stop if not enabled\n  if (!serverConfig.enable) {\n    return false;\n  }\n\n  // // Get the pool\n  // const pool = getPool();\n\n  // // Try to create browser instance before starting the server\n  // const resource = await pool.acquire();\n\n  // // If not found, throw an error\n  // if (!resource.browser) {\n  //   log(1, `[s:erver] Could not acquire browser instance.`);\n  //   process.exit(1);\n  // }\n\n  // // Release the resource\n  // pool.release(resource);\n\n  // Listen HTTP server\n  if (!serverConfig.ssl.enable && !serverConfig.ssl.force) {\n    // Main server instance (HTTP)\n    const httpServer = http.createServer(app);\n    // Attach error handlers and listen to the server\n    attachErrorHandlers(httpServer);\n    // Listen\n    httpServer.listen(serverConfig.port, serverConfig.host);\n\n    log(\n      3,\n      `[server] Started HTTP server on ${serverConfig.host}:${serverConfig.port}.`\n    );\n  }\n\n  // Listen HTTPS server\n  if (serverConfig.ssl.enable) {\n    // Set up an SSL server also\n    let key, cert;\n\n    try {\n      // Get the SSL key\n      key = await fsPromises.readFile(\n        posix.join(serverConfig.ssl.certPath, 'server.key'),\n        'utf8'\n      );\n\n      // Get the SSL certificate\n      cert = await fsPromises.readFile(\n        posix.join(serverConfig.ssl.certPath, 'server.crt'),\n        'utf8'\n      );\n    } catch (error) {\n      log(\n        1,\n        `[server] Unable to load key/certificate from ${serverConfig.ssl.certPath}.`\n      );\n    }\n\n    if (key && cert) {\n      // Main server instance (HTTPS)\n      const httpsServer = https.createServer(app);\n      // Attach error handlers and listen to the server\n      attachErrorHandlers(httpsServer);\n      // Listen\n      httpsServer.listen(serverConfig.ssl.port, serverConfig.host);\n\n      log(\n        3,\n        `[server] Started HTTPS server on ${serverConfig.host}:${serverConfig.ssl.port}.`\n      );\n    }\n  }\n\n  // Enable the rate limiter if config says so\n  if (\n    serverConfig.rateLimiting &&\n    serverConfig.rateLimiting.enable &&\n    ![0, NaN].includes(serverConfig.rateLimiting.maxRequests)\n  ) {\n    rateLimit(app, serverConfig.rateLimiting);\n  }\n\n  // Set up static folder's route\n  app.use(express.static(posix.join(__dirname, 'public')));\n\n  // Set up routes\n  healthRoute(app);\n  exportRoutes(app);\n  uiRoute(app);\n  vswitchRoute(app);\n};\n\n/**\n * Returns the express instance.\n */\nexport const getExpress = () => {\n  return express;\n};\n\n/**\n * Returns the app instance.\n */\nexport const getApp = () => {\n  return app;\n};\n\n/**\n * Adds a middleware to the server.\n *\n * @param {object} path - An endpoint path to add middlewares to.\n * @param {Array} middlewares - An unlimited number of middlewares to use\n * against the specific endpoint.\n */\nexport const use = (path, ...middlewares) => {\n  app.use(path, ...middlewares);\n};\n\n/**\n * Adds a get route to the server.\n *\n * @param {object} path - An endpoint path to add middlewares to.\n * @param {Array} middlewares - An unlimited number of middlewares to use\n * against the specific endpoint for GET method.\n */\nexport const get = (path, ...middlewares) => {\n  app.get(path, ...middlewares);\n};\n\n/**\n * Adds a post route to the server.\n *\n * @param {object} path - An endpoint path to add middlewares to.\n * @param {Array} middlewares - An unlimited number of middlewares to use\n * against the specific endpoint for POST method.\n */\nexport const post = (path, ...middlewares) => {\n  app.post(path, ...middlewares);\n};\n\n/**\n * Forcefully enables rate limiting.\n *\n * @param {object} limitConfig - The options object for the rate limiter\n * configuration.\n */\nexport const enableRateLimiting = (limitConfig) => {\n  return rateLimit(app, limitConfig);\n};\n\nexport default {\n  start,\n  getExpress,\n  getApp,\n  use,\n  get,\n  post,\n  enableRateLimiting\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { join } from 'path';\n\nimport { __dirname } from '../../utils.js';\n/**\n * Adds the / route for a UI when enabled for the export server\n */\nexport default (app) =>\n  !app\n    ? false\n    : app.get('/', (request, response) => {\n        response.sendFile(join(__dirname, 'public', 'index.html'));\n      });\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport cache from '../../cache.js';\n\n/**\n * Adds a route that can be used to change the HC version on the server\n * TODO: Add auth token and connect to API\n */\nexport default (app) =>\n  !app\n    ? false\n    : app.post('/change-hc-version/:newVersion', async (request, response) => {\n        const ctoken = process.env.HIGHCHARTS_ADMIN_TOKEN;\n\n        if (!ctoken || !ctoken.length) {\n          return response.send({\n            error: true,\n            message:\n              'Server not configured to do run-time version changes: HIGHCHARTS_ADMIN_TOKEN not set'\n          });\n        }\n\n        const token = request.get('hc-auth');\n\n        if (!token || token !== ctoken) {\n          return response.send({\n            error: true,\n            message: 'Invalid or missing token: set token in the hc-auth header'\n          });\n        }\n\n        const newVersion = request.params.newVersion;\n\n        if (newVersion) {\n          try {\n            // eslint-disable-next-line import/no-named-as-default-member\n            await cache.updateVersion(newVersion);\n          } catch (e) {\n            response.send({\n              error: true,\n              message: e\n            });\n          }\n\n          response.send({\n            version: cache.version()\n          });\n        } else {\n          response.send({\n            error: true,\n            message: 'No new version supplied'\n          });\n        }\n      });\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\n// Add the main directory in the global object\nimport 'colors';\n\nimport server, { start } from './server/server.js';\nimport chart from './chart.js';\nimport { log, setLogLevel, enableFileLogging } from './logger.js';\nimport { killAll, init } from './pool.js';\nimport { initDefaultOptions, loadConfigFile } from './config.js';\nimport { checkCache } from './cache.js';\nimport { mergeConfigOptions } from './utils.js';\nimport { defaultConfig } from './schemas/config.js';\n\nexport default {\n  log,\n  server,\n  startExport: chart.startExport,\n  startServer: start,\n  killPool: killAll,\n  initPool: async (options = {}) => {\n    const defaultOptions = initDefaultOptions(defaultConfig);\n\n    // Load an optional config file\n    options = await loadConfigFile(mergeConfigOptions(defaultOptions, options));\n\n    // Set the allowCodeExecution per export module scope\n    chart.setAllowCodeExecution(\n      options.customCode && options.customCode.allowCodeExecution\n    );\n\n    // Set the log level\n    setLogLevel(options.logging && parseInt(options.logging.level));\n\n    // Set the log file path and name\n    if (options.logging && options.logging.dest) {\n      enableFileLogging(\n        options.logging.dest,\n        options.logging.file || 'highcharts-export-server.log'\n      );\n    }\n\n    // Check if cache needs to be updated\n    await checkCache(options.highcharts || { version: 'latest' });\n\n    // Init the pool\n    await init({\n      pool: options.pool || {\n        initialWorkers: 1,\n        maxWorkers: 1\n      },\n      puppeteerArgs: options.puppeteer?.args || []\n    });\n\n    chart.setPoolOptions(options);\n\n    // Return updated options\n    return options;\n  }\n};\n"],"names":["dotenv","config","defaultConfig","puppeteer","args","value","type","description","highcharts","version","envLink","cdnURL","coreScripts","modules","indicators","scripts","export","infile","instr","options","outfile","constr","defaultHeight","defaultWidth","defaultScale","height","width","scale","globalOptions","themeOptions","batch","customCode","allowCodeExecution","allowFileResources","callback","resources","loadConfig","createConfig","server","enable","cliName","host","port","ssl","force","certPath","rateLimiting","maxRequests","window","delay","trustProxy","skipKey","skipToken","pool","initialWorkers","maxWorkers","workLimit","queueSize","timeoutThreshold","acquireTimeout","reaper","benchmarking","listenToProcessExits","payload","logging","level","file","dest","ui","route","other","noLogo","join","nestedArgs","envVars","initConfig","obj","propChain","Object","keys","forEach","k","includes","entry","numEnvVal","item","process","env","find","el","indexOf","split","push","name","substring","toConsole","toFile","pathCreated","levelsDesc","title","color","listeners","key","option","entries","log","newLevel","texts","length","prefix","Date","toString","trim","fn","existsSync","mkdirSync","appendFile","concat","error","console","apply","undefined","__dirname","fileURLToPath","URL","url","clearText","text","rule","replacer","replaceAll","fixType","formats","outType","pop","t","handleResources","allowedProps","handledResources","correctResources","endsWith","isCorrectJSON","readFileSync","notice","files","propName","map","data","parsedData","JSON","parse","stringify","deepCopy","copy","Array","isArray","prototype","hasOwnProperty","call","mergeConfigOptions","newOptions","absoluteProps","mergedOptions","optionsStringify","allowFunctions","startsWith","toBoolean","wrapAround","replace","rateLimit","app","limitConfig","msg","rateOptions","max","limiter","windowMs","delayMs","handler","request","response","format","json","status","send","message","default","skip","query","access_token","use","async","fetch","requestOptions","Promise","resolve","reject","protocol","https","http","getProtocol","get","res","on","chunk","cachePath","cache","activeManifest","sources","hcVersion","appliedConfig","extractVersion","substr","fetchScript","script","proxyAgent","agent","timeout","statusCode","updateCache","sourcePath","customScripts","allScripts","c","m","i","proxyHost","proxyPort","HttpsProxyAgent","fetchedModules","all","writeFileSync","checkCache","manifestPath","requestUpdate","manifest","moduleMap","numberOfModules","some","moduleName","newManifest","saveConfigToManifest","cache$1","newVersion","assign","RANDOM_PID","randomBytes","PUPPETEER_DIR","path","minimalArgs","template","fs","browser","newPage","p","setContent","addScriptTag","evaluate","setupHighcharts","err","$eval","element","errorMessage","_displayErrors","innerHTML","close","__basedir","setAsConfig","page","chart","triggerExport","puppeteerExport","injectedResources","clearInjected","dispose","scriptsToRemove","document","getElementsByTagName","stylesToRemove","linksToRemove","remove","exportBench","exportOptions","requestAnimationFrame","displayErrors","debugger","d","svgBench","isSVG","setPageBench","svgTemplate","strInj","setContentBench","resBench","js","content","isLocal","cssBench","css","cssImports","match","cssImportPath","addStyleTag","size","chartHeight","baseVal","chartWidth","parseFloat","Highcharts","charts","vpBench","viewportHeight","Math","ceil","viewportWidth","setViewport","deviceScaleFactor","zoomCallback","body","style","zoom","margin","x","y","getBoundingClientRect","trunc","getClipRegion","round","expBenchmark","outerHTML","createSVG","encoding","clip","race","screenshot","setTimeout","Error","createImage","pdf","createPDF","oldCharts","oldChart","destroy","shift","initDefaultOptions","items","poolOptions","findChartSize","exporting","precision","multiplier","pow","roundNumber","sourceHeight","sourceWidth","doExport","chartJson","endCallback","svg","customCodeOptions","allowCodeExecutionScoped","enabled","optionsName","postWork","then","result","catch","doStraightInject","requestId","exportAsString","stringToExport","chartJSON","startExport","settings","initExportSettings","readFile","getAllowCodeExecution","setAllowCodeExecution","setPoolOptions","puppeteerArgs","performedExports","exportAttempts","timeSpent","droppedExports","spentAverage","poolConfig","factory","create","id","uuid","s","getTime","browserNewPage","isClosed","workCount","random","validate","workerHandle","logLevel","init","allArgs","tryCount","open","launch","headless","userDataDir","e","createBrowser","killAll","code","exit","Pool","min","createRetryIntervalMillis","createTimeoutMillis","acquireTimeoutMillis","destroyTimeoutMillis","idleTimeoutMillis","reapIntervalMillis","propagateCreateError","eventId","resource","initialResources","acquire","promise","release","fail","getPoolInfo","workStart","exportTime","available","borrowed","pending","spareResourceCapacity","pool$1","packageVersion","npm_package_version","serverStartTime","reversedMime","png","jpeg","gif","requestsCounter","beforeRequest","afterRequest","doCallbacks","callbacks","uniqueId","callResponse","exportHandler","start","hrtime","bigint","measureTime","defaultOptions","headers","connection","remoteAddress","connectionAborted","socket","toLowerCase","b64","dataOptions","noDownload","ipRegEx","info","removeAllListeners","Buffer","from","header","attachment","params","filename","express","disable","cors","storage","multer","memoryStorage","upload","limits","fieldsSize","any","bodyParser","limit","urlencoded","extended","errorHandler","attachErrorHandlers","serverConfig","httpServer","createServer","listen","cert","fsPromises","posix","httpsServer","NaN","static","bootTime","uptime","floor","highchartsVersion","averageProcessingTime","failedExports","sucessRatio","healthRoute","post","exportRoutes","sendFile","uiRoute","ctoken","HIGHCHARTS_ADMIN_TOKEN","token","vswitchRoute","getExpress","getApp","middlewares","enableRateLimiting","index","startServer","killPool","initPool","configFile","loadConfigFile","parseInt","logDest","logFile","enableFileLogging"],"mappings":"snBAiBAA,EAAOC,SAIA,MAAMC,EAAgB,CAC3BC,UAAW,CACTC,KAAM,CACJC,MAAO,GACPC,KAAM,WACNC,YAAa,6CAGjBC,WAAY,CACVC,QAAS,CACPJ,MAAO,SACPK,QAAS,qBACTJ,KAAM,SACNC,YAAa,8BAEfI,OAAQ,CACNN,MAAO,+BACPK,QAAS,iBACTJ,KAAM,SACNC,YAAa,6CAEfK,YAAa,CACXF,QAAS,0BACTL,MAAO,CAAC,aAAc,kBAAmB,iBACzCC,KAAM,WACNC,YAAa,qCAEfM,QAAS,CACPH,QAAS,qBACTL,MAAO,CACL,QACA,MACA,QACA,YACA,cACA,uBACA,gBACA,uBACA,eACA,QACA,OACA,mBACA,eACA,cACA,UACA,UACA,WACA,UACA,cACA,YACA,sBACA,SACA,SACA,WACA,YACA,eACA,SACA,eACA,YACA,kBACA,SACA,cACA,mBACA,eACA,cACA,eACA,cACA,cACA,WACA,eACA,WACA,SACA,OACA,WACA,YACA,SACA,qBACA,aACA,WACA,WACA,WACA,WACA,eACA,UACA,kBACA,oBACA,cAEFC,KAAM,WACNC,YAAa,gCAEfO,WAAY,CACVJ,QAAS,wBACTL,MAAO,CAAC,kBACRC,KAAM,WACNC,YAAa,mCAEfQ,QAAS,CACPV,MAAO,CACL,yEAEFC,KAAM,WACNC,YACE,sEAGNS,OAAQ,CACNC,OAAQ,CACNZ,OAAO,EACPC,KAAM,SACNC,YACE,8FAEJW,MAAO,CACLb,OAAO,EACPC,KAAM,SACNC,YACE,iFAEJY,QAAS,CACPd,OAAO,EACPC,KAAM,SACNC,YAAa,oCAEfa,QAAS,CACPf,OAAO,EACPC,KAAM,SACNC,YACE,2FAEJD,KAAM,CACJI,QAAS,sBACTL,MAAO,MACPC,KAAM,SACNC,YACE,sEAEJc,OAAQ,CACNX,QAAS,wBACTL,MAAO,QACPC,KAAM,SACNC,YACE,6EAEJe,cAAe,CACbZ,QAAS,wBACTL,MAAO,IACPC,KAAM,SACNC,YACE,gFAEJgB,aAAc,CACZb,QAAS,uBACTL,MAAO,IACPC,KAAM,SACNC,YACE,+EAEJiB,aAAc,CACZd,QAAS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"}