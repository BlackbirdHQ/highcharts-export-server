{"version":3,"file":"index.esm.js","sources":["../lib/schemas/config.js","../lib/envs.js","../lib/logger.js","../lib/utils.js","../lib/config.js","../lib/fetch.js","../lib/errors/ExportError.js","../lib/cache.js","../lib/browser.js","../lib/export.js","../templates/svg_export/svg_export.js","../lib/pool.js","../lib/chart.js","../lib/server/error.js","../lib/server/rate_limit.js","../lib/errors/HttpError.js","../lib/server/routes/export.js","../lib/server/routes/health.js","../lib/server/server.js","../lib/server/routes/ui.js","../lib/server/routes/change_hc_version.js","../lib/index.js"],"sourcesContent":["/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// Possible names for Highcharts scripts\r\nexport const scriptsNames = {\r\n  core: ['highcharts', 'highcharts-more', 'highcharts-3d'],\r\n  modules: [\r\n    'stock',\r\n    'map',\r\n    'gantt',\r\n    'exporting',\r\n    'export-data',\r\n    'parallel-coordinates',\r\n    'accessibility',\r\n    'annotations-advanced',\r\n    'boost-canvas',\r\n    'boost',\r\n    'data',\r\n    'data-tools',\r\n    'draggable-points',\r\n    'static-scale',\r\n    'broken-axis',\r\n    'heatmap',\r\n    'tilemap',\r\n    'tiledwebmap',\r\n    'timeline',\r\n    'treemap',\r\n    'treegraph',\r\n    'item-series',\r\n    'drilldown',\r\n    'histogram-bellcurve',\r\n    'bullet',\r\n    'funnel',\r\n    'funnel3d',\r\n    'geoheatmap',\r\n    'pyramid3d',\r\n    'networkgraph',\r\n    'overlapping-datalabels',\r\n    'pareto',\r\n    'pattern-fill',\r\n    'pictorial',\r\n    'price-indicator',\r\n    'sankey',\r\n    'arc-diagram',\r\n    'dependency-wheel',\r\n    'series-label',\r\n    'solid-gauge',\r\n    'sonification',\r\n    'stock-tools',\r\n    'streamgraph',\r\n    'sunburst',\r\n    'variable-pie',\r\n    'variwide',\r\n    'vector',\r\n    'venn',\r\n    'windbarb',\r\n    'wordcloud',\r\n    'xrange',\r\n    'no-data-to-display',\r\n    'drag-panes',\r\n    'debugger',\r\n    'dumbbell',\r\n    'lollipop',\r\n    'cylinder',\r\n    'organization',\r\n    'dotplot',\r\n    'marker-clusters',\r\n    'hollowcandlestick',\r\n    'heikinashi',\r\n    'flowmap'\r\n  ],\r\n  indicators: ['indicators-all']\r\n};\r\n\r\n// This is the configuration object with all options and their default values,\r\n// also from the .env file if one exists\r\nexport const defaultConfig = {\r\n  puppeteer: {\r\n    args: {\r\n      value: [],\r\n      type: 'string[]',\r\n      description: 'Arguments array to send to Puppeteer.'\r\n    }\r\n  },\r\n  highcharts: {\r\n    version: {\r\n      value: 'latest',\r\n      type: 'string',\r\n      envLink: 'HIGHCHARTS_VERSION',\r\n      description: 'The Highcharts version to be used.'\r\n    },\r\n    cdnURL: {\r\n      value: 'https://code.highcharts.com/',\r\n      type: 'string',\r\n      envLink: 'HIGHCHARTS_CDN_URL',\r\n      description: 'The CDN URL for Highcharts scripts to be used.'\r\n    },\r\n    core: {\r\n      value: scriptsNames.core,\r\n      type: 'string[]',\r\n      envLink: 'HIGHCHARTS_CORE',\r\n      description: 'The core Highcharts scripts to fetch.'\r\n    },\r\n    modules: {\r\n      value: scriptsNames.modules,\r\n      type: 'string[]',\r\n      envLink: 'HIGHCHARTS_MODULES',\r\n      description: 'The modules of Highcharts to fetch.'\r\n    },\r\n    indicators: {\r\n      value: scriptsNames.indicators,\r\n      type: 'string[]',\r\n      envLink: 'HIGHCHARTS_INDICATORS',\r\n      description: 'The indicators of Highcharts to fetch.'\r\n    },\r\n    customScripts: {\r\n      value: [\r\n        'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js',\r\n        'https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js'\r\n      ],\r\n      type: 'string[]',\r\n      description: 'Additional custom scripts or dependencies to fetch.'\r\n    },\r\n    forceFetch: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'HIGHCHARTS_FORCE_FETCH',\r\n      description:\r\n        'The flag to determine whether to refetch all scripts after each server rerun.'\r\n    },\r\n    cachePath: {\r\n      value: '.cache',\r\n      type: 'string',\r\n      envLink: 'HIGHCHARTS_CACHE_PATH',\r\n      description:\r\n        'The path to the cache directory. It is used to store the Highcharts scripts and custom scripts.'\r\n    }\r\n  },\r\n  export: {\r\n    infile: {\r\n      value: null,\r\n      type: 'string',\r\n      description:\r\n        'The input file should include a name and a type (json or svg). It must be correctly formatted as a JSON or SVG file.'\r\n    },\r\n    instr: {\r\n      value: null,\r\n      type: 'string',\r\n      description:\r\n        'Input, provided in the form of a stringified JSON or SVG file, will override the --infile option.'\r\n    },\r\n    options: {\r\n      value: null,\r\n      type: 'string',\r\n      description: 'An alias for the --instr option.'\r\n    },\r\n    outfile: {\r\n      value: null,\r\n      type: 'string',\r\n      description:\r\n        'The output filename along with a type (jpeg, png, pdf, or svg). This will ignore the --type flag.'\r\n    },\r\n    type: {\r\n      value: 'png',\r\n      type: 'string',\r\n      envLink: 'EXPORT_TYPE',\r\n      description: 'The file export format. It can be jpeg, png, pdf, or svg.'\r\n    },\r\n    constr: {\r\n      value: 'chart',\r\n      type: 'string',\r\n      envLink: 'EXPORT_CONSTR',\r\n      description:\r\n        'The constructor to use. Can be chart, stockChart, mapChart, or ganttChart.'\r\n    },\r\n    defaultHeight: {\r\n      value: 400,\r\n      type: 'number',\r\n      envLink: 'EXPORT_DEFAULT_HEIGHT',\r\n      description:\r\n        'the default height of the exported chart. Used when no value is set.'\r\n    },\r\n    defaultWidth: {\r\n      value: 600,\r\n      type: 'number',\r\n      envLink: 'EXPORT_DEFAULT_WIDTH',\r\n      description:\r\n        'The default width of the exported chart. Used when no value is set.'\r\n    },\r\n    defaultScale: {\r\n      value: 1,\r\n      type: 'number',\r\n      envLink: 'EXPORT_DEFAULT_SCALE',\r\n      description:\r\n        'The default scale of the exported chart. Used when no value is set.'\r\n    },\r\n    height: {\r\n      value: null,\r\n      type: 'number',\r\n      description:\r\n        'The height of the exported chart, overriding the option in the chart settings.'\r\n    },\r\n    width: {\r\n      value: null,\r\n      type: 'number',\r\n      description:\r\n        'The width of the exported chart, overriding the option in the chart settings.'\r\n    },\r\n    scale: {\r\n      value: null,\r\n      type: 'number',\r\n      description:\r\n        'The scale of the exported chart, overriding the option in the chart settings. Ranges between 0.1 and 5.0.'\r\n    },\r\n    globalOptions: {\r\n      value: null,\r\n      type: 'string',\r\n      description:\r\n        'Either a stringified JSON or a filename containing options to be passed into the Highcharts.setOptions.'\r\n    },\r\n    themeOptions: {\r\n      value: null,\r\n      type: 'string',\r\n      description:\r\n        'Either a stringified JSON or a filename containing theme options to be passed into the Highcharts.setOptions.'\r\n    },\r\n    batch: {\r\n      value: null,\r\n      type: 'string',\r\n      description:\r\n        'Initiates a batch job with a string containing input/output pairs: \"in=out;in=out;...\".'\r\n    },\r\n    rasterizationTimeout: {\r\n      value: 1500,\r\n      type: 'number',\r\n      envLink: 'EXPORT_RASTERIZATION_TIMEOUT',\r\n      description:\r\n        'The duration in milliseconds to wait for rendering a webpage.'\r\n    }\r\n  },\r\n  customLogic: {\r\n    allowCodeExecution: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'CUSTOM_LOGIC_ALLOW_CODE_EXECUTION',\r\n      description:\r\n        'Controls whether the execution of arbitrary code is allowed during the exporting process.'\r\n    },\r\n    allowFileResources: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'CUSTOM_LOGIC_ALLOW_FILE_RESOURCES',\r\n      description:\r\n        'Controls the ability to inject resources from the filesystem. This setting has no effect when running as a server.'\r\n    },\r\n    customCode: {\r\n      value: null,\r\n      type: 'string',\r\n      description:\r\n        'Custom code to execute before chart initialization. It can be a function, code wrapped within a function, or a filename with the .js extension.'\r\n    },\r\n    callback: {\r\n      value: null,\r\n      type: 'string',\r\n      description:\r\n        'JavaScript code to run during construction. It can be a function or a filename with the .js extension.'\r\n    },\r\n    resources: {\r\n      value: null,\r\n      type: 'string',\r\n      description:\r\n        'Additional resource in the form of a stringified JSON, which may contain files, js, and css sections.'\r\n    },\r\n    loadConfig: {\r\n      value: null,\r\n      type: 'string',\r\n      legacyName: 'fromFile',\r\n      description: 'A file containing a pre-defined configuration to use.'\r\n    },\r\n    createConfig: {\r\n      value: null,\r\n      type: 'string',\r\n      description:\r\n        'Enables setting options through a prompt and saving them in a provided config file.'\r\n    }\r\n  },\r\n  server: {\r\n    enable: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'SERVER_ENABLE',\r\n      cliName: 'enableServer',\r\n      description:\r\n        'When set to true, the server starts on the local IP address 0.0.0.0.'\r\n    },\r\n    host: {\r\n      value: '0.0.0.0',\r\n      type: 'string',\r\n      envLink: 'SERVER_HOST',\r\n      description:\r\n        'The hostname of the server. Additionally, it starts a server on the provided hostname.'\r\n    },\r\n    port: {\r\n      value: 7801,\r\n      type: 'number',\r\n      envLink: 'SERVER_PORT',\r\n      description: 'The server port when enabled.'\r\n    },\r\n    benchmarking: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'SERVER_BENCHMARKING',\r\n      cliName: 'serverBenchmarking',\r\n      description:\r\n        'Indicates whether to display the duration, in milliseconds, of specific actions that occur on the server while serving a request.'\r\n    },\r\n    proxy: {\r\n      host: {\r\n        value: null,\r\n        type: 'string',\r\n        envLink: 'SERVER_PROXY_HOST',\r\n        cliName: 'proxyHost',\r\n        description: 'The host of the proxy server to use, if it exists.'\r\n      },\r\n      port: {\r\n        value: 8080,\r\n        type: 'number',\r\n        envLink: 'SERVER_PROXY_PORT',\r\n        cliName: 'proxyPort',\r\n        description: 'The port of the proxy server to use, if it exists.'\r\n      },\r\n      timeout: {\r\n        value: 5000,\r\n        type: 'number',\r\n        envLink: 'SERVER_PROXY_TIMEOUT',\r\n        cliName: 'proxyTimeout',\r\n        description: 'The timeout for the proxy server to use, if it exists.'\r\n      }\r\n    },\r\n    rateLimiting: {\r\n      enable: {\r\n        value: false,\r\n        type: 'boolean',\r\n        envLink: 'SERVER_RATE_LIMITING_ENABLE',\r\n        cliName: 'enableRateLimiting',\r\n        description: 'Enables rate limiting for the server.'\r\n      },\r\n      maxRequests: {\r\n        value: 10,\r\n        type: 'number',\r\n        envLink: 'SERVER_RATE_LIMITING_MAX_REQUESTS',\r\n        legacyName: 'rateLimit',\r\n        description: 'The maximum number of requests allowed in one minute.'\r\n      },\r\n      window: {\r\n        value: 1,\r\n        type: 'number',\r\n        envLink: 'SERVER_RATE_LIMITING_WINDOW',\r\n        description: 'The time window, in minutes, for the rate limiting.'\r\n      },\r\n      delay: {\r\n        value: 0,\r\n        type: 'number',\r\n        envLink: 'SERVER_RATE_LIMITING_DELAY',\r\n        description:\r\n          'The delay duration for each successive request before reaching the maximum limit.'\r\n      },\r\n      trustProxy: {\r\n        value: false,\r\n        type: 'boolean',\r\n        envLink: 'SERVER_RATE_LIMITING_TRUST_PROXY',\r\n        description: 'Set this to true if the server is behind a load balancer.'\r\n      },\r\n      skipKey: {\r\n        value: null,\r\n        type: 'string',\r\n        envLink: 'SERVER_RATE_LIMITING_SKIP_KEY',\r\n        description:\r\n          'Allows bypassing the rate limiter and should be provided with the skipToken argument.'\r\n      },\r\n      skipToken: {\r\n        value: null,\r\n        type: 'string',\r\n        envLink: 'SERVER_RATE_LIMITING_SKIP_TOKEN',\r\n        description:\r\n          'Allows bypassing the rate limiter and should be provided with the skipKey argument.'\r\n      }\r\n    },\r\n    ssl: {\r\n      enable: {\r\n        value: false,\r\n        type: 'boolean',\r\n        envLink: 'SERVER_SSL_ENABLE',\r\n        cliName: 'enableSsl',\r\n        description: 'Enables or disables the SSL protocol.'\r\n      },\r\n      force: {\r\n        value: false,\r\n        type: 'boolean',\r\n        envLink: 'SERVER_SSL_FORCE',\r\n        cliName: 'sslForced',\r\n        legacyName: 'sslOnly',\r\n        description:\r\n          'When set to true, the server is forced to serve only over HTTPS.'\r\n      },\r\n      port: {\r\n        value: 443,\r\n        type: 'number',\r\n        envLink: 'SERVER_SSL_PORT',\r\n        cliName: 'sslPort',\r\n        description: 'The port on which to run the SSL server.'\r\n      },\r\n      certPath: {\r\n        value: null,\r\n        type: 'string',\r\n        envLink: 'SERVER_SSL_CERT_PATH',\r\n        legacyName: 'sslPath',\r\n        description: 'The path to the SSL certificate/key file.'\r\n      }\r\n    }\r\n  },\r\n  pool: {\r\n    minWorkers: {\r\n      value: 4,\r\n      type: 'number',\r\n      envLink: 'POOL_MIN_WORKERS',\r\n      description: 'The number of minimum and initial pool workers to spawn.'\r\n    },\r\n    maxWorkers: {\r\n      value: 8,\r\n      type: 'number',\r\n      envLink: 'POOL_MAX_WORKERS',\r\n      legacyName: 'workers',\r\n      description: 'The number of maximum pool workers to spawn.'\r\n    },\r\n    workLimit: {\r\n      value: 40,\r\n      type: 'number',\r\n      envLink: 'POOL_WORK_LIMIT',\r\n      description:\r\n        'The number of work pieces that can be performed before restarting the worker process.'\r\n    },\r\n    acquireTimeout: {\r\n      value: 5000,\r\n      type: 'number',\r\n      envLink: 'POOL_ACQUIRE_TIMEOUT',\r\n      description:\r\n        'The duration, in milliseconds, to wait for acquiring a resource.'\r\n    },\r\n    createTimeout: {\r\n      value: 5000,\r\n      type: 'number',\r\n      envLink: 'POOL_CREATE_TIMEOUT',\r\n      description:\r\n        'The duration, in milliseconds, to wait for creating a resource.'\r\n    },\r\n    destroyTimeout: {\r\n      value: 5000,\r\n      type: 'number',\r\n      envLink: 'POOL_DESTROY_TIMEOUT',\r\n      description:\r\n        'The duration, in milliseconds, to wait for destroying a resource.'\r\n    },\r\n    idleTimeout: {\r\n      value: 30000,\r\n      type: 'number',\r\n      envLink: 'POOL_IDLE_TIMEOUT',\r\n      description:\r\n        'The duration, in milliseconds, after which an idle resource is destroyed.'\r\n    },\r\n    createRetryInterval: {\r\n      value: 200,\r\n      type: 'number',\r\n      envLink: 'POOL_CREATE_RETRY_INTERVAL',\r\n      description:\r\n        'The duration, in milliseconds, to wait before retrying the create process in case of a failure.'\r\n    },\r\n    reaperInterval: {\r\n      value: 1000,\r\n      type: 'number',\r\n      envLink: 'POOL_REAPER_INTERVAL',\r\n      description:\r\n        'The duration, in milliseconds, after which the check for idle resources to destroy is triggered.'\r\n    },\r\n    benchmarking: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'POOL_BENCHMARKING',\r\n      cliName: 'poolBenchmarking',\r\n      description:\r\n        'Indicate whether to show statistics for the pool of resources or not.'\r\n    },\r\n    listenToProcessExits: {\r\n      value: true,\r\n      type: 'boolean',\r\n      envLink: 'POOL_LISTEN_TO_PROCESS_EXITS',\r\n      description: 'Decides whether or not to attach process.exit handlers.'\r\n    }\r\n  },\r\n  logging: {\r\n    level: {\r\n      value: 4,\r\n      type: 'number',\r\n      envLink: 'LOGGING_LEVEL',\r\n      cliName: 'logLevel',\r\n      description: 'The logging level to be used.'\r\n    },\r\n    file: {\r\n      value: 'highcharts-export-server.log',\r\n      type: 'string',\r\n      envLink: 'LOGGING_FILE',\r\n      cliName: 'logFile',\r\n      description:\r\n        'The name of a log file. The logDest option also needs to be set to enable file logging.'\r\n    },\r\n    dest: {\r\n      value: 'log/',\r\n      type: 'string',\r\n      envLink: 'LOGGING_DEST',\r\n      cliName: 'logDest',\r\n      description:\r\n        'The path to store log files. This also enables file logging.'\r\n    }\r\n  },\r\n  ui: {\r\n    enable: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'UI_ENABLE',\r\n      cliName: 'enableUi',\r\n      description:\r\n        'Enables or disables the user interface (UI) for the export server.'\r\n    },\r\n    route: {\r\n      value: '/',\r\n      type: 'string',\r\n      envLink: 'UI_ROUTE',\r\n      cliName: 'uiRoute',\r\n      description:\r\n        'The endpoint route to which the user interface (UI) should be attached.'\r\n    }\r\n  },\r\n  other: {\r\n    nodeEnv: {\r\n      value: 'production',\r\n      type: 'string',\r\n      envLink: 'OTHER_NODE_ENV',\r\n      description: 'The type of Node.js environment.'\r\n    },\r\n    noLogo: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'OTHER_NO_LOGO',\r\n      description:\r\n        'Skip printing the logo on a startup. Will be replaced by a simple text.'\r\n    }\r\n  }\r\n};\r\n\r\n// The config descriptions object for the prompts functionality. It contains\r\n// information like:\r\n// * Type of a prompt\r\n// * Name of an option\r\n// * Short description of a chosen option\r\n// * Initial value\r\nexport const promptsConfig = {\r\n  puppeteer: [\r\n    {\r\n      type: 'list',\r\n      name: 'args',\r\n      message: 'Puppeteer arguments',\r\n      initial: defaultConfig.puppeteer.args.value.join(','),\r\n      separator: ','\r\n    }\r\n  ],\r\n  highcharts: [\r\n    {\r\n      type: 'text',\r\n      name: 'version',\r\n      message: 'Highcharts version',\r\n      initial: defaultConfig.highcharts.version.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'cdnURL',\r\n      message: 'The URL of CDN',\r\n      initial: defaultConfig.highcharts.cdnURL.value\r\n    },\r\n    {\r\n      type: 'multiselect',\r\n      name: 'modules',\r\n      message: 'Available modules',\r\n      instructions: 'Space: Select specific, A: Select all, Enter: Confirm.',\r\n      choices: defaultConfig.highcharts.modules.value\r\n    },\r\n    {\r\n      type: 'list',\r\n      name: 'customScripts',\r\n      message: 'Custom scripts',\r\n      initial: defaultConfig.highcharts.customScripts.value.join(','),\r\n      separator: ','\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'forceFetch',\r\n      message: 'Force re-fetch the scripts',\r\n      initial: defaultConfig.highcharts.forceFetch.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'cachePath',\r\n      message: 'The path to the cache directory',\r\n      initial: defaultConfig.highcharts.cachePath.value\r\n    }\r\n  ],\r\n  export: [\r\n    {\r\n      type: 'select',\r\n      name: 'type',\r\n      message: 'The default export file type',\r\n      hint: `Default: ${defaultConfig.export.type.value}`,\r\n      initial: 0,\r\n      choices: ['png', 'jpeg', 'pdf', 'svg']\r\n    },\r\n    {\r\n      type: 'select',\r\n      name: 'constr',\r\n      message: 'The default constructor for Highcharts',\r\n      hint: `Default: ${defaultConfig.export.constr.value}`,\r\n      initial: 0,\r\n      choices: ['chart', 'stockChart', 'mapChart', 'ganttChart']\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultHeight',\r\n      message: 'The default fallback height of the exported chart',\r\n      initial: defaultConfig.export.defaultHeight.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultWidth',\r\n      message: 'The default fallback width of the exported chart',\r\n      initial: defaultConfig.export.defaultWidth.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultScale',\r\n      message: 'The default fallback scale of the exported chart',\r\n      initial: defaultConfig.export.defaultScale.value,\r\n      min: 0.1,\r\n      max: 5\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rasterizationTimeout',\r\n      message: 'The rendering webpage timeout in milliseconds',\r\n      initial: defaultConfig.export.rasterizationTimeout.value\r\n    }\r\n  ],\r\n  customLogic: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'allowCodeExecution',\r\n      message: 'Enable execution of custom code',\r\n      initial: defaultConfig.customLogic.allowCodeExecution.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'allowFileResources',\r\n      message: 'Enable file resources',\r\n      initial: defaultConfig.customLogic.allowFileResources.value\r\n    }\r\n  ],\r\n  server: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'enable',\r\n      message: 'Starts the server on 0.0.0.0',\r\n      initial: defaultConfig.server.enable.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'host',\r\n      message: 'Server hostname',\r\n      initial: defaultConfig.server.host.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'port',\r\n      message: 'Server port',\r\n      initial: defaultConfig.server.port.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'benchmarking',\r\n      message: 'Enable server benchmarking',\r\n      initial: defaultConfig.server.benchmarking.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'proxy.host',\r\n      message: 'The host of the proxy server to use',\r\n      initial: defaultConfig.server.proxy.host.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'proxy.port',\r\n      message: 'The port of the proxy server to use',\r\n      initial: defaultConfig.server.proxy.port.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'proxy.timeout',\r\n      message: 'The timeout for the proxy server to use',\r\n      initial: defaultConfig.server.proxy.timeout.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'rateLimiting.enable',\r\n      message: 'Enable rate limiting',\r\n      initial: defaultConfig.server.rateLimiting.enable.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.maxRequests',\r\n      message: 'The maximum requests allowed per minute',\r\n      initial: defaultConfig.server.rateLimiting.maxRequests.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.window',\r\n      message: 'The rate-limiting time window in minutes',\r\n      initial: defaultConfig.server.rateLimiting.window.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.delay',\r\n      message:\r\n        'The delay for each successive request before reaching the maximum',\r\n      initial: defaultConfig.server.rateLimiting.delay.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'rateLimiting.trustProxy',\r\n      message: 'Set to true if behind a load balancer',\r\n      initial: defaultConfig.server.rateLimiting.trustProxy.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'rateLimiting.skipKey',\r\n      message:\r\n        'Allows bypassing the rate limiter when provided with the skipToken argument',\r\n      initial: defaultConfig.server.rateLimiting.skipKey.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'rateLimiting.skipToken',\r\n      message:\r\n        'Allows bypassing the rate limiter when provided with the skipKey argument',\r\n      initial: defaultConfig.server.rateLimiting.skipToken.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'ssl.enable',\r\n      message: 'Enable SSL protocol',\r\n      initial: defaultConfig.server.ssl.enable.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'ssl.force',\r\n      message: 'Force serving only over HTTPS',\r\n      initial: defaultConfig.server.ssl.force.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'ssl.port',\r\n      message: 'SSL server port',\r\n      initial: defaultConfig.server.ssl.port.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'ssl.certPath',\r\n      message: 'The path to find the SSL certificate/key',\r\n      initial: defaultConfig.server.ssl.certPath.value\r\n    }\r\n  ],\r\n  pool: [\r\n    {\r\n      type: 'number',\r\n      name: 'minWorkers',\r\n      message: 'The initial number of workers to spawn',\r\n      initial: defaultConfig.pool.minWorkers.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'maxWorkers',\r\n      message: 'The maximum number of workers to spawn',\r\n      initial: defaultConfig.pool.maxWorkers.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'workLimit',\r\n      message:\r\n        'The pieces of work that can be performed before restarting a Puppeteer process',\r\n      initial: defaultConfig.pool.workLimit.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'acquireTimeout',\r\n      message: 'The number of milliseconds to wait for acquiring a resource',\r\n      initial: defaultConfig.pool.acquireTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'createTimeout',\r\n      message: 'The number of milliseconds to wait for creating a resource',\r\n      initial: defaultConfig.pool.createTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'destroyTimeout',\r\n      message: 'The number of milliseconds to wait for destroying a resource',\r\n      initial: defaultConfig.pool.destroyTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'idleTimeout',\r\n      message: 'The number of milliseconds after an idle resource is destroyed',\r\n      initial: defaultConfig.pool.idleTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'createRetryInterval',\r\n      message:\r\n        'The retry interval in milliseconds after a create process fails',\r\n      initial: defaultConfig.pool.createRetryInterval.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'reaperInterval',\r\n      message:\r\n        'The reaper interval in milliseconds after triggering the check for idle resources to destroy',\r\n      initial: defaultConfig.pool.reaperInterval.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'benchmarking',\r\n      message: 'Enable benchmarking for a resource pool',\r\n      initial: defaultConfig.pool.benchmarking.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'listenToProcessExits',\r\n      message: 'Set to false to skip attaching process.exit handlers',\r\n      initial: defaultConfig.pool.listenToProcessExits.value\r\n    }\r\n  ],\r\n  logging: [\r\n    {\r\n      type: 'number',\r\n      name: 'level',\r\n      message:\r\n        'The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose, 5: benchmark)',\r\n      initial: defaultConfig.logging.level.value,\r\n      round: 0,\r\n      min: 0,\r\n      max: 5\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'file',\r\n      message: 'A log file name. Set with the --logDest to enable file logging',\r\n      initial: defaultConfig.logging.file.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'dest',\r\n      message: 'The path to log files. Enables file logging',\r\n      initial: defaultConfig.logging.dest.value\r\n    }\r\n  ],\r\n  ui: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'enable',\r\n      message: 'Enable UI for the export server',\r\n      initial: defaultConfig.ui.enable.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'route',\r\n      message: 'A route to attach the UI',\r\n      initial: defaultConfig.ui.route.value\r\n    }\r\n  ],\r\n  other: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'noLogo',\r\n      message: 'Skip printing the logo on startup. Replaced by simple text',\r\n      initial: defaultConfig.other.noLogo.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'nodeEnv',\r\n      message: 'The type of Node.js environment',\r\n      initial: defaultConfig.other.nodeEnv.value\r\n    }\r\n  ]\r\n};\r\n\r\n// Absolute props that, in case of merging recursively, need to be force merged\r\nexport const absoluteProps = [\r\n  'options',\r\n  'globalOptions',\r\n  'themeOptions',\r\n  'resources',\r\n  'payload'\r\n];\r\n\r\n// Argument nesting level of all export server options\r\nexport const nestedArgs = {};\r\n\r\n/**\r\n * Recursively creates a chain of nested arguments from an object.\r\n *\r\n * @param {Object} obj - The object containing nested arguments.\r\n * @param {string} propChain - The current chain of nested properties\r\n * (used internally during recursion).\r\n */\r\nconst createNestedArgs = (obj, propChain = '') => {\r\n  Object.keys(obj).forEach((k) => {\r\n    if (!['puppeteer', 'highcharts'].includes(k)) {\r\n      const entry = obj[k];\r\n      if (typeof entry.value === 'undefined') {\r\n        // Go deeper in the nested arguments\r\n        createNestedArgs(entry, `${propChain}.${k}`);\r\n      } else {\r\n        // Create the chain of nested arguments\r\n        nestedArgs[entry.cliName || k] = `${propChain}.${k}`.substring(1);\r\n\r\n        // Support for the legacy, PhantomJS properties names\r\n        if (entry.legacyName !== undefined) {\r\n          nestedArgs[entry.legacyName] = `${propChain}.${k}`.substring(1);\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\ncreateNestedArgs(defaultConfig);\r\n","/**\r\n * @fileoverview\r\n * This file is responsible for parsing the environment variables with the 'zod'\r\n * library. The parsed environment variables are then exported to be used\r\n * in the application as \"envs\". We should not use process.env directly\r\n * in the application as these would not be parsed properly.\r\n *\r\n * The environment variables are parsed and validated only once when\r\n * the application starts. We should write a custom validator or a transformer\r\n * for each of the options.\r\n */\r\n\r\nimport dotenv from 'dotenv';\r\nimport { z } from 'zod';\r\n\r\nimport { scriptsNames } from './schemas/config.js';\r\n\r\n// Load .env into environment variables\r\ndotenv.config();\r\n\r\n// Object with custom validators and transformers, to avoid repetition\r\n// in the Config object\r\nconst v = {\r\n  // Splits string value into elements in an array, trims every element, checks\r\n  // if an array is correct, if it is empty, and if it is, returns undefined\r\n  array: (filterArray) =>\r\n    z\r\n      .string()\r\n      .transform((value) =>\r\n        value\r\n          .split(',')\r\n          .map((value) => value.trim())\r\n          .filter((value) => filterArray.includes(value))\r\n      )\r\n      .transform((value) => (value.length ? value : undefined)),\r\n\r\n  // Allows only true, false and correctly parse the value to boolean\r\n  // or no value in which case the returned value will be undefined\r\n  boolean: () =>\r\n    z\r\n      .enum(['true', 'false', ''])\r\n      .transform((value) => (value !== '' ? value === 'true' : undefined)),\r\n\r\n  // Allows passed values or no value in which case the returned value will\r\n  // be undefined\r\n  enum: (values) =>\r\n    z\r\n      .enum([...values, ''])\r\n      .transform((value) => (value !== '' ? value : undefined)),\r\n\r\n  // Trims the string value and checks if it is empty or contains stringified\r\n  // values such as false, undefined, null, NaN, if it does, returns undefined\r\n  string: () =>\r\n    z\r\n      .string()\r\n      .trim()\r\n      .refine(\r\n        (value) =>\r\n          !['false', 'undefined', 'null', 'NaN'].includes(value) ||\r\n          value === '',\r\n        (value) => ({\r\n          message: `The string contains forbidden values, received '${value}'`\r\n        })\r\n      )\r\n      .transform((value) => (value !== '' ? value : undefined)),\r\n\r\n  // Allows positive numbers or no value in which case the returned value will\r\n  // be undefined\r\n  positiveNum: () =>\r\n    z\r\n      .string()\r\n      .trim()\r\n      .refine(\r\n        (value) =>\r\n          value === '' || (!isNaN(parseFloat(value)) && parseFloat(value) > 0),\r\n        (value) => ({\r\n          message: `The value must be numeric and positive, received '${value}'`\r\n        })\r\n      )\r\n      .transform((value) => (value !== '' ? parseFloat(value) : undefined)),\r\n\r\n  // Allows non-negative numbers or no value in which case the returned value\r\n  // will be undefined\r\n  nonNegativeNum: () =>\r\n    z\r\n      .string()\r\n      .trim()\r\n      .refine(\r\n        (value) =>\r\n          value === '' || (!isNaN(parseFloat(value)) && parseFloat(value) >= 0),\r\n        (value) => ({\r\n          message: `The value must be numeric and non-negative, received '${value}'`\r\n        })\r\n      )\r\n      .transform((value) => (value !== '' ? parseFloat(value) : undefined))\r\n};\r\n\r\nexport const Config = z.object({\r\n  // highcharts\r\n  HIGHCHARTS_VERSION: z\r\n    .string()\r\n    .trim()\r\n    .refine(\r\n      (value) => /^(latest|\\d+(\\.\\d+){0,2})$/.test(value) || value === '',\r\n      (value) => ({\r\n        message: `HIGHCHARTS_VERSION must be 'latest', a major version, or in the form XX.YY.ZZ, received '${value}'`\r\n      })\r\n    )\r\n    .transform((value) => (value !== '' ? value : undefined)),\r\n  HIGHCHARTS_CDN_URL: z\r\n    .string()\r\n    .trim()\r\n    .refine(\r\n      (value) =>\r\n        value.startsWith('https://') ||\r\n        value.startsWith('http://') ||\r\n        value === '',\r\n      (value) => ({\r\n        message: `Invalid value for HIGHCHARTS_CDN_URL. It should start with http:// or https://, received '${value}'`\r\n      })\r\n    )\r\n    .transform((value) => (value !== '' ? value : undefined)),\r\n  HIGHCHARTS_CORE: v.array(scriptsNames.core),\r\n  HIGHCHARTS_MODULES: v.array(scriptsNames.modules),\r\n  HIGHCHARTS_INDICATORS: v.array(scriptsNames.indicators),\r\n  HIGHCHARTS_FORCE_FETCH: v.boolean(),\r\n  HIGHCHARTS_CACHE_PATH: v.string(),\r\n  HIGHCHARTS_ADMIN_TOKEN: v.string(),\r\n\r\n  // export\r\n  EXPORT_TYPE: v.enum(['jpeg', 'png', 'pdf', 'svg']),\r\n  EXPORT_CONSTR: v.enum(['chart', 'stockChart', 'mapChart', 'ganttChart']),\r\n  EXPORT_DEFAULT_HEIGHT: v.positiveNum(),\r\n  EXPORT_DEFAULT_WIDTH: v.positiveNum(),\r\n  EXPORT_DEFAULT_SCALE: v.positiveNum(),\r\n  EXPORT_RASTERIZATION_TIMEOUT: v.nonNegativeNum(),\r\n\r\n  // custom\r\n  CUSTOM_LOGIC_ALLOW_CODE_EXECUTION: v.boolean(),\r\n  CUSTOM_LOGIC_ALLOW_FILE_RESOURCES: v.boolean(),\r\n\r\n  // server\r\n  SERVER_ENABLE: v.boolean(),\r\n  SERVER_HOST: v.string(),\r\n  SERVER_PORT: v.positiveNum(),\r\n  SERVER_BENCHMARKING: v.boolean(),\r\n\r\n  SERVER_PROXY_HOST: v.string(),\r\n  SERVER_PROXY_PORT: v.positiveNum(),\r\n  SERVER_PROXY_TIMEOUT: v.nonNegativeNum(),\r\n  SERVER_RATE_LIMITING_ENABLE: v.boolean(),\r\n  SERVER_RATE_LIMITING_MAX_REQUESTS: v.nonNegativeNum(),\r\n  SERVER_RATE_LIMITING_WINDOW: v.nonNegativeNum(),\r\n  SERVER_RATE_LIMITING_DELAY: v.nonNegativeNum(),\r\n  SERVER_RATE_LIMITING_TRUST_PROXY: v.boolean(),\r\n  SERVER_RATE_LIMITING_SKIP_KEY: v.string(),\r\n  SERVER_RATE_LIMITING_SKIP_TOKEN: v.string(),\r\n  SERVER_SSL_ENABLE: v.boolean(),\r\n  SERVER_SSL_FORCE: v.boolean(),\r\n  SERVER_SSL_PORT: v.positiveNum(),\r\n  SERVER_SSL_CERT_PATH: v.string(),\r\n\r\n  // pool\r\n  POOL_MIN_WORKERS: v.nonNegativeNum(),\r\n  POOL_MAX_WORKERS: v.nonNegativeNum(),\r\n  POOL_WORK_LIMIT: v.positiveNum(),\r\n  POOL_ACQUIRE_TIMEOUT: v.nonNegativeNum(),\r\n  POOL_CREATE_TIMEOUT: v.nonNegativeNum(),\r\n  POOL_DESTROY_TIMEOUT: v.nonNegativeNum(),\r\n  POOL_IDLE_TIMEOUT: v.nonNegativeNum(),\r\n  POOL_CREATE_RETRY_INTERVAL: v.nonNegativeNum(),\r\n  POOL_REAPER_INTERVAL: v.nonNegativeNum(),\r\n  POOL_BENCHMARKING: v.boolean(),\r\n  POOL_LISTEN_TO_PROCESS_EXITS: v.boolean(),\r\n\r\n  // logger\r\n  LOGGING_LEVEL: z\r\n    .string()\r\n    .trim()\r\n    .refine(\r\n      (value) =>\r\n        value === '' ||\r\n        (!isNaN(parseFloat(value)) &&\r\n          parseFloat(value) >= 0 &&\r\n          parseFloat(value) <= 5),\r\n      (value) => ({\r\n        message: `Invalid value for LOGGING_LEVEL. We only accept values from 0 to 5 as logging levels, received '${value}'`\r\n      })\r\n    )\r\n    .transform((value) => (value !== '' ? parseFloat(value) : undefined)),\r\n  LOGGING_FILE: v.string(),\r\n  LOGGING_DEST: v.string(),\r\n\r\n  // ui\r\n  UI_ENABLE: v.boolean(),\r\n  UI_ROUTE: v.string(),\r\n\r\n  // other\r\n  OTHER_NODE_ENV: v.enum(['development', 'production', 'test']),\r\n  OTHER_NO_LOGO: v.boolean()\r\n});\r\n\r\nexport const envs = Config.partial().parse(process.env);\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { appendFile, existsSync, mkdirSync } from 'fs';\r\n\r\nimport { defaultConfig } from './schemas/config.js';\r\n\r\n// The available colors\r\nconst colors = ['red', 'yellow', 'blue', 'gray', 'green'];\r\n\r\n// The default logging config\r\nlet logging = {\r\n  // Flags for logging status\r\n  toConsole: true,\r\n  toFile: false,\r\n  pathCreated: false,\r\n  // Log levels\r\n  levelsDesc: [\r\n    {\r\n      title: 'error',\r\n      color: colors[0]\r\n    },\r\n    {\r\n      title: 'warning',\r\n      color: colors[1]\r\n    },\r\n    {\r\n      title: 'notice',\r\n      color: colors[2]\r\n    },\r\n    {\r\n      title: 'verbose',\r\n      color: colors[3]\r\n    },\r\n    {\r\n      title: 'benchmark',\r\n      color: colors[4]\r\n    }\r\n  ],\r\n  // Log listeners\r\n  listeners: []\r\n};\r\n\r\n// Gather init logging options\r\nfor (const [key, option] of Object.entries(defaultConfig.logging)) {\r\n  logging[key] = option.value;\r\n}\r\n\r\n/**\r\n * Logs the provided texts to a file, if file logging is enabled. It creates\r\n * the necessary directory structure if not already created and appends the\r\n * content, including an optional prefix, to the specified log file.\r\n *\r\n * @param {string[]} texts - An array of texts to be logged.\r\n * @param {string} prefix - An optional prefix to be added to each log entry.\r\n */\r\nconst logToFile = (texts, prefix) => {\r\n  if (logging.toFile) {\r\n    if (!logging.pathCreated) {\r\n      // Create if does not exist\r\n      !existsSync(logging.dest) && mkdirSync(logging.dest);\r\n\r\n      // We now assume the path is available, e.g. it's the responsibility\r\n      // of the user to create the path with the correct access rights.\r\n      logging.pathCreated = true;\r\n    }\r\n\r\n    // Add the content to a file\r\n    appendFile(\r\n      `${logging.dest}${logging.file}`,\r\n      [prefix].concat(texts).join(' ') + '\\n',\r\n      (error) => {\r\n        if (error) {\r\n          console.log(`[logger] Unable to write to log file: ${error}`);\r\n          logging.toFile = false;\r\n        }\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Logs a message. Accepts a variable amount of arguments. Arguments after\r\n * `level` will be passed directly to console.log, and/or will be joined\r\n * and appended to the log file.\r\n *\r\n * @param {any} args - An array of arguments where the first is the log level\r\n * and the rest are strings to build a message with.\r\n */\r\nexport const log = (...args) => {\r\n  const [newLevel, ...texts] = args;\r\n\r\n  // Current logging options\r\n  const { level, levelsDesc } = logging;\r\n\r\n  // Check if log level is within a correct range or is a benchmark log\r\n  if (\r\n    newLevel !== 5 &&\r\n    (newLevel === 0 || newLevel > level || level > levelsDesc.length)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  // Get rid of the GMT text information\r\n  const newDate = new Date().toString().split('(')[0].trim();\r\n\r\n  // Create a message's prefix\r\n  const prefix = `${newDate} [${levelsDesc[newLevel - 1].title}] -`;\r\n\r\n  // Call available log listeners\r\n  logging.listeners.forEach((fn) => {\r\n    fn(prefix, texts.join(' '));\r\n  });\r\n\r\n  // Log to console\r\n  if (logging.toConsole) {\r\n    console.log.apply(\r\n      undefined,\r\n      [prefix.toString()[logging.levelsDesc[newLevel - 1].color]].concat(texts)\r\n    );\r\n  }\r\n\r\n  // Log to file\r\n  logToFile(texts, prefix);\r\n};\r\n\r\n/**\r\n * Logs an error message with its stack trace. Optionally, a custom message\r\n * can be provided.\r\n *\r\n * @param {number} level - The log level.\r\n * @param {Error} error - The error object.\r\n * @param {string} customMessage - An optional custom message to be logged along\r\n * with the error.\r\n */\r\nexport const logWithStack = (newLevel, error, customMessage) => {\r\n  // Get the main message\r\n  const mainMessage = customMessage || error.message;\r\n\r\n  // Current logging options\r\n  const { level, levelsDesc } = logging;\r\n\r\n  // Check if log level is within a correct range\r\n  if (newLevel === 0 || newLevel > level || level > levelsDesc.length) {\r\n    return;\r\n  }\r\n\r\n  // Get rid of the GMT text information\r\n  const newDate = new Date().toString().split('(')[0].trim();\r\n\r\n  // Create a message's prefix\r\n  const prefix = `${newDate} [${levelsDesc[newLevel - 1].title}] -`;\r\n\r\n  // If the customMessage exists, we want to display the whole stack message\r\n  const stackMessage =\r\n    error.message !== error.stackMessage || error.stackMessage === undefined\r\n      ? error.stack\r\n      : error.stack.split('\\n').slice(1).join('\\n');\r\n\r\n  // Combine custom message or error message with error stack message\r\n  const texts = [mainMessage, '\\n', stackMessage];\r\n\r\n  // Log to console\r\n  if (logging.toConsole) {\r\n    console.log.apply(\r\n      undefined,\r\n      [prefix.toString()[logging.levelsDesc[newLevel - 1].color]].concat([\r\n        mainMessage[colors[newLevel - 1]],\r\n        '\\n',\r\n        stackMessage\r\n      ])\r\n    );\r\n  }\r\n\r\n  // Call available log listeners\r\n  logging.listeners.forEach((fn) => {\r\n    fn(prefix, texts.join(' '));\r\n  });\r\n\r\n  // Log to file\r\n  logToFile(texts, prefix);\r\n};\r\n\r\n/**\r\n * Sets the log level to the specified value. Log levels are (0 = no logging,\r\n * 1 = error, 2 = warning, 3 = notice, 4 = verbose or 5 = benchmark)\r\n *\r\n * @param {number} newLevel - The new log level to be set.\r\n */\r\nexport const setLogLevel = (newLevel) => {\r\n  if (newLevel >= 0 && newLevel <= logging.levelsDesc.length) {\r\n    logging.level = newLevel;\r\n  }\r\n};\r\n\r\n/**\r\n * Enables file logging with the specified destination and log file.\r\n *\r\n * @param {string} logDest - The destination path for log files.\r\n * @param {string} logFile - The log file name.\r\n */\r\nexport const enableFileLogging = (logDest, logFile) => {\r\n  // Update logging options\r\n  logging = {\r\n    ...logging,\r\n    dest: logDest || logging.dest,\r\n    file: logFile || logging.file,\r\n    toFile: true\r\n  };\r\n\r\n  if (logging.dest.length === 0) {\r\n    return log(1, '[logger] File logging initialization: no path supplied.');\r\n  }\r\n\r\n  if (!logging.dest.endsWith('/')) {\r\n    logging.dest += '/';\r\n  }\r\n};\r\n\r\n/**\r\n * Initializes logging with the specified logging configuration.\r\n *\r\n * @param {Object} logging - The logging configuration object.\r\n */\r\nexport const initLogging = (logging) => {\r\n  // Set the log level\r\n  setLogLevel(logging && parseInt(logging.level));\r\n\r\n  // Set the log file path and name\r\n  if (logging && logging.dest) {\r\n    enableFileLogging(\r\n      logging.dest,\r\n      logging.file || 'highcharts-export-server.log'\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Adds a listener function to the logging system.\r\n *\r\n * @param {function} fn - The listener function to be added.\r\n */\r\nexport const listen = (fn) => {\r\n  logging.listeners.push(fn);\r\n};\r\n\r\n/**\r\n * Toggles the standard output (console) logging.\r\n *\r\n * @param {boolean} enabled - If true, enables console logging; if false,\r\n * disables it.\r\n */\r\nexport const toggleSTDOut = (enabled) => {\r\n  logging.toConsole = enabled;\r\n};\r\n\r\nexport default {\r\n  log,\r\n  logWithStack,\r\n  setLogLevel,\r\n  enableFileLogging,\r\n  initLogging,\r\n  listen,\r\n  toggleSTDOut\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { join } from 'path';\r\nimport { fileURLToPath } from 'url';\r\n\r\nimport { defaultConfig } from '../lib/schemas/config.js';\r\nimport { log, logWithStack } from './logger.js';\r\n\r\nconst MAX_BACKOFF_ATTEMPTS = 6;\r\n\r\nexport const __dirname = fileURLToPath(new URL('../.', import.meta.url));\r\n\r\n/**\r\n * Clears and standardizes text by replacing multiple consecutive whitespace\r\n * characters with a single space and trimming any leading or trailing\r\n * whitespace.\r\n *\r\n * @param {string} text - The input text to be cleared.\r\n * @param {RegExp} [rule=/\\s\\s+/g] - The regular expression rule to match\r\n * multiple consecutive whitespace characters.\r\n * @param {string} [replacer=' '] - The string used to replace multiple\r\n * consecutive whitespace characters.\r\n *\r\n * @returns {string} - The cleared and standardized text.\r\n */\r\nexport const clearText = (text, rule = /\\s\\s+/g, replacer = ' ') =>\r\n  text.replaceAll(rule, replacer).trim();\r\n\r\n/**\r\n * Implements an exponential backoff strategy for retrying a function until\r\n * a certain number of attempts are reached.\r\n *\r\n * @param {Function} fn - The function to be retried.\r\n * @param {number} [attempt=0] - The current attempt number.\r\n * @param {...any} args - Arguments to be passed to the function.\r\n *\r\n * @returns {Promise} - A promise that resolves to the result of the function\r\n * if successful.\r\n *\r\n * @throws {Error} - Throws an error if the maximum number of attempts\r\n * is reached.\r\n */\r\nexport const expBackoff = async (fn, attempt = 0, ...args) => {\r\n  try {\r\n    // Try to call the function\r\n    return await fn(...args);\r\n  } catch (error) {\r\n    // Calculate delay in ms\r\n    const delayInMs = 2 ** attempt * 1000;\r\n\r\n    // If the attempt exceeds the maximum attempts of reapeat, throw an error\r\n    if (++attempt >= MAX_BACKOFF_ATTEMPTS) {\r\n      throw error;\r\n    }\r\n\r\n    // Wait given amount of time\r\n    await new Promise((response) => setTimeout(response, delayInMs));\r\n    log(\r\n      3,\r\n      `[pool] Waited ${delayInMs}ms until next call for the resource id: ${args[0]}.`\r\n    );\r\n\r\n    // Try again\r\n    return expBackoff(fn, attempt, ...args);\r\n  }\r\n};\r\n\r\n/**\r\n * Fixes the export type based on MIME types and file extensions.\r\n *\r\n * @param {string} type - The original export type.\r\n * @param {string} outfile - The file path or name.\r\n *\r\n * @returns {string} - The corrected export type.\r\n */\r\nexport const fixType = (type, outfile) => {\r\n  // MIME types\r\n  const mimeTypes = {\r\n    'image/png': 'png',\r\n    'image/jpeg': 'jpeg',\r\n    'application/pdf': 'pdf',\r\n    'image/svg+xml': 'svg'\r\n  };\r\n\r\n  // Formats\r\n  const formats = ['png', 'jpeg', 'pdf', 'svg'];\r\n\r\n  // Check if type and outfile's extensions are the same\r\n  if (outfile) {\r\n    const outType = outfile.split('.').pop();\r\n\r\n    if (outType === 'jpg') {\r\n      type = 'jpeg';\r\n    } else if (formats.includes(outType) && type !== outType) {\r\n      type = outType;\r\n    }\r\n  }\r\n\r\n  // Return a correct type\r\n  return mimeTypes[type] || formats.find((t) => t === type) || 'png';\r\n};\r\n\r\n/**\r\n * Handles and validates resources for export.\r\n *\r\n * @param {Object|string} resources - The resources to be handled. Can be either\r\n * a JSON object, stringified JSON or a path to a JSON file.\r\n * @param {boolean} allowFileResources - Whether to allow loading resources from\r\n * files.\r\n *\r\n * @returns {Object|undefined} - The handled resources or undefined if no valid\r\n * resources are found.\r\n */\r\nexport const handleResources = (resources = false, allowFileResources) => {\r\n  const allowedProps = ['js', 'css', 'files'];\r\n\r\n  let handledResources = resources;\r\n  let correctResources = false;\r\n\r\n  // Try to load resources from a file\r\n  if (allowFileResources && resources.endsWith('.json')) {\r\n    try {\r\n      handledResources = isCorrectJSON(readFileSync(resources, 'utf8'));\r\n    } catch (error) {\r\n      return logWithStack(2, error, `[cli] No resources found.`);\r\n    }\r\n  } else {\r\n    // Try to get JSON\r\n    handledResources = isCorrectJSON(resources);\r\n\r\n    // Get rid of the files section\r\n    if (handledResources && !allowFileResources) {\r\n      delete handledResources.files;\r\n    }\r\n  }\r\n\r\n  // Filter from unnecessary properties\r\n  for (const propName in handledResources) {\r\n    if (!allowedProps.includes(propName)) {\r\n      delete handledResources[propName];\r\n    } else if (!correctResources) {\r\n      correctResources = true;\r\n    }\r\n  }\r\n\r\n  // Check if at least one of allowed properties is present\r\n  if (!correctResources) {\r\n    return log(3, `[cli] No resources found.`);\r\n  }\r\n\r\n  // Handle files section\r\n  if (handledResources.files) {\r\n    handledResources.files = handledResources.files.map((item) => item.trim());\r\n    if (!handledResources.files || handledResources.files.length <= 0) {\r\n      delete handledResources.files;\r\n    }\r\n  }\r\n\r\n  // Return resources\r\n  return handledResources;\r\n};\r\n\r\n/**\r\n * Validates and parses JSON data. Checks if provided data is or can\r\n * be a correct JSON. If a primitive is provided, it is stringified and returned.\r\n *\r\n * @param {Object|string} data - The JSON data to be validated and parsed.\r\n * @param {boolean} toString - Whether to return a stringified representation\r\n * of the parsed JSON.\r\n *\r\n * @returns {Object|string|boolean} - The parsed JSON object, stringified JSON,\r\n * or false if validation fails.\r\n */\r\nexport function isCorrectJSON(data, toString) {\r\n  try {\r\n    // Get the string representation if not already before parsing\r\n    const parsedData = JSON.parse(\r\n      typeof data !== 'string' ? JSON.stringify(data) : data\r\n    );\r\n\r\n    // Return a stringified representation of a JSON if required\r\n    if (typeof parsedData !== 'string' && toString) {\r\n      return JSON.stringify(parsedData);\r\n    }\r\n\r\n    // Return a JSON\r\n    return parsedData;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if the given item is an object.\r\n *\r\n * @param {any} item - The item to be checked.\r\n *\r\n * @returns {boolean} - True if the item is an object, false otherwise.\r\n */\r\nexport const isObject = (item) =>\r\n  typeof item === 'object' && !Array.isArray(item) && item !== null;\r\n\r\n/**\r\n * Checks if the given object is empty.\r\n *\r\n * @param {Object} item - The object to be checked.\r\n *\r\n * @returns {boolean} - True if the object is empty, false otherwise.\r\n */\r\nexport const isObjectEmpty = (item) =>\r\n  typeof item === 'object' &&\r\n  !Array.isArray(item) &&\r\n  item !== null &&\r\n  Object.keys(item).length === 0;\r\n\r\n/**\r\n * Checks if a private IP range URL is found in the given string.\r\n *\r\n * @param {string} item - The string to be checked for a private IP range URL.\r\n *\r\n * @returns {boolean} - True if a private IP range URL is found, false\r\n * otherwise.\r\n */\r\nexport const isPrivateRangeUrlFound = (item) => {\r\n  const regexPatterns = [\r\n    /xlink:href=\"(?:http:\\/\\/|https:\\/\\/)?localhost\\b/,\r\n    /xlink:href=\"(?:http:\\/\\/|https:\\/\\/)?10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b/,\r\n    /xlink:href=\"(?:http:\\/\\/|https:\\/\\/)?127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b/,\r\n    /xlink:href=\"(?:http:\\/\\/|https:\\/\\/)?172\\.(1[6-9]|2[0-9]|3[0-1])\\.\\d{1,3}\\.\\d{1,3}\\b/,\r\n    /xlink:href=\"(?:http:\\/\\/|https:\\/\\/)?192\\.168\\.\\d{1,3}\\.\\d{1,3}\\b/\r\n  ];\r\n\r\n  return regexPatterns.some((pattern) => pattern.test(item));\r\n};\r\n\r\n/**\r\n * Creates a deep copy of the given object or array.\r\n *\r\n * @param {Object|Array} obj - The object or array to be deeply copied.\r\n *\r\n * @returns {Object|Array} - The deep copy of the provided object or array.\r\n */\r\nexport const deepCopy = (obj) => {\r\n  if (obj === null || typeof obj !== 'object') {\r\n    return obj;\r\n  }\r\n\r\n  const copy = Array.isArray(obj) ? [] : {};\r\n\r\n  for (const key in obj) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n      copy[key] = deepCopy(obj[key]);\r\n    }\r\n  }\r\n\r\n  return copy;\r\n};\r\n\r\n/**\r\n * Converts the provided options object to a JSON-formatted string with the\r\n * option to preserve functions.\r\n *\r\n * @param {Object} options - The options object to be converted to a string.\r\n * @param {boolean} allowFunctions - If set to true, functions are preserved\r\n * in the output.\r\n *\r\n * @returns {string} - The JSON-formatted string representing the options.\r\n */\r\nexport const optionsStringify = (options, allowFunctions) => {\r\n  const replacerCallback = (name, value) => {\r\n    if (typeof value === 'string') {\r\n      value = value.trim();\r\n\r\n      // If allowFunctions is set to true, preserve functions\r\n      if (\r\n        (value.startsWith('function(') || value.startsWith('function (')) &&\r\n        value.endsWith('}')\r\n      ) {\r\n        value = allowFunctions\r\n          ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\r\n          : undefined;\r\n      }\r\n    }\r\n\r\n    return typeof value === 'function'\r\n      ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\r\n      : value;\r\n  };\r\n\r\n  // Stringify options and if required, replace special functions marks\r\n  return JSON.stringify(options, replacerCallback).replaceAll(\r\n    /\"EXP_FUN|EXP_FUN\"/g,\r\n    ''\r\n  );\r\n};\r\n\r\n/**\r\n * Prints the Highcharts Export Server logo and version information.\r\n *\r\n * @param {boolean} noLogo - If true, only prints version information without\r\n * the logo.\r\n */\r\nexport const printLogo = (noLogo) => {\r\n  // Get package version either from env or from package.json\r\n  const packageVersion = JSON.parse(\r\n    readFileSync(join(__dirname, 'package.json'))\r\n  ).version;\r\n\r\n  // Print text only\r\n  if (noLogo) {\r\n    console.log(`Starting Highcharts Export Server v${packageVersion}...`);\r\n    return;\r\n  }\r\n\r\n  // Print the logo\r\n  console.log(\r\n    readFileSync(__dirname + '/msg/startup.msg').toString().bold.yellow,\r\n    `v${packageVersion}`\r\n  );\r\n};\r\n\r\n/**\r\n * Prints the usage information for CLI arguments. If required, it can list\r\n * properties recursively\r\n */\r\nexport function printUsage() {\r\n  const pad = 48;\r\n  const readme = 'https://github.com/highcharts/node-export-server#readme';\r\n\r\n  // Display readme information\r\n  console.log(\r\n    '\\nUsage of CLI arguments:'.bold,\r\n    '\\n------',\r\n    `\\nFor more detailed information, visit the readme at: ${readme.bold.yellow}.`\r\n  );\r\n\r\n  const cycleCategories = (options) => {\r\n    for (const [name, option] of Object.entries(options)) {\r\n      // If category has more levels, go further\r\n      if (!Object.prototype.hasOwnProperty.call(option, 'value')) {\r\n        cycleCategories(option);\r\n      } else {\r\n        let descName = `  --${option.cliName || name} ${\r\n          ('<' + option.type + '>').green\r\n        } `;\r\n        if (descName.length < pad) {\r\n          for (let i = descName.length; i < pad; i++) {\r\n            descName += '.';\r\n          }\r\n        }\r\n\r\n        // Display correctly aligned messages\r\n        console.log(\r\n          descName,\r\n          option.description,\r\n          `[Default: ${option.value.toString().bold}]`.blue\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  // Cycle through options of each categories and display the usage info\r\n  Object.keys(defaultConfig).forEach((category) => {\r\n    // Only puppeteer and highcharts categories cannot be configured through CLI\r\n    if (!['puppeteer', 'highcharts'].includes(category)) {\r\n      console.log(`\\n${category.toUpperCase()}`.red);\r\n      cycleCategories(defaultConfig[category]);\r\n    }\r\n  });\r\n  console.log('\\n');\r\n}\r\n\r\n/**\r\n * Rounds a number to the specified precision.\r\n *\r\n * @param {number} value - The number to be rounded.\r\n * @param {number} precision - The number of decimal places to round to.\r\n *\r\n * @returns {number} - The rounded number.\r\n */\r\nexport const roundNumber = (value, precision = 1) => {\r\n  const multiplier = Math.pow(10, precision || 0);\r\n  return Math.round(+value * multiplier) / multiplier;\r\n};\r\n\r\n/**\r\n * Converts a value to a boolean.\r\n *\r\n * @param {any} item - The value to be converted to a boolean.\r\n *\r\n * @returns {boolean} - The boolean representation of the input value.\r\n */\r\nexport const toBoolean = (item) =>\r\n  ['false', 'undefined', 'null', 'NaN', '0', ''].includes(item)\r\n    ? false\r\n    : !!item;\r\n\r\n/**\r\n * Wraps custom code to execute it safely.\r\n *\r\n * @param {string} customCode - The custom code to be wrapped.\r\n * @param {boolean} allowFileResources - Flag to allow loading code from a file.\r\n *\r\n * @returns {string|boolean} - The wrapped custom code or false if wrapping\r\n * fails.\r\n */\r\nexport const wrapAround = (customCode, allowFileResources) => {\r\n  if (customCode && typeof customCode === 'string') {\r\n    customCode = customCode.trim();\r\n\r\n    if (customCode.endsWith('.js')) {\r\n      return allowFileResources\r\n        ? wrapAround(readFileSync(customCode, 'utf8'))\r\n        : false;\r\n    } else if (\r\n      customCode.startsWith('function()') ||\r\n      customCode.startsWith('function ()') ||\r\n      customCode.startsWith('()=>') ||\r\n      customCode.startsWith('() =>')\r\n    ) {\r\n      return `(${customCode})()`;\r\n    }\r\n    return customCode.replace(/;$/, '');\r\n  }\r\n};\r\n\r\n/**\r\n * Utility to measure elapsed time using the Node.js process.hrtime() method.\r\n *\r\n * @returns {function(): number} - A function to calculate the elapsed time\r\n * in milliseconds.\r\n */\r\nexport const measureTime = () => {\r\n  const start = process.hrtime.bigint();\r\n  return () => Number(process.hrtime.bigint() - start) / 1000000;\r\n};\r\n\r\nexport default {\r\n  __dirname,\r\n  clearText,\r\n  expBackoff,\r\n  fixType,\r\n  handleResources,\r\n  isCorrectJSON,\r\n  isObject,\r\n  isObjectEmpty,\r\n  isPrivateRangeUrlFound,\r\n  optionsStringify,\r\n  printLogo,\r\n  printUsage,\r\n  roundNumber,\r\n  toBoolean,\r\n  wrapAround,\r\n  measureTime\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { existsSync, readFileSync, promises as fsPromises } from 'fs';\r\n\r\nimport prompts from 'prompts';\r\n\r\nimport {\r\n  absoluteProps,\r\n  defaultConfig,\r\n  nestedArgs,\r\n  promptsConfig\r\n} from './schemas/config.js';\r\nimport { envs } from './envs.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport { deepCopy, isObject, printUsage, toBoolean } from './utils.js';\r\n\r\nlet generalOptions = {};\r\n\r\n/**\r\n * Retrieves and returns the general options for the export process.\r\n *\r\n * @returns {Object} The general options object.\r\n */\r\nexport const getOptions = () => generalOptions;\r\n\r\n/**\r\n * Initializes and sets the general options for the server instace, keeping\r\n * the principle of the options load priority. It accepts optional userOptions\r\n * and args from the CLI.\r\n *\r\n * @param {Object} userOptions - User-provided options for customization.\r\n * @param {Array} args - Command-line arguments for additional configuration\r\n * (CLI usage).\r\n *\r\n * @returns {Object} The updated general options object.\r\n */\r\nexport const setOptions = (userOptions, args) => {\r\n  // Only for the CLI usage\r\n  if (args?.length) {\r\n    // Get the additional options from the custom JSON file\r\n    generalOptions = loadConfigFile(args);\r\n  }\r\n\r\n  // Update the default config with a correct option values\r\n  updateDefaultConfig(defaultConfig, generalOptions);\r\n\r\n  // Set values for server's options and returns them\r\n  generalOptions = initOptions(defaultConfig);\r\n\r\n  // Apply user options if there are any\r\n  if (userOptions) {\r\n    // Merge user options\r\n    generalOptions = mergeConfigOptions(\r\n      generalOptions,\r\n      userOptions,\r\n      absoluteProps\r\n    );\r\n  }\r\n\r\n  // Only for the CLI usage\r\n  if (args?.length) {\r\n    // Pair provided arguments\r\n    generalOptions = pairArgumentValue(generalOptions, args, defaultConfig);\r\n  }\r\n\r\n  // Return final general options\r\n  return generalOptions;\r\n};\r\n\r\n/**\r\n * Allows manual configuration based on specified prompts and saves\r\n * the configuration to a file.\r\n *\r\n * @param {string} configFileName - The name of the configuration file.\r\n *\r\n * @returns {Promise<boolean>} A Promise that resolves to true once the manual\r\n * configuration is completed and saved.\r\n */\r\nexport const manualConfig = async (configFileName) => {\r\n  // Prepare a config object\r\n  let configFile = {};\r\n\r\n  // Check if provided config file exists\r\n  if (existsSync(configFileName)) {\r\n    configFile = JSON.parse(readFileSync(configFileName, 'utf8'));\r\n  }\r\n\r\n  // Question about a configuration category\r\n  const onSubmit = async (p, categories) => {\r\n    let questionsCounter = 0;\r\n    let allQuestions = [];\r\n\r\n    // Create a corresponding property in the manualConfig object\r\n    for (const section of categories) {\r\n      // Mark each option with a section\r\n      promptsConfig[section] = promptsConfig[section].map((option) => ({\r\n        ...option,\r\n        section\r\n      }));\r\n\r\n      // Collect the questions\r\n      allQuestions = [...allQuestions, ...promptsConfig[section]];\r\n    }\r\n\r\n    await prompts(allQuestions, {\r\n      onSubmit: async (prompt, answer) => {\r\n        // Get the default modules\r\n        if (prompt.name === 'modules') {\r\n          answer = answer.length\r\n            ? answer.map((module) => prompt.choices[module])\r\n            : prompt.choices;\r\n\r\n          configFile[prompt.section][prompt.name] = answer;\r\n        } else {\r\n          configFile[prompt.section] = recursiveProps(\r\n            Object.assign({}, configFile[prompt.section] || {}),\r\n            prompt.name.split('.'),\r\n            prompt.choices ? prompt.choices[answer] : answer\r\n          );\r\n        }\r\n\r\n        if (++questionsCounter === allQuestions.length) {\r\n          try {\r\n            await fsPromises.writeFile(\r\n              configFileName,\r\n              JSON.stringify(configFile, null, 2),\r\n              'utf8'\r\n            );\r\n          } catch (error) {\r\n            logWithStack(\r\n              1,\r\n              error,\r\n              `[config] An error occurred while creating the ${configFileName} file.`\r\n            );\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return true;\r\n  };\r\n\r\n  // Find the categories\r\n  const choices = Object.keys(promptsConfig).map((choice) => ({\r\n    title: `${choice} options`,\r\n    value: choice\r\n  }));\r\n\r\n  // Category prompt\r\n  return prompts(\r\n    {\r\n      type: 'multiselect',\r\n      name: 'category',\r\n      message: 'Which category do you want to configure?',\r\n      hint: 'Space: Select specific, A: Select all, Enter: Confirm.',\r\n      instructions: '',\r\n      choices\r\n    },\r\n    { onSubmit }\r\n  );\r\n};\r\n\r\n/**\r\n * Maps old-structured (PhantomJS) options to a new configuration format\r\n * (Puppeteer).\r\n *\r\n * @param {Object} oldOptions - Old-structured options to be mapped.\r\n *\r\n * @returns {Object} New options structured based on the defined nestedArgs\r\n * mapping.\r\n */\r\nexport const mapToNewConfig = (oldOptions) => {\r\n  const newOptions = {};\r\n  // Cycle through old-structured options\r\n  for (const [key, value] of Object.entries(oldOptions)) {\r\n    const propertiesChain = nestedArgs[key] ? nestedArgs[key].split('.') : [];\r\n\r\n    // Populate object in correct properties levels\r\n    propertiesChain.reduce(\r\n      (obj, prop, index) =>\r\n        (obj[prop] =\r\n          propertiesChain.length - 1 === index ? value : obj[prop] || {}),\r\n      newOptions\r\n    );\r\n  }\r\n  return newOptions;\r\n};\r\n\r\n/**\r\n * Merges two sets of configuration options, considering absolute properties.\r\n *\r\n * @param {Object} options - Original configuration options.\r\n * @param {Object} newOptions - New configuration options to be merged.\r\n * @param {Array} absoluteProps - List of properties that should\r\n * not be recursively merged.\r\n *\r\n * @returns {Object} Merged configuration options.\r\n */\r\nexport const mergeConfigOptions = (options, newOptions, absoluteProps = []) => {\r\n  const mergedOptions = deepCopy(options);\r\n\r\n  for (const [key, value] of Object.entries(newOptions)) {\r\n    mergedOptions[key] =\r\n      isObject(value) &&\r\n      !absoluteProps.includes(key) &&\r\n      mergedOptions[key] !== undefined\r\n        ? mergeConfigOptions(mergedOptions[key], value, absoluteProps)\r\n        : value !== undefined\r\n          ? value\r\n          : mergedOptions[key];\r\n  }\r\n\r\n  return mergedOptions;\r\n};\r\n\r\n/**\r\n * Initializes export settings based on provided exportOptions\r\n * and generalOptions.\r\n *\r\n * @param {Object} exportOptions - Options specific to the export process.\r\n * @param {Object} generalOptions - General configuration options.\r\n *\r\n * @returns {Object} Initialized export settings.\r\n */\r\nexport const initExportSettings = (exportOptions, generalOptions = {}) => {\r\n  let options = {};\r\n\r\n  if (exportOptions.svg) {\r\n    options = deepCopy(generalOptions);\r\n    options.export.type = exportOptions.type || exportOptions.export.type;\r\n    options.export.scale = exportOptions.scale || exportOptions.export.scale;\r\n    options.export.outfile =\r\n      exportOptions.outfile || exportOptions.export.outfile;\r\n    options.payload = {\r\n      svg: exportOptions.svg\r\n    };\r\n  } else {\r\n    options = mergeConfigOptions(\r\n      generalOptions,\r\n      exportOptions,\r\n      // Omit going down recursively with the belows\r\n      absoluteProps\r\n    );\r\n  }\r\n\r\n  options.export.outfile =\r\n    options.export?.outfile || `chart.${options.export?.type || 'png'}`;\r\n  return options;\r\n};\r\n\r\n/**\r\n * Loads additional configuration from a specified file using\r\n * the --loadConfig option.\r\n *\r\n * @param {Array} args - Command-line arguments to check for\r\n * the --loadConfig option.\r\n *\r\n * @returns {Object} Additional configuration loaded from the specified file,\r\n * or an empty object if not found or invalid.\r\n */\r\nfunction loadConfigFile(args) {\r\n  // Check if the --loadConfig option was used\r\n  const configIndex = args.findIndex(\r\n    (arg) => arg.replace(/-/g, '') === 'loadConfig'\r\n  );\r\n\r\n  // Check if the --loadConfig has a value\r\n  if (configIndex > -1 && args[configIndex + 1]) {\r\n    const fileName = args[configIndex + 1];\r\n    try {\r\n      // Check if an additional config file is a correct JSON file\r\n      if (fileName && fileName.endsWith('.json')) {\r\n        // Load an optional custom JSON config file\r\n        return JSON.parse(readFileSync(fileName));\r\n      }\r\n    } catch (error) {\r\n      logWithStack(\r\n        2,\r\n        error,\r\n        `[config] Unable to load the configuration from the ${fileName} file.`\r\n      );\r\n    }\r\n  }\r\n\r\n  // No additional options to return\r\n  return {};\r\n}\r\n\r\n/**\r\n * Updates the default configuration object with values from a custom object\r\n * and environment variables.\r\n *\r\n * @param {Object} configObj - The default configuration object.\r\n * @param {Object} customObj - Custom configuration object to override defaults.\r\n * @param {string} propChain - Property chain for tracking nested properties\r\n * during recursion.\r\n */\r\nfunction updateDefaultConfig(configObj, customObj = {}, propChain = '') {\r\n  Object.keys(configObj).forEach((key) => {\r\n    const entry = configObj[key];\r\n    const customValue = customObj && customObj[key];\r\n\r\n    if (typeof entry.value === 'undefined') {\r\n      updateDefaultConfig(entry, customValue, `${propChain}.${key}`);\r\n    } else {\r\n      // If a value from a custom JSON exists, it take precedence\r\n      if (customValue !== undefined) {\r\n        entry.value = customValue;\r\n      }\r\n\r\n      // If a value from an env variable exists, it take precedence\r\n      if (entry.envLink in envs && envs[entry.envLink] !== undefined) {\r\n        entry.value = envs[entry.envLink];\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Initializes options object based on provided items, setting values from\r\n * nested properties recursively.\r\n *\r\n * @param {Object} items - Configuration items to be used for initializing\r\n * options.\r\n *\r\n * @returns {Object} Initialized options object.\r\n */\r\nfunction initOptions(items) {\r\n  let options = {};\r\n  for (const [name, item] of Object.entries(items)) {\r\n    options[name] = Object.prototype.hasOwnProperty.call(item, 'value')\r\n      ? item.value\r\n      : initOptions(item);\r\n  }\r\n  return options;\r\n}\r\n\r\n/**\r\n * Pairs argument values with corresponding options in the configuration,\r\n * updating the options object.\r\n *\r\n * @param {Object} options - Configuration options object to be updated.\r\n * @param {Array} args - Command-line arguments containing values for specific\r\n * options.\r\n * @param {Object} defaultConfig - Default configuration object for reference.\r\n *\r\n * @returns {Object} Updated options object.\r\n */\r\nfunction pairArgumentValue(options, args, defaultConfig) {\r\n  let showUsage = false;\r\n  for (let i = 0; i < args.length; i++) {\r\n    const option = args[i].replace(/-/g, '');\r\n\r\n    // Find the right place for property's value\r\n    const propertiesChain = nestedArgs[option]\r\n      ? nestedArgs[option].split('.')\r\n      : [];\r\n\r\n    // Get the correct type for CLI args which are passed as strings\r\n    let argumentType;\r\n    propertiesChain.reduce((obj, prop, index) => {\r\n      if (propertiesChain.length - 1 === index) {\r\n        argumentType = obj[prop].type;\r\n      }\r\n      return obj[prop];\r\n    }, defaultConfig);\r\n\r\n    propertiesChain.reduce((obj, prop, index) => {\r\n      if (propertiesChain.length - 1 === index) {\r\n        // Finds an option and set a corresponding value\r\n        if (typeof obj[prop] !== 'undefined') {\r\n          if (args[++i]) {\r\n            if (argumentType === 'boolean') {\r\n              obj[prop] = toBoolean(args[i]);\r\n            } else if (argumentType === 'number') {\r\n              obj[prop] = +args[i];\r\n            } else if (argumentType.indexOf(']') >= 0) {\r\n              obj[prop] = args[i].split(',');\r\n            } else {\r\n              obj[prop] = args[i];\r\n            }\r\n          } else {\r\n            log(\r\n              2,\r\n              `[config] Missing value for the '${option}' argument. Using the default value.`\r\n            );\r\n            showUsage = true;\r\n          }\r\n        }\r\n      }\r\n      return obj[prop];\r\n    }, options);\r\n  }\r\n\r\n  // Display the usage for the reference if needed\r\n  if (showUsage) {\r\n    printUsage(defaultConfig);\r\n  }\r\n\r\n  return options;\r\n}\r\n\r\n/**\r\n * Recursively updates properties in an object based on nested names and assigns\r\n * the final value.\r\n *\r\n * @param {Object} objectToUpdate - The object to be updated.\r\n * @param {Array} nestedNames - Array of nested property names.\r\n * @param {any} value - The final value to be assigned.\r\n *\r\n * @returns {Object} Updated object with assigned values.\r\n */\r\nfunction recursiveProps(objectToUpdate, nestedNames, value) {\r\n  while (nestedNames.length > 1) {\r\n    const propName = nestedNames.shift();\r\n\r\n    // Create a property in object if it doesn't exist\r\n    if (!Object.prototype.hasOwnProperty.call(objectToUpdate, propName)) {\r\n      objectToUpdate[propName] = {};\r\n    }\r\n\r\n    // Call function again if there still names to go\r\n    objectToUpdate[propName] = recursiveProps(\r\n      Object.assign({}, objectToUpdate[propName]),\r\n      nestedNames,\r\n      value\r\n    );\r\n\r\n    return objectToUpdate;\r\n  }\r\n\r\n  // Assign the final value\r\n  objectToUpdate[nestedNames[0]] = value;\r\n  return objectToUpdate;\r\n}\r\n\r\nexport default {\r\n  getOptions,\r\n  setOptions,\r\n  manualConfig,\r\n  mapToNewConfig,\r\n  mergeConfigOptions,\r\n  initExportSettings\r\n};\r\n","/**\r\n * This module exports two functions: fetch (for GET requests) and post (for POST requests).\r\n */\r\n\r\nimport http from 'http';\r\nimport https from 'https';\r\n\r\n/**\r\n * Returns the HTTP or HTTPS protocol module based on the provided URL.\r\n *\r\n * @param {string} url - The URL to determine the protocol.\r\n *\r\n * @returns {Object} The HTTP or HTTPS protocol module (http or https).\r\n */\r\nconst getProtocol = (url) => (url.startsWith('https') ? https : http);\r\n\r\n/**\r\n * Fetches data from the specified URL using either HTTP or HTTPS protocol.\r\n *\r\n * @param {string} url - The URL to fetch data from.\r\n * @param {Object} requestOptions - Options for the HTTP request (optional).\r\n *\r\n * @returns {Promise<Object>} Promise resolving to the HTTP response object\r\n * with added 'text' property or rejecting with an error.\r\n */\r\nasync function fetch(url, requestOptions = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const protocol = getProtocol(url);\r\n\r\n    protocol\r\n      .get(url, requestOptions, (res) => {\r\n        let data = '';\r\n\r\n        // A chunk of data has been received.\r\n        res.on('data', (chunk) => {\r\n          data += chunk;\r\n        });\r\n\r\n        // The whole response has been received.\r\n        res.on('end', () => {\r\n          if (!data) {\r\n            reject('Nothing was fetched from the URL.');\r\n          }\r\n\r\n          res.text = data;\r\n          resolve(res);\r\n        });\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\n/**\r\n * Sends a POST request to the specified URL with the provided JSON body using\r\n * either HTTP or HTTPS protocol.\r\n *\r\n * @param {string} url - The URL to send the POST request to.\r\n * @param {Object} body - The JSON body to include in the POST request\r\n * (optional, default is an empty object).\r\n * @param {Object} requestOptions - Options for the HTTP request (optional).\r\n *\r\n * @returns {Promise<Object>} Promise resolving to the HTTP response object with\r\n * added 'text' property or rejecting with an error.\r\n */\r\nasync function post(url, body = {}, requestOptions = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const protocol = getProtocol(url);\r\n    const data = JSON.stringify(body);\r\n\r\n    // Set default headers and merge with requestOptions\r\n    const options = Object.assign(\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Content-Length': data.length\r\n        }\r\n      },\r\n      requestOptions\r\n    );\r\n\r\n    const req = protocol\r\n      .request(url, options, (res) => {\r\n        let responseData = '';\r\n\r\n        // A chunk of data has been received.\r\n        res.on('data', (chunk) => {\r\n          responseData += chunk;\r\n        });\r\n\r\n        // The whole response has been received.\r\n        res.on('end', () => {\r\n          try {\r\n            res.text = responseData;\r\n            resolve(res);\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        });\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error);\r\n      });\r\n\r\n    // Write the request body and end the request.\r\n    req.write(data);\r\n    req.end();\r\n  });\r\n}\r\n\r\nexport default fetch;\r\nexport { fetch, post };\r\n","class ExportError extends Error {\r\n  constructor(message) {\r\n    super();\r\n    this.message = message;\r\n    this.stackMessage = message;\r\n  }\r\n\r\n  setError(error) {\r\n    this.error = error;\r\n    if (error.name) {\r\n      this.name = error.name;\r\n    }\r\n    if (error.statusCode) {\r\n      this.statusCode = error.statusCode;\r\n    }\r\n    if (error.stack) {\r\n      this.stackMessage = error.message;\r\n      this.stack = error.stack;\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default ExportError;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// The cache manager manages the Highcharts library and its dependencies.\r\n// The cache itself is stored in .cache, and is checked by the config system\r\n// before starting the service\r\n\r\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';\r\nimport { join } from 'path';\r\n\r\nimport { HttpsProxyAgent } from 'https-proxy-agent';\r\n\r\nimport { getOptions } from './config.js';\r\nimport { envs } from './envs.js';\r\nimport { fetch } from './fetch.js';\r\nimport { log } from './logger.js';\r\nimport { __dirname } from './utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nconst cache = {\r\n  cdnURL: 'https://code.highcharts.com/',\r\n  activeManifest: {},\r\n  sources: '',\r\n  hcVersion: ''\r\n};\r\n\r\n/**\r\n * Extracts and caches the Highcharts version from the sources string.\r\n *\r\n * @returns {string} The extracted Highcharts version.\r\n */\r\nexport const extractVersion = (cache) => {\r\n  return cache.sources\r\n    .substring(0, cache.sources.indexOf('*/'))\r\n    .replace('/*', '')\r\n    .replace('*/', '')\r\n    .replace(/\\n/g, '')\r\n    .trim();\r\n};\r\n\r\n/**\r\n * Extracts the Highcharts module name based on the scriptPath.\r\n */\r\nexport const extractModuleName = (scriptPath) => {\r\n  return scriptPath.replace(\r\n    /(.*)\\/|(.*)modules\\/|stock\\/(.*)indicators\\/|maps\\/(.*)modules\\//gi,\r\n    ''\r\n  );\r\n};\r\n\r\n/**\r\n * Saves the provided configuration and fetched modules to the cache manifest\r\n * file.\r\n *\r\n * @param {object} config - Highcharts-related configuration object.\r\n * @param {object} fetchedModules - An object that contains mapped names of\r\n * fetched Highcharts modules to use.\r\n *\r\n * @throws {ExportError} Throws an ExportError if an error occurs while writing\r\n * the cache manifest.\r\n */\r\nexport const saveConfigToManifest = async (config, fetchedModules) => {\r\n  const newManifest = {\r\n    version: config.version,\r\n    modules: fetchedModules || {}\r\n  };\r\n\r\n  // Update cache object with the current modules\r\n  cache.activeManifest = newManifest;\r\n\r\n  log(3, '[cache] Writing a new manifest.');\r\n  try {\r\n    writeFileSync(\r\n      join(__dirname, config.cachePath, 'manifest.json'),\r\n      JSON.stringify(newManifest),\r\n      'utf8'\r\n    );\r\n  } catch (error) {\r\n    throw new ExportError('[cache] Error writing the cache manifest.').setError(\r\n      error\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches a single script and updates the fetchedModules accordingly.\r\n *\r\n * @param {string} script - A path to script to get.\r\n * @param {Object} requestOptions - Additional options for the proxy agent\r\n * to use for a request.\r\n * @param {Object} fetchedModules - An object which tracks which Highcharts\r\n * modules have been fetched.\r\n * @param {boolean} shouldThrowError - A flag to indicate if the error should be\r\n * thrown. This should be used only for the core scripts.\r\n *\r\n * @returns {Promise<string>} A Promise resolving to the text representation\r\n * of the fetched script.\r\n *\r\n * @throws {ExportError} Throws an ExportError if there is a problem with\r\n * fetching the script.\r\n */\r\nexport const fetchAndProcessScript = async (\r\n  script,\r\n  requestOptions,\r\n  fetchedModules,\r\n  shouldThrowError = false\r\n) => {\r\n  // Get rid of the .js from the custom strings\r\n  if (script.endsWith('.js')) {\r\n    script = script.substring(0, script.length - 3);\r\n  }\r\n\r\n  log(4, `[cache] Fetching script - ${script}.js`);\r\n\r\n  // Fetch the script\r\n  const response = await fetch(`${script}.js`, requestOptions);\r\n\r\n  // If OK, return its text representation\r\n  if (response.statusCode === 200 && typeof response.text == 'string') {\r\n    if (fetchedModules) {\r\n      const moduleName = extractModuleName(script);\r\n      fetchedModules[moduleName] = 1;\r\n    }\r\n\r\n    return response.text;\r\n  }\r\n\r\n  if (shouldThrowError) {\r\n    throw new ExportError(\r\n      `Could not fetch the ${script}.js. The script might not exist in the requested version (status code: ${response.statusCode}).`\r\n    ).setError(response);\r\n  } else {\r\n    log(\r\n      2,\r\n      `[cache] Could not fetch the ${script}.js. The script might not exist in the requested version.`\r\n    );\r\n  }\r\n\r\n  return '';\r\n};\r\n\r\n/**\r\n * Fetches Highcharts scripts and customScripts from the given CDNs.\r\n *\r\n * @param {string} coreScripts - Array of Highcharts core scripts to fetch.\r\n * @param {string} moduleScripts - Array of Highcharts modules to fetch.\r\n * @param {string} customScripts - Array of custom script paths to fetch\r\n * (full URLs).\r\n * @param {object} proxyOptions - Options for the proxy agent to use for\r\n * a request.\r\n * @param {object} fetchedModules - An object which tracks which Highcharts\r\n * modules have been fetched.\r\n *\r\n * @returns {Promise<string>} The fetched scripts content joined.\r\n */\r\nexport const fetchScripts = async (\r\n  coreScripts,\r\n  moduleScripts,\r\n  customScripts,\r\n  proxyOptions,\r\n  fetchedModules\r\n) => {\r\n  // Configure proxy if exists\r\n  let proxyAgent;\r\n  const proxyHost = proxyOptions.host;\r\n  const proxyPort = proxyOptions.port;\r\n\r\n  // Try to create a Proxy Agent\r\n  if (proxyHost && proxyPort) {\r\n    try {\r\n      proxyAgent = new HttpsProxyAgent({\r\n        host: proxyHost,\r\n        port: proxyPort\r\n      });\r\n    } catch (error) {\r\n      throw new ExportError('[cache] Could not create a Proxy Agent.').setError(\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  // If exists, add proxy agent to request options\r\n  const requestOptions = proxyAgent\r\n    ? {\r\n        agent: proxyAgent,\r\n        timeout: envs.SERVER_PROXY_TIMEOUT\r\n      }\r\n    : {};\r\n\r\n  const allFetchPromises = [\r\n    ...coreScripts.map((script) =>\r\n      fetchAndProcessScript(`${script}`, requestOptions, fetchedModules, true)\r\n    ),\r\n    ...moduleScripts.map((script) =>\r\n      fetchAndProcessScript(`${script}`, requestOptions, fetchedModules)\r\n    ),\r\n    ...customScripts.map((script) =>\r\n      fetchAndProcessScript(`${script}`, requestOptions)\r\n    )\r\n  ];\r\n\r\n  const fetchedScripts = await Promise.all(allFetchPromises);\r\n  return fetchedScripts.join(';\\n');\r\n};\r\n\r\n/**\r\n * Updates the local cache with Highcharts scripts and their versions.\r\n *\r\n * @param {Object} options - Object containing all options.\r\n * @param {string} sourcePath - The path to the source file in the cache.\r\n *\r\n * @returns {Promise<object>} A Promise resolving to an object representing\r\n * the fetched modules.\r\n *\r\n * @throws {ExportError} Throws an ExportError if there is an issue updating\r\n * the local Highcharts cache.\r\n */\r\nexport const updateCache = async (\r\n  highchartsOptions,\r\n  proxyOptions,\r\n  sourcePath\r\n) => {\r\n  const version = highchartsOptions.version;\r\n  const hcVersion = version === 'latest' || !version ? '' : `${version}/`;\r\n  const cdnURL = highchartsOptions.cdnURL || cache.cdnURL;\r\n\r\n  log(\r\n    3,\r\n    `[cache] Updating cache version to Highcharts: ${hcVersion || 'latest'}.`\r\n  );\r\n\r\n  const fetchedModules = {};\r\n  try {\r\n    cache.sources = await fetchScripts(\r\n      [...highchartsOptions.core.map((c) => `${cdnURL}${hcVersion}${c}`)],\r\n      [\r\n        ...highchartsOptions.modules.map((m) =>\r\n          m === 'map'\r\n            ? `${cdnURL}maps/${hcVersion}modules/${m}`\r\n            : `${cdnURL}${hcVersion}modules/${m}`\r\n        ),\r\n        ...highchartsOptions.indicators.map(\r\n          (i) => `${cdnURL}stock/${hcVersion}indicators/${i}`\r\n        )\r\n      ],\r\n      highchartsOptions.customScripts,\r\n      proxyOptions,\r\n      fetchedModules\r\n    );\r\n\r\n    cache.hcVersion = extractVersion(cache);\r\n\r\n    // Save the fetched modules into caches' source JSON\r\n    writeFileSync(sourcePath, cache.sources);\r\n    return fetchedModules;\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[cache] Unable to update the local Highcharts cache.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates the Highcharts version in the applied configuration and checks\r\n * the cache for the new version.\r\n *\r\n * @param {string} newVersion - The new Highcharts version to be applied.\r\n *\r\n * @returns {Promise<(object|boolean)>} A Promise resolving to the updated\r\n * configuration with the new version, or false if no applied configuration\r\n * exists.\r\n */\r\nexport const updateVersion = async (newVersion) => {\r\n  const options = getOptions();\r\n  if (options?.highcharts) {\r\n    options.highcharts.version = newVersion;\r\n  }\r\n  await checkAndUpdateCache(options);\r\n};\r\n\r\n/**\r\n * Checks the cache for Highcharts dependencies, updates the cache if needed,\r\n * and loads the sources.\r\n *\r\n * @param {Object} options - Object containing all options.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the cache is checked\r\n * and updated.\r\n *\r\n * @throws {ExportError} Throws an ExportError if there is an issue updating\r\n * or reading the cache.\r\n */\r\nexport const checkAndUpdateCache = async (options) => {\r\n  const { highcharts, server } = options;\r\n  const cachePath = join(__dirname, highcharts.cachePath);\r\n\r\n  let fetchedModules;\r\n  // Prepare paths to manifest and sources from the .cache folder\r\n  const manifestPath = join(cachePath, 'manifest.json');\r\n  const sourcePath = join(cachePath, 'sources.js');\r\n\r\n  // Create the cache destination if it doesn't exist already\r\n  !existsSync(cachePath) && mkdirSync(cachePath);\r\n\r\n  // Fetch all the scripts either if manifest.json does not exist\r\n  // or if the forceFetch option is enabled\r\n  if (!existsSync(manifestPath) || highcharts.forceFetch) {\r\n    log(3, '[cache] Fetching and caching Highcharts dependencies.');\r\n    fetchedModules = await updateCache(highcharts, server.proxy, sourcePath);\r\n  } else {\r\n    let requestUpdate = false;\r\n\r\n    // Read the manifest JSON\r\n    const manifest = JSON.parse(readFileSync(manifestPath));\r\n\r\n    // Check if the modules is an array, if so, we rewrite it to a map to make\r\n    // it easier to resolve modules.\r\n    if (manifest.modules && Array.isArray(manifest.modules)) {\r\n      const moduleMap = {};\r\n      manifest.modules.forEach((m) => (moduleMap[m] = 1));\r\n      manifest.modules = moduleMap;\r\n    }\r\n\r\n    const { modules, core, indicators } = highcharts;\r\n    const numberOfModules = modules.length + core.length + indicators.length;\r\n\r\n    // Compare the loaded highcharts config with the contents in cache.\r\n    // If there are changes, fetch requested modules and products,\r\n    // and bake them into a giant blob. Save the blob.\r\n    if (manifest.version !== highcharts.version) {\r\n      log(\r\n        2,\r\n        '[cache] A Highcharts version mismatch in the cache, need to re-fetch.'\r\n      );\r\n      requestUpdate = true;\r\n    } else if (Object.keys(manifest.modules || {}).length !== numberOfModules) {\r\n      log(\r\n        2,\r\n        '[cache] The cache and the requested modules do not match, need to re-fetch.'\r\n      );\r\n      requestUpdate = true;\r\n    } else {\r\n      // Check each module, if anything is missing refetch everything\r\n      requestUpdate = (highcharts.modules || []).some((moduleName) => {\r\n        if (!manifest.modules[moduleName]) {\r\n          log(\r\n            2,\r\n            `[cache] The ${moduleName} is missing in the cache, need to re-fetch.`\r\n          );\r\n          return true;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (requestUpdate) {\r\n      fetchedModules = await updateCache(highcharts, server.proxy, sourcePath);\r\n    } else {\r\n      log(3, '[cache] Dependency cache is up to date, proceeding.');\r\n\r\n      // Load the sources\r\n      cache.sources = readFileSync(sourcePath, 'utf8');\r\n\r\n      // Get current modules map\r\n      fetchedModules = manifest.modules;\r\n\r\n      cache.hcVersion = extractVersion(cache);\r\n    }\r\n  }\r\n\r\n  // Finally, save the new manifest, which is basically our current config\r\n  // in a slightly different format\r\n  await saveConfigToManifest(highcharts, fetchedModules);\r\n};\r\n\r\nexport const getCachePath = () =>\r\n  join(__dirname, getOptions().highcharts.cachePath);\r\n\r\nexport default {\r\n  checkAndUpdateCache,\r\n  getCachePath,\r\n  updateVersion,\r\n  getCache: () => cache,\r\n  highcharts: () => cache.sources,\r\n  version: () => cache.hcVersion\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport fs from 'fs';\r\nimport * as url from 'url';\r\nimport path from 'node:path';\r\n\r\nimport puppeteer from 'puppeteer';\r\n\r\n// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1463328\r\n// Not ideal - leaves trash in the FS\r\nimport { randomBytes } from 'node:crypto';\r\n\r\nimport { getCachePath } from './cache.js';\r\nimport { log, logWithStack } from './logger.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nconst RANDOM_PID = randomBytes(64).toString('base64url');\r\nconst PUPPETEER_DIR = path.join('tmp', `puppeteer-${RANDOM_PID}`);\r\nconst DATA_DIR = path.join(PUPPETEER_DIR, 'profile');\r\n\r\n// The minimal args to speed up the browser\r\nconst minimalArgs = [\r\n  `--user-data-dir=${DATA_DIR}`,\r\n  '--autoplay-policy=user-gesture-required',\r\n  '--disable-background-networking',\r\n  '--disable-background-timer-throttling',\r\n  '--disable-backgrounding-occluded-windows',\r\n  '--disable-breakpad',\r\n  '--disable-client-side-phishing-detection',\r\n  '--disable-component-update',\r\n  '--disable-default-apps',\r\n  '--disable-dev-shm-usage',\r\n  '--disable-domain-reliability',\r\n  '--disable-extensions',\r\n  '--disable-features=AudioServiceOutOfProcess',\r\n  '--disable-hang-monitor',\r\n  '--disable-ipc-flooding-protection',\r\n  '--disable-notifications',\r\n  '--disable-offer-store-unmasked-wallet-cards',\r\n  '--disable-popup-blocking',\r\n  '--disable-print-preview',\r\n  '--disable-prompt-on-repost',\r\n  '--disable-renderer-backgrounding',\r\n  '--disable-session-crashed-bubble',\r\n  '--disable-setuid-sandbox',\r\n  '--disable-speech-api',\r\n  '--disable-sync',\r\n  '--hide-crash-restore-bubble',\r\n  '--hide-scrollbars',\r\n  '--ignore-gpu-blacklist',\r\n  '--metrics-recording-only',\r\n  '--mute-audio',\r\n  '--no-default-browser-check',\r\n  '--no-first-run',\r\n  '--no-pings',\r\n  '--no-sandbox',\r\n  '--no-zygote',\r\n  '--password-store=basic',\r\n  '--use-mock-keychain'\r\n];\r\n\r\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\r\n\r\nconst template = fs.readFileSync(\r\n  __dirname + '/../templates/template.html',\r\n  'utf8'\r\n);\r\n\r\nlet browser;\r\n\r\n/**\r\n * Sets the content for a Puppeteer Page using a predefined template\r\n * and additional scripts. Also, sets the pageerror in order to catch\r\n * and display errors from the window context.\r\n *\r\n * @param {Object} page - The Puppeteer Page object for which the content\r\n * is being set.\r\n */\r\nconst setPageContent = async (page) => {\r\n  await page.setContent(template);\r\n  await page.addScriptTag({ path: `${getCachePath()}/sources.js` });\r\n  // eslint-disable-next-line no-undef\r\n  await page.evaluate(() => window.setupHighcharts());\r\n\r\n  page.on('pageerror', async (error) => {\r\n    // TODO: Consider adding a switch here that turns on log(0) logging\r\n    // on page errors.\r\n    await page.$eval(\r\n      '#container',\r\n      (element, errorMessage) => {\r\n        // eslint-disable-next-line no-undef\r\n        if (window._displayErrors) {\r\n          element.innerHTML = errorMessage;\r\n        }\r\n      },\r\n      `<h1>Chart input data error</h1>${error.toString()}`\r\n    );\r\n  });\r\n};\r\n\r\n/**\r\n * Clears the content of a Puppeteer Page based on the specified mode.\r\n *\r\n * @param {Object} page - The Puppeteer Page object to be cleared.\r\n * @param {boolean} hardReset - A flag indicating the type of clearing\r\n * to be performed. If true, navigates to 'about:blank' and resets content\r\n * and scripts. If false, clears the body content by setting a predefined HTML\r\n * structure.\r\n *\r\n * @throws {Error} Logs thrown error if clearing the page content fails.\r\n */\r\nexport const clearPage = async (page, hardReset = false) => {\r\n  try {\r\n    if (hardReset) {\r\n      // Navigate to about:blank\r\n      await page.goto('about:blank');\r\n\r\n      // Set the content and and scripts again\r\n      await setPageContent(page);\r\n    } else {\r\n      // Clear body content\r\n      await page.evaluate(() => {\r\n        document.body.innerHTML =\r\n          '<div id=\"chart-container\"><div id=\"container\"></div></div>';\r\n      });\r\n    }\r\n  } catch (error) {\r\n    logWithStack(\r\n      2,\r\n      error,\r\n      '[browser] Could not clear the content of the page.'\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Creates a new Puppeteer Page within an existing browser instance.\r\n *\r\n * If the browser instance is not available, returns false.\r\n *\r\n * The function creates a new page, disables caching, sets content using\r\n * setPageContent(), and returns the created Puppeteer Page.\r\n *\r\n * @returns {(boolean|object)} Returns false if the browser instance is not\r\n * available, or a Puppeteer Page object representing the newly created page.\r\n */\r\nexport const newPage = async () => {\r\n  if (!browser) {\r\n    return false;\r\n  }\r\n\r\n  const page = await browser.newPage();\r\n\r\n  // Disable cache\r\n  await page.setCacheEnabled(false);\r\n\r\n  // Set the content\r\n  await setPageContent(page);\r\n  return page;\r\n};\r\n\r\n/**\r\n * Creates a Puppeteer browser instance with the specified arguments.\r\n *\r\n * @param {Array} puppeteerArgs - Additional arguments for Puppeteer launch.\r\n *\r\n * @returns {Promise<object>} A Promise resolving to the Puppeteer browser\r\n * instance.\r\n *\r\n * @throws {ExportError} Throws an ExportError if max retries to open a browser\r\n * instance are reached, or if no browser instance is found after retries.\r\n */\r\nexport const create = async (puppeteerArgs) => {\r\n  const allArgs = [...minimalArgs, ...(puppeteerArgs || [])];\r\n\r\n  // Create a browser\r\n  if (!browser) {\r\n    let tryCount = 0;\r\n\r\n    const open = async () => {\r\n      try {\r\n        log(\r\n          3,\r\n          `[browser] Attempting to get a browser instance (try ${++tryCount}).`\r\n        );\r\n        browser = await puppeteer.launch({\r\n          headless: 'new',\r\n          args: allArgs,\r\n          userDataDir: './tmp/'\r\n        });\r\n      } catch (error) {\r\n        logWithStack(\r\n          1,\r\n          error,\r\n          '[browser] Failed to launch a browser instance.'\r\n        );\r\n\r\n        // Retry to launch browser until reaching max attempts\r\n        if (tryCount < 25) {\r\n          log(3, `[browser] Retry to open a browser (${tryCount} out of 25).`);\r\n          await new Promise((response) => setTimeout(response, 4000));\r\n          await open();\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      await open();\r\n    } catch (error) {\r\n      throw new ExportError(\r\n        '[browser] Maximum retries to open a browser instance reached.'\r\n      ).setError(error);\r\n    }\r\n\r\n    if (!browser) {\r\n      throw new ExportError('[browser] Cannot find a browser to open.');\r\n    }\r\n  }\r\n\r\n  // Return a browser promise\r\n  return browser;\r\n};\r\n\r\n/**\r\n * Retrieves the existing Puppeteer browser instance.\r\n *\r\n * @returns {Promise<object>} A Promise resolving to the Puppeteer browser\r\n * instance.\r\n *\r\n * @throws {ExportError} Throws an ExportError if no valid browser has been\r\n * created.\r\n */\r\nexport const get = async () => {\r\n  if (!browser) {\r\n    throw new ExportError('[browser] No valid browser has been created.');\r\n  }\r\n\r\n  return browser;\r\n};\r\n\r\n/**\r\n * Closes the Puppeteer browser instance if it is connected.\r\n *\r\n * @returns {Promise<boolean>} A Promise resolving to true after the browser\r\n * is closed.\r\n */\r\nexport const close = async () => {\r\n  // Close the browser when connnected\r\n  if (browser?.isConnected()) {\r\n    await browser.close();\r\n    log(4, '[browser] Closed the browser.');\r\n  }\r\n  return true;\r\n};\r\n\r\nexport default {\r\n  newPage,\r\n  clearPage,\r\n  get,\r\n  close\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync } from 'fs';\r\nimport path from 'path';\r\nimport * as url from 'url';\r\n\r\nimport cache from './cache.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport svgTemplate from './../templates/svg_export/svg_export.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nconst __basedir = url.fileURLToPath(new URL('.', import.meta.url));\r\n\r\n/**\r\n * Retrieves the clipping region coordinates of the specified page element with\r\n * the id 'chart-container'.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n *\r\n * @returns {Promise<Object>} Promise resolving to an object containing\r\n * x, y, width, and height properties.\r\n */\r\nconst getClipRegion = (page) =>\r\n  page.$eval('#chart-container', (element) => {\r\n    const { x, y, width, height } = element.getBoundingClientRect();\r\n    return {\r\n      x,\r\n      y,\r\n      width,\r\n      height: Math.trunc(height > 1 ? height : 500)\r\n    };\r\n  });\r\n\r\n/**\r\n * Creates an image using Puppeteer's page screenshot functionality with\r\n * specified options.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {string} type - Image type.\r\n * @param {string} encoding - Image encoding.\r\n * @param {Object} clip - Clipping region coordinates.\r\n * @param {number} rasterizationTimeout - Timeout for rasterization\r\n * in milliseconds.\r\n *\r\n * @returns {Promise<Buffer>} Promise resolving to the image buffer or rejecting\r\n * with an ExportError for timeout.\r\n */\r\nconst createImage = (page, type, encoding, clip, rasterizationTimeout) =>\r\n  Promise.race([\r\n    page.screenshot({\r\n      type,\r\n      encoding,\r\n      clip,\r\n\r\n      // #447, #463 - always render on a transparent page if the expected type\r\n      // format is PNG\r\n      omitBackground: type == 'png'\r\n    }),\r\n    new Promise((_resolve, reject) =>\r\n      setTimeout(\r\n        () => reject(new ExportError('Rasterization timeout')),\r\n        rasterizationTimeout || 1500\r\n      )\r\n    )\r\n  ]);\r\n\r\n/**\r\n * Creates a PDF using Puppeteer's page pdf functionality with specified\r\n * options.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {number} height - PDF height.\r\n * @param {number} width - PDF width.\r\n * @param {string} encoding - PDF encoding.\r\n *\r\n * @returns {Promise<Buffer>} Promise resolving to the PDF buffer.\r\n */\r\nconst createPDF = (page, height, width, encoding) =>\r\n  page.pdf({\r\n    // This will remove an extra empty page in PDF exports\r\n    height: height + 1,\r\n    width,\r\n    encoding\r\n  });\r\n\r\n/**\r\n * Creates an SVG string by evaluating the outerHTML of the first 'svg' element\r\n * inside an element with the id 'container'.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n *\r\n * @returns {Promise<string>} Promise resolving to the SVG string.\r\n */\r\nconst createSVG = (page) =>\r\n  page.$eval('#container svg:first-of-type', (element) => element.outerHTML);\r\n\r\n/**\r\n * Sets the specified chart and options as configuration into the triggerExport\r\n * function within the window context using page.evaluate.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {any} chart - The chart object to be configured.\r\n * @param {Object} options - Configuration options for the chart.\r\n *\r\n * @returns {Promise<void>} Promise resolving after the configuration is set.\r\n */\r\nconst setAsConfig = (page, chart, options) =>\r\n  page.evaluate(\r\n    // eslint-disable-next-line no-undef\r\n    (chart, options) => window.triggerExport(chart, options),\r\n    chart,\r\n    options\r\n  );\r\n\r\n/**\r\n * Exports to a chart from a page using Puppeteer.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {any} chart - The chart object or SVG configuration to be exported.\r\n * @param {Object} options - Export options and configuration.\r\n *\r\n * @returns {Promise<string | Buffer | ExportError>} Promise resolving to\r\n * the exported data or rejecting with an ExportError.\r\n */\r\nexport default async (page, chart, options) => {\r\n  /**\r\n   * Keeps track of all resources added on the page with addXXXTag. etc\r\n   * It's VITAL that all added resources ends up here so we can clear things\r\n   * out when doing a new export in the same page!\r\n   */\r\n  const injectedResources = [];\r\n\r\n  /** Clear out all state set on the page with addScriptTag/addStyleTag. */\r\n  const clearInjected = async (page) => {\r\n    for (const res of injectedResources) {\r\n      await res.dispose();\r\n    }\r\n\r\n    // Reset all CSS and script tags\r\n    await page.evaluate(() => {\r\n      // eslint-disable-next-line no-undef\r\n      const [, ...scriptsToRemove] = document.getElementsByTagName('script');\r\n      // eslint-disable-next-line no-undef\r\n      const [, ...stylesToRemove] = document.getElementsByTagName('style');\r\n      // eslint-disable-next-line no-undef\r\n      const [...linksToRemove] = document.getElementsByTagName('link');\r\n\r\n      // Remove tags\r\n      for (const element of [\r\n        ...scriptsToRemove,\r\n        ...stylesToRemove,\r\n        ...linksToRemove\r\n      ]) {\r\n        element.remove();\r\n      }\r\n    });\r\n  };\r\n\r\n  try {\r\n    log(4, '[export] Determining export path.');\r\n\r\n    const exportOptions = options.export;\r\n\r\n    // Force a rAF\r\n    // See https://github.com/puppeteer/puppeteer/issues/7507\r\n    // eslint-disable-next-line no-undef\r\n    await page.evaluate(() => requestAnimationFrame(() => {}));\r\n\r\n    // Decide whether display error or debbuger wrapper around it\r\n    const displayErrors =\r\n      exportOptions?.options?.chart?.displayErrors &&\r\n      cache.getCache().activeManifest.modules.debugger;\r\n\r\n    // eslint-disable-next-line no-undef\r\n    await page.evaluate((d) => (window._displayErrors = d), displayErrors);\r\n\r\n    let isSVG;\r\n    if (\r\n      chart.indexOf &&\r\n      (chart.indexOf('<svg') >= 0 || chart.indexOf('<?xml') >= 0)\r\n    ) {\r\n      // SVG input handling\r\n      log(4, '[export] Treating as SVG.');\r\n\r\n      // If input is also SVG, just return it\r\n      if (exportOptions.type === 'svg') {\r\n        return chart;\r\n      }\r\n\r\n      isSVG = true;\r\n      await page.setContent(svgTemplate(chart));\r\n    } else {\r\n      // JSON config handling\r\n      log(4, '[export] Treating as config.');\r\n\r\n      // Need to perform straight inject\r\n      if (exportOptions.strInj) {\r\n        // Injection based configuration export\r\n        await setAsConfig(\r\n          page,\r\n          {\r\n            chart: {\r\n              height: exportOptions.height,\r\n              width: exportOptions.width\r\n            }\r\n          },\r\n          options\r\n        );\r\n      } else {\r\n        // Basic configuration export\r\n        chart.chart.height = exportOptions.height;\r\n        chart.chart.width = exportOptions.width;\r\n\r\n        await setAsConfig(page, chart, options);\r\n      }\r\n    }\r\n\r\n    // Use resources\r\n    const resources = options.customLogic.resources;\r\n    if (resources) {\r\n      // Load custom JS code\r\n      if (resources.js) {\r\n        injectedResources.push(\r\n          await page.addScriptTag({\r\n            content: resources.js\r\n          })\r\n        );\r\n      }\r\n\r\n      // Load scripts from all custom files\r\n      if (resources.files) {\r\n        for (const file of resources.files) {\r\n          try {\r\n            const isLocal = !file.startsWith('http') ? true : false;\r\n\r\n            // Add each custom script from resources' files\r\n            injectedResources.push(\r\n              await page.addScriptTag(\r\n                isLocal\r\n                  ? {\r\n                      content: readFileSync(file, 'utf8')\r\n                    }\r\n                  : {\r\n                      url: file\r\n                    }\r\n              )\r\n            );\r\n          } catch (error) {\r\n            logWithStack(\r\n              2,\r\n              error,\r\n              `[export] The JS file ${file} cannot be loaded.`\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      // Load CSS\r\n      if (resources.css) {\r\n        let cssImports = resources.css.match(/@import\\s*([^;]*);/g);\r\n        if (cssImports) {\r\n          // Handle css section\r\n          for (let cssImportPath of cssImports) {\r\n            if (cssImportPath) {\r\n              cssImportPath = cssImportPath\r\n                .replace('url(', '')\r\n                .replace('@import', '')\r\n                .replace(/\"/g, '')\r\n                .replace(/'/g, '')\r\n                .replace(/;/, '')\r\n                .replace(/\\)/g, '')\r\n                .trim();\r\n\r\n              // Add each custom css from resources\r\n              if (cssImportPath.startsWith('http')) {\r\n                injectedResources.push(\r\n                  await page.addStyleTag({\r\n                    url: cssImportPath\r\n                  })\r\n                );\r\n              } else if (options.customLogic.allowFileResources) {\r\n                injectedResources.push(\r\n                  await page.addStyleTag({\r\n                    path: path.join(__basedir, cssImportPath)\r\n                  })\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // The rest of the CSS section will be content by now\r\n        injectedResources.push(\r\n          await page.addStyleTag({\r\n            content: resources.css.replace(/@import\\s*([^;]*);/g, '') || ' '\r\n          })\r\n        );\r\n      }\r\n    }\r\n\r\n    // Get the real chart size\r\n    const size = isSVG\r\n      ? await page.$eval(\r\n          '#chart-container svg:first-of-type',\r\n          (element, scale) => ({\r\n            chartHeight: element.height.baseVal.value * scale,\r\n            chartWidth: element.width.baseVal.value * scale\r\n          }),\r\n          parseFloat(exportOptions.scale)\r\n        )\r\n      : await page.evaluate(() => {\r\n          // eslint-disable-next-line no-undef\r\n          const { chartHeight, chartWidth } = window.Highcharts.charts[0];\r\n          return {\r\n            chartHeight,\r\n            chartWidth\r\n          };\r\n        });\r\n\r\n    // Set final height and width for viewport\r\n    const viewportHeight = Math.ceil(size?.chartHeight || exportOptions.height);\r\n    const viewportWidth = Math.ceil(size?.chartWidth || exportOptions.width);\r\n\r\n    // Set the viewport for the first time\r\n    // NOTE: the call to setViewport is expensive - can we get away with only\r\n    // calling it once, e.g. moving this one into the isSVG condition below?\r\n    await page.setViewport({\r\n      height: viewportHeight,\r\n      width: viewportWidth,\r\n      deviceScaleFactor: isSVG ? 1 : parseFloat(exportOptions.scale)\r\n    });\r\n\r\n    // Prepare a zoom callback for the next evaluate call\r\n    const zoomCallback = isSVG\r\n      ? // In case of SVG the zoom must be set directly for body\r\n        (scale) => {\r\n          // Set the zoom as scale\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.zoom = scale;\r\n\r\n          // Set the margin to 0px\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.margin = '0px';\r\n        }\r\n      : // No need for such scale manipulation in case of other types of exports\r\n        () => {\r\n          // Reset the zoom for other exports than to SVGs\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.zoom = 1;\r\n        };\r\n\r\n    // Set the zoom accordingly\r\n    await page.evaluate(zoomCallback, parseFloat(exportOptions.scale));\r\n\r\n    // Get the clip region for the page\r\n    const { height, width, x, y } = await getClipRegion(page);\r\n\r\n    if (!isSVG) {\r\n      // Set the final viewport now that we have the real height\r\n      await page.setViewport({\r\n        width: Math.round(width),\r\n        height: Math.round(height),\r\n        deviceScaleFactor: parseFloat(exportOptions.scale)\r\n      });\r\n    }\r\n\r\n    let data;\r\n    // RASTERIZATION\r\n    if (exportOptions.type === 'svg') {\r\n      // SVG\r\n      data = await createSVG(page);\r\n    } else if (['png', 'jpeg'].includes(exportOptions.type)) {\r\n      // PNG or JPEG\r\n      data = await createImage(\r\n        page,\r\n        exportOptions.type,\r\n        'base64',\r\n        {\r\n          width: viewportWidth,\r\n          height: viewportHeight,\r\n          x,\r\n          y\r\n        },\r\n        exportOptions.rasterizationTimeout\r\n      );\r\n    } else if (exportOptions.type === 'pdf') {\r\n      // PDF\r\n      data = await createPDF(page, viewportHeight, viewportWidth, 'base64');\r\n    } else {\r\n      throw new ExportError(\r\n        `[export] Unsupported output format ${exportOptions.type}.`\r\n      );\r\n    }\r\n\r\n    // Destroy old charts after the export is done\r\n    await page.evaluate(() => {\r\n      // We are not guaranteed that Highcharts is loaded, e,g, when doing SVG\r\n      // exports\r\n      if (typeof Highcharts !== 'undefined') {\r\n        // eslint-disable-next-line no-undef\r\n        const oldCharts = Highcharts.charts;\r\n\r\n        // Check in any already existing charts\r\n        if (Array.isArray(oldCharts) && oldCharts.length) {\r\n          // Destroy old charts\r\n          for (const oldChart of oldCharts) {\r\n            oldChart && oldChart.destroy();\r\n            // eslint-disable-next-line no-undef\r\n            Highcharts.charts.shift();\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    await clearInjected(page);\r\n    return data;\r\n  } catch (error) {\r\n    await clearInjected(page);\r\n    return error;\r\n  }\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport cssTemplate from './css.js';\r\n\r\nexport default (chart) => `\r\n<!DOCTYPE html>\r\n<html lang='en-US'>\r\n  <head>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n    <title>Highcarts Export</title>\r\n  </head>\r\n  <style>\r\n    ${cssTemplate()}\r\n  </style>\r\n  <body>\r\n    <div id=\"chart-container\">\r\n      ${chart}\r\n    </div>\r\n  </body>\r\n</html>\r\n\r\n`;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { Pool } from 'tarn';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport {\r\n  close as browserClose,\r\n  create as createBrowser,\r\n  newPage as browserNewPage,\r\n  clearPage\r\n} from './browser.js';\r\nimport puppeteerExport from './export.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport { measureTime } from './utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\n// Pool statistics\r\nexport const stats = {\r\n  performedExports: 0,\r\n  exportAttempts: 0,\r\n  exportFromSvgAttempts: 0,\r\n  timeSpent: 0,\r\n  droppedExports: 0,\r\n  spentAverage: 0\r\n};\r\n\r\nlet poolConfig = {};\r\n\r\n// The pool instance\r\nlet pool = false;\r\n\r\n// Custom puppeteer arguments\r\nlet puppeteerArgs;\r\n\r\nconst factory = {\r\n  /**\r\n   * Creates a new worker page for the export pool.\r\n   *\r\n   * @returns {Object} - An object containing the worker ID, a reference to the\r\n   * browser page, and initial work count.\r\n   *\r\n   * @throws {ExportError} - If there's an error during the creation of the new\r\n   * page.\r\n   */\r\n  create: async () => {\r\n    let page = false;\r\n\r\n    const id = uuid();\r\n    const startDate = new Date().getTime();\r\n\r\n    try {\r\n      page = await browserNewPage();\r\n\r\n      if (!page || page.isClosed()) {\r\n        throw new ExportError('The page is invalid or closed.');\r\n      }\r\n\r\n      log(\r\n        3,\r\n        `[pool] Successfully created a worker ${id} - took ${\r\n          new Date().getTime() - startDate\r\n        } ms.`\r\n      );\r\n    } catch (error) {\r\n      throw new ExportError(\r\n        'Error encountered when creating a new page.'\r\n      ).setError(error);\r\n    }\r\n\r\n    return {\r\n      id,\r\n      page,\r\n      // Try to distribute the initial work count\r\n      workCount: Math.round(Math.random() * (poolConfig.workLimit / 2))\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Validates a worker page in the export pool, checking if it has exceeded\r\n   * the work limit.\r\n   *\r\n   * @param {Object} workerHandle - The handle to the worker, containing the\r\n   * worker's ID, a reference to the browser page, and work count.\r\n   *\r\n   * @returns {boolean} - Returns true if the worker is valid and within\r\n   * the work limit; otherwise, returns false.\r\n   */\r\n  validate: async (workerHandle) => {\r\n    if (\r\n      poolConfig.workLimit &&\r\n      ++workerHandle.workCount > poolConfig.workLimit\r\n    ) {\r\n      log(\r\n        3,\r\n        `[pool] Worker failed validation: exceeded work limit (limit is ${poolConfig.workLimit}).`\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // Clear page\r\n    await clearPage(workerHandle.page, true);\r\n    return true;\r\n  },\r\n\r\n  /**\r\n   * Destroys a worker entry in the export pool, closing its associated page.\r\n   *\r\n   * @param {Object} workerHandle - The handle to the worker, containing\r\n   * the worker's ID and a reference to the browser page.\r\n   */\r\n  destroy: (workerHandle) => {\r\n    log(3, `[pool] Destroying pool entry ${workerHandle.id}.`);\r\n\r\n    if (workerHandle.page) {\r\n      // We don't really need to wait around for this.\r\n      workerHandle.page.close();\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Initializes the export pool with the provided configuration, creating\r\n * a browser instance and setting up worker resources.\r\n *\r\n * @param {Object} config - Configuration options for the export pool along\r\n * with custom puppeteer arguments for the puppeteer.launch function.\r\n */\r\nexport const initPool = async (config) => {\r\n  // For the module scope usage\r\n  poolConfig = config && config.pool ? { ...config.pool } : {};\r\n\r\n  // Attach process' exit listeners\r\n  if (poolConfig.listenToProcessExits) {\r\n    attachProcessExitListeners();\r\n  }\r\n\r\n  // The newest puppeteer arguments for the browser creation\r\n  puppeteerArgs = config.puppeteerArgs;\r\n\r\n  // Create a browser instance\r\n  await createBrowser(puppeteerArgs);\r\n\r\n  log(\r\n    3,\r\n    `[pool] Initializing pool with workers: min ${poolConfig.minWorkers}, max ${poolConfig.maxWorkers}.`\r\n  );\r\n\r\n  if (pool) {\r\n    return log(\r\n      4,\r\n      '[pool] Already initialized, please kill it before creating a new one.'\r\n    );\r\n  }\r\n\r\n  if (parseInt(poolConfig.minWorkers) > parseInt(poolConfig.maxWorkers)) {\r\n    poolConfig.minWorkers = poolConfig.maxWorkers;\r\n  }\r\n\r\n  try {\r\n    // Create a pool along with a minimal number of resources\r\n    pool = new Pool({\r\n      // Get the create/validate/destroy/log functions\r\n      ...factory,\r\n      min: parseInt(poolConfig.minWorkers),\r\n      max: parseInt(poolConfig.maxWorkers),\r\n      acquireTimeoutMillis: poolConfig.acquireTimeout,\r\n      createTimeoutMillis: poolConfig.createTimeout,\r\n      destroyTimeoutMillis: poolConfig.destroyTimeout,\r\n      idleTimeoutMillis: poolConfig.idleTimeout,\r\n      createRetryIntervalMillis: poolConfig.createRetryInterval,\r\n      reapIntervalMillis: poolConfig.reaperInterval,\r\n      propagateCreateError: false\r\n    });\r\n\r\n    // Set events\r\n    pool.on('release', async (resource) => {\r\n      // Clear page\r\n      await clearPage(resource.page, false);\r\n      log(4, `[pool] Releasing a worker with ID ${resource.id}.`);\r\n    });\r\n\r\n    pool.on('destroySuccess', (eventId, resource) => {\r\n      log(4, `[pool] Destroyed a worker with ID ${resource.id}.`);\r\n    });\r\n\r\n    const initialResources = [];\r\n    // Create an initial number of resources\r\n    for (let i = 0; i < poolConfig.minWorkers; i++) {\r\n      try {\r\n        const resource = await pool.acquire().promise;\r\n        initialResources.push(resource);\r\n      } catch (error) {\r\n        logWithStack(2, error, '[pool] Could not create an initial resource.');\r\n      }\r\n    }\r\n\r\n    // Release the initial number of resources back to the pool\r\n    initialResources.forEach((resource) => {\r\n      pool.release(resource);\r\n    });\r\n\r\n    log(\r\n      3,\r\n      `[pool] The pool is ready${initialResources.length ? ` with ${initialResources.length} initial resources waiting.` : '.'}`\r\n    );\r\n  } catch (error) {\r\n    // Close browser if for some reason cannot establish the pool\r\n    await browserClose();\r\n    throw new ExportError(\r\n      '[pool] Could not create the pool of workers.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Attaches exit listeners to the process, ensuring proper cleanup of resources\r\n * and termination on exit signals. Handles 'exit', 'SIGINT', 'SIGTERM', and\r\n * 'uncaughtException' events.\r\n */\r\nexport function attachProcessExitListeners() {\r\n  log(3, '[pool] Attaching exit listeners to the process.');\r\n\r\n  // Kill all pool resources on exit\r\n  process.on('exit', async (code) => {\r\n    log(4, `Process exited with code ${code}.`);\r\n    await killPool();\r\n  });\r\n\r\n  // Handler for the SIGINT\r\n  process.on('SIGINT', (name, code) => {\r\n    log(4, `The ${name} event with code: ${code}.`);\r\n    process.exit(1);\r\n  });\r\n\r\n  // Handler for the SIGTERM\r\n  process.on('SIGTERM', (name, code) => {\r\n    log(4, `The ${name} event with code: ${code}.`);\r\n    process.exit(1);\r\n  });\r\n\r\n  // Handler for the uncaughtException\r\n  process.on('uncaughtException', async (error, name) => {\r\n    logWithStack(1, error, `The ${name} error.`);\r\n    await killPool();\r\n    process.exit(1);\r\n  });\r\n}\r\n\r\n/**\r\n * Kills all workers in the pool, destroys the pool, and closes the browser\r\n * instance.\r\n *\r\n * @returns {Promise<void>} A promise that resolves after the workers are\r\n * killed, the pool is destroyed, and the browser is closed.\r\n */\r\nexport async function killPool() {\r\n  log(3, '[pool] Killing all pool workers and browser, if any exist.');\r\n\r\n  // Return true when the pool is already destroyed\r\n  if (pool?.destroyed) {\r\n    // Close the browser instance if still connected\r\n    return browserClose();\r\n  }\r\n\r\n  // If still alive, destroy the pool of pages before closing a browser\r\n  if (pool) {\r\n    await pool.destroy();\r\n    log(4, '[browser] Destroyed the pool of resources.');\r\n  }\r\n\r\n  // Close the browser instance\r\n  return browserClose();\r\n}\r\n\r\n/**\r\n * Processes the export work using a worker from the pool. Acquires a worker\r\n * handle from the pool, performs the export using puppeteer, and releases\r\n * the worker handle back to the pool.\r\n *\r\n * @param {string} chart - The chart data or configuration to be exported.\r\n * @param {Object} options - Export options and configuration.\r\n *\r\n * @returns {Promise<Object>} A promise that resolves with the export resultand\r\n * options.\r\n *\r\n * @throws {ExportError} If an error occurs during the export process.\r\n */\r\nexport const postWork = async (chart, options) => {\r\n  let workerHandle;\r\n\r\n  try {\r\n    log(4, '[pool] Work received, starting to process.');\r\n\r\n    ++stats.exportAttempts;\r\n    if (poolConfig.benchmarking) {\r\n      getPoolInfo();\r\n    }\r\n\r\n    if (!pool) {\r\n      throw new ExportError('Work received, but pool has not been started.');\r\n    }\r\n\r\n    // Acquire the worker along with the id of resource and work count\r\n    try {\r\n      log(4, '[pool] Acquiring a worker handle.');\r\n      const acquireCounter = measureTime();\r\n      workerHandle = await pool.acquire().promise;\r\n\r\n      // Check the page acquire time\r\n      if (options.server.benchmarking) {\r\n        log(\r\n          5,\r\n          options.payload?.requestId\r\n            ? `[benchmark] Request with ID ${options.payload?.requestId} -`\r\n            : '[benchmark]',\r\n          `Acquired a worker handle: ${acquireCounter()}ms.`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      throw new ExportError(\r\n        'Error encountered when acquiring an available entry.'\r\n      ).setError(error);\r\n    }\r\n    log(4, '[pool] Acquired a worker handle.');\r\n\r\n    if (!workerHandle.page) {\r\n      throw new ExportError(\r\n        'Resolved worker page is invalid: the pool setup is wonky.'\r\n      );\r\n    }\r\n\r\n    // Save the start time\r\n    let workStart = new Date().getTime();\r\n\r\n    log(4, `[pool] Starting work on pool entry with ID ${workerHandle.id}.`);\r\n\r\n    // Perform an export on a puppeteer level\r\n    const exportCounter = measureTime();\r\n    const result = await puppeteerExport(workerHandle.page, chart, options);\r\n\r\n    // Check if it's an error\r\n    if (result instanceof Error) {\r\n      // TODO: If the export failed because puppeteer timed out, we need to force kill the worker so we get a new page. That needs to be handled better than this hack.\r\n      if (result.message === 'Rasterization timeout') {\r\n        workerHandle.page.close();\r\n        workerHandle.page = await browserNewPage();\r\n      }\r\n\r\n      throw new ExportError('Error encountered during export.').setError(\r\n        result\r\n      );\r\n    }\r\n\r\n    // Check the Puppeteer export time\r\n    if (options.server.benchmarking) {\r\n      log(\r\n        5,\r\n        options.payload?.requestId\r\n          ? `[benchmark] Request with ID ${options.payload?.requestId} -`\r\n          : '[benchmark]',\r\n        `Exported a chart sucessfully: ${exportCounter()}ms.`\r\n      );\r\n    }\r\n\r\n    // Release the resource back to the pool\r\n    pool.release(workerHandle);\r\n\r\n    // Used for statistics in averageTime and processedWorkCount, which\r\n    // in turn is used by the /health route.\r\n    const workEnd = new Date().getTime();\r\n    const exportTime = workEnd - workStart;\r\n    stats.timeSpent += exportTime;\r\n    stats.spentAverage = stats.timeSpent / ++stats.performedExports;\r\n\r\n    log(4, `[pool] Work completed in ${exportTime} ms.`);\r\n\r\n    // Otherwise return the result\r\n    return {\r\n      result,\r\n      options\r\n    };\r\n  } catch (error) {\r\n    ++stats.droppedExports;\r\n\r\n    if (workerHandle) {\r\n      pool.release(workerHandle);\r\n    }\r\n\r\n    throw new ExportError(`[pool] In pool.postWork: ${error.message}`).setError(\r\n      error\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves the current pool instance.\r\n *\r\n * @returns {Object|null} The current pool instance if initialized, or null\r\n * if the pool has not been created.\r\n */\r\nexport function getPool() {\r\n  return pool;\r\n}\r\n\r\n/**\r\n * Retrieves pool information in JSON format, including minimum and maximum\r\n * workers, available workers, workers in use, and pending acquire requests.\r\n *\r\n * @returns {Object} Pool information in JSON format.\r\n */\r\nexport const getPoolInfoJSON = () => ({\r\n  min: pool.min,\r\n  max: pool.max,\r\n  available: pool.numFree(),\r\n  inUse: pool.numUsed(),\r\n  pendingAcquire: pool.numPendingAcquires()\r\n});\r\n\r\n/**\r\n * Logs information about the current state of the pool, including the minimum\r\n * and maximum workers, available workers, workers in use, and pending acquire\r\n * requests.\r\n */\r\nexport function getPoolInfo() {\r\n  const { min, max } = pool;\r\n\r\n  log(5, `[pool] The minimum number of resources allowed by pool: ${min}.`);\r\n  log(5, `[pool] The maximum number of resources allowed by pool: ${max}.`);\r\n  log(\r\n    5,\r\n    `[pool] The number of resources that are currently available: ${pool.numFree()}.`\r\n  );\r\n  log(\r\n    5,\r\n    `[pool] The number of resources that are currently acquired: ${pool.numUsed()}.`\r\n  );\r\n  log(\r\n    5,\r\n    `[pool] The number of callers waiting to acquire a resource: ${pool.numPendingAcquires()}.`\r\n  );\r\n}\r\n\r\nexport default {\r\n  initPool,\r\n  killPool,\r\n  postWork,\r\n  getPool,\r\n  getPoolInfo,\r\n  getPoolInfoJSON,\r\n  getStats: () => stats\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync, writeFileSync } from 'fs';\r\n\r\nimport { getOptions, initExportSettings } from './config.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport { killPool, postWork, stats } from './pool.js';\r\nimport {\r\n  fixType,\r\n  handleResources,\r\n  isCorrectJSON,\r\n  optionsStringify,\r\n  roundNumber,\r\n  toBoolean,\r\n  wrapAround\r\n} from './utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nlet allowCodeExecution = false;\r\n\r\n/**\r\n * Starts an export process. The `settings` contains final options gathered\r\n * from all possible sources (config, env, cli, json). The `endCallback` is\r\n * called when the export is completed, with an error object as the first\r\n * argument and the second containing the base64 respresentation of a chart.\r\n *\r\n * @param {Object} settings - The settings object containing export\r\n * configuration.\r\n * @param {function} endCallback - The callback function to be invoked upon\r\n * finalizing work or upon error occurance of the exporting process.\r\n *\r\n * @returns {void} This function does not return a value directly; instead,\r\n * it communicates results via the endCallback.\r\n */\r\nexport const startExport = async (settings, endCallback) => {\r\n  // Starting exporting process message\r\n  log(4, '[chart] Starting the exporting process.');\r\n\r\n  // Initialize options\r\n  const options = initExportSettings(settings, getOptions());\r\n\r\n  // Get the export options\r\n  const exportOptions = options.export;\r\n\r\n  // If SVG is an input (argument can be sent only by the request)\r\n  if (options.payload?.svg && options.payload.svg !== '') {\r\n    try {\r\n      log(4, '[chart] Attempting to export from a SVG input.');\r\n      const result = exportAsString(\r\n        options.payload.svg.trim(),\r\n        options,\r\n        endCallback\r\n      );\r\n      ++stats.exportFromSvgAttempts;\r\n      return result;\r\n    } catch (error) {\r\n      return endCallback(\r\n        new ExportError('[chart] Error loading SVG input.').setError(error)\r\n      );\r\n    }\r\n  }\r\n\r\n  // Export using options from the file\r\n  if (exportOptions.infile && exportOptions.infile.length) {\r\n    // Try to read the file to get the string representation\r\n    try {\r\n      log(4, '[chart] Attempting to export from an input file.');\r\n      options.export.instr = readFileSync(exportOptions.infile, 'utf8');\r\n      return exportAsString(options.export.instr.trim(), options, endCallback);\r\n    } catch (error) {\r\n      return endCallback(\r\n        new ExportError('[chart] Error loading input file.').setError(error)\r\n      );\r\n    }\r\n  }\r\n\r\n  // Export with options from the raw representation\r\n  if (\r\n    (exportOptions.instr && exportOptions.instr !== '') ||\r\n    (exportOptions.options && exportOptions.options !== '')\r\n  ) {\r\n    try {\r\n      log(4, '[chart] Attempting to export from a raw input.');\r\n\r\n      // Perform a direct inject when forced\r\n      if (toBoolean(options.customLogic?.allowCodeExecution)) {\r\n        return doStraightInject(options, endCallback);\r\n      }\r\n\r\n      // Either try to parse to JSON first or do the direct export\r\n      return typeof exportOptions.instr === 'string'\r\n        ? exportAsString(exportOptions.instr.trim(), options, endCallback)\r\n        : doExport(\r\n            options,\r\n            exportOptions.instr || exportOptions.options,\r\n            endCallback\r\n          );\r\n    } catch (error) {\r\n      return endCallback(\r\n        new ExportError('[chart] Error loading raw input.').setError(error)\r\n      );\r\n    }\r\n  }\r\n\r\n  // No input specified, pass an error message to the callback\r\n  return endCallback(\r\n    new ExportError(\r\n      `[chart] No valid input specified. Check if at least one of the following parameters is correctly set: 'infile', 'instr', 'options', or 'svg'.`\r\n    )\r\n  );\r\n};\r\n\r\n/**\r\n * Starts a batch export process for multiple charts based on the information\r\n * in the batch option. The batch is a string in the following format:\r\n * \"infile1.json=outfile1.png;infile2.json=outfile2.png;...\"\r\n *\r\n * @param {Object} options - The options object containing configuration for\r\n * a batch export.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the batch export\r\n * process is completed.\r\n *\r\n * @throws {ExportError} Throws an ExportError if an error occurs during\r\n * any of the batch export process.\r\n */\r\nexport const batchExport = async (options) => {\r\n  const batchFunctions = [];\r\n\r\n  // Split and pair the --batch arguments\r\n  for (let pair of options.export.batch.split(';')) {\r\n    pair = pair.split('=');\r\n    if (pair.length === 2) {\r\n      batchFunctions.push(\r\n        startExport(\r\n          {\r\n            ...options,\r\n            export: {\r\n              ...options.export,\r\n              infile: pair[0],\r\n              outfile: pair[1]\r\n            }\r\n          },\r\n          (error, info) => {\r\n            // Throw an error\r\n            if (error) {\r\n              throw error;\r\n            }\r\n\r\n            // Save the base64 from a buffer to a correct image file\r\n            writeFileSync(\r\n              info.options.export.outfile,\r\n              Buffer.from(info.result, 'base64')\r\n            );\r\n          }\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  try {\r\n    // Await all exports are done\r\n    await Promise.all(batchFunctions);\r\n\r\n    // Kill pool and close browser after finishing batch export\r\n    await killPool();\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[chart] Error encountered during batch export.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Starts a single export process based on the specified options.\r\n *\r\n * @param {Object} options - The options object containing configuration for\r\n * a single export.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the single export\r\n * process is completed.\r\n *\r\n * @throws {ExportError} Throws an ExportError if an error occurs during\r\n * the single export process.\r\n */\r\nexport const singleExport = async (options) => {\r\n  // Use instr or its alias, options\r\n  options.export.instr = options.export.instr || options.export.options;\r\n\r\n  // Perform an export\r\n  await startExport(options, async (error, info) => {\r\n    // Exit process when error\r\n    if (error) {\r\n      throw error;\r\n    }\r\n\r\n    const { outfile, type } = info.options.export;\r\n\r\n    // Save the base64 from a buffer to a correct image file\r\n    writeFileSync(\r\n      outfile || `chart.${type}`,\r\n      type !== 'svg' ? Buffer.from(info.result, 'base64') : info.result\r\n    );\r\n\r\n    // Kill the pool\r\n    await killPool();\r\n  });\r\n};\r\n\r\n/**\r\n * Determines the size and scale for chart export based on the provided options.\r\n *\r\n * @param {Object} options - The options object containing configuration for\r\n * chart export.\r\n *\r\n * @returns {Object} An object containing the calculated height, width,\r\n * and scale for the chart export.\r\n */\r\nexport const findChartSize = (options) => {\r\n  const { chart, exporting } =\r\n    options.export?.options || isCorrectJSON(options.export?.instr);\r\n\r\n  // See if globalOptions holds chart or exporting size\r\n  const globalOptions = isCorrectJSON(options.export?.globalOptions);\r\n\r\n  // Secure scale value\r\n  let scale =\r\n    options.export?.scale ||\r\n    exporting?.scale ||\r\n    globalOptions?.exporting?.scale ||\r\n    options.export?.defaultScale ||\r\n    1;\r\n\r\n  // the scale cannot be lower than 0.1 and cannot be higher than 5.0\r\n  scale = Math.max(0.1, Math.min(scale, 5.0));\r\n\r\n  // we want to round the numbers like 0.23234 -> 0.23\r\n  scale = roundNumber(scale, 2);\r\n\r\n  // Find chart size and scale\r\n  const size = {\r\n    height:\r\n      options.export?.height ||\r\n      exporting?.sourceHeight ||\r\n      chart?.height ||\r\n      globalOptions?.exporting?.sourceHeight ||\r\n      globalOptions?.chart?.height ||\r\n      options.export?.defaultHeight ||\r\n      400,\r\n    width:\r\n      options.export?.width ||\r\n      exporting?.sourceWidth ||\r\n      chart?.width ||\r\n      globalOptions?.exporting?.sourceWidth ||\r\n      globalOptions?.chart?.width ||\r\n      options.export?.defaultWidth ||\r\n      600,\r\n    scale\r\n  };\r\n\r\n  // Get rid of potential px and %\r\n  for (let [param, value] of Object.entries(size)) {\r\n    size[param] =\r\n      typeof value === 'string' ? +value.replace(/px|%/gi, '') : value;\r\n  }\r\n  return size;\r\n};\r\n\r\n/**\r\n * Function for finalizing options before export.\r\n *\r\n * @param {Object} options - The options object containing configuration for\r\n * the export process.\r\n * @param {Object} chartJson - The JSON representation of the chart.\r\n * @param {Function} endCallback - The callback function to be called upon\r\n * completion or error.\r\n * @param {string} svg - The SVG representation of the chart.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the export process\r\n * is completed.\r\n */\r\nconst doExport = async (options, chartJson, endCallback, svg) => {\r\n  let { export: exportOptions, customLogic: customLogicOptions } = options;\r\n\r\n  const allowCodeExecutionScoped =\r\n    typeof customLogicOptions.allowCodeExecution === 'boolean'\r\n      ? customLogicOptions.allowCodeExecution\r\n      : allowCodeExecution;\r\n\r\n  if (!customLogicOptions) {\r\n    customLogicOptions = options.customLogic = {};\r\n  } else if (allowCodeExecutionScoped) {\r\n    if (typeof options.customLogic.resources === 'string') {\r\n      // Process resources\r\n      options.customLogic.resources = handleResources(\r\n        options.customLogic.resources,\r\n        toBoolean(options.customLogic.allowFileResources)\r\n      );\r\n    } else if (!options.customLogic.resources) {\r\n      try {\r\n        const resources = readFileSync('resources.json', 'utf8');\r\n        options.customLogic.resources = handleResources(\r\n          resources,\r\n          toBoolean(options.customLogic.allowFileResources)\r\n        );\r\n      } catch (error) {\r\n        logWithStack(\r\n          2,\r\n          error,\r\n          `[chart] Unable to load the default resources.json file.`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // If the allowCodeExecution flag isn't set, we should refuse the usage\r\n  // of callback, resources, and custom code. Additionally, the worker will\r\n  // refuse to run arbitrary JavaScript. Prioritized should be the scoped\r\n  // option, then we should take a look at the overall pool option.\r\n  if (!allowCodeExecutionScoped && customLogicOptions) {\r\n    if (\r\n      customLogicOptions.callback ||\r\n      customLogicOptions.resources ||\r\n      customLogicOptions.customCode\r\n    ) {\r\n      // Send back a friendly message saying that the exporter does not support\r\n      // these settings.\r\n      return endCallback(\r\n        new ExportError(\r\n          `[chart] The 'callback', 'resources' and 'customCode' options have been disabled for this server.`\r\n        )\r\n      );\r\n    }\r\n\r\n    // Reset all additional custom code\r\n    customLogicOptions.callback = false;\r\n    customLogicOptions.resources = false;\r\n    customLogicOptions.customCode = false;\r\n  }\r\n\r\n  // Clean properties to keep it lean and mean\r\n  if (chartJson) {\r\n    chartJson.chart = chartJson.chart || {};\r\n    chartJson.exporting = chartJson.exporting || {};\r\n    chartJson.exporting.enabled = false;\r\n  }\r\n\r\n  exportOptions.constr = exportOptions.constr || 'chart';\r\n  exportOptions.type = fixType(exportOptions.type, exportOptions.outfile);\r\n  if (exportOptions.type === 'svg') {\r\n    exportOptions.width = false;\r\n  }\r\n\r\n  // Prepare global and theme options\r\n  ['globalOptions', 'themeOptions'].forEach((optionsName) => {\r\n    try {\r\n      if (exportOptions && exportOptions[optionsName]) {\r\n        if (\r\n          typeof exportOptions[optionsName] === 'string' &&\r\n          exportOptions[optionsName].endsWith('.json')\r\n        ) {\r\n          exportOptions[optionsName] = isCorrectJSON(\r\n            readFileSync(exportOptions[optionsName], 'utf8'),\r\n            true\r\n          );\r\n        } else {\r\n          exportOptions[optionsName] = isCorrectJSON(\r\n            exportOptions[optionsName],\r\n            true\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      exportOptions[optionsName] = {};\r\n      logWithStack(2, error, `[chart] The '${optionsName}' cannot be loaded.`);\r\n    }\r\n  });\r\n\r\n  // Prepare the customCode\r\n  if (customLogicOptions.allowCodeExecution) {\r\n    try {\r\n      customLogicOptions.customCode = wrapAround(\r\n        customLogicOptions.customCode,\r\n        customLogicOptions.allowFileResources\r\n      );\r\n    } catch (error) {\r\n      logWithStack(2, error, `[chart] The 'customCode' cannot be loaded.`);\r\n    }\r\n  }\r\n\r\n  // Get the callback\r\n  if (\r\n    customLogicOptions &&\r\n    customLogicOptions.callback &&\r\n    customLogicOptions.callback?.indexOf('{') < 0\r\n  ) {\r\n    // The allowFileResources is always set to false for HTTP requests to avoid\r\n    // injecting arbitrary files from the fs\r\n    if (customLogicOptions.allowFileResources) {\r\n      try {\r\n        customLogicOptions.callback = readFileSync(\r\n          customLogicOptions.callback,\r\n          'utf8'\r\n        );\r\n      } catch (error) {\r\n        customLogicOptions.callback = false;\r\n        logWithStack(2, error, `[chart] The 'callback' cannot be loaded.`);\r\n      }\r\n    } else {\r\n      customLogicOptions.callback = false;\r\n    }\r\n  }\r\n\r\n  // Size search\r\n  options.export = {\r\n    ...options.export,\r\n    ...findChartSize(options)\r\n  };\r\n\r\n  // Post the work to the pool\r\n  try {\r\n    const result = await postWork(\r\n      exportOptions.strInj || chartJson || svg,\r\n      options\r\n    );\r\n    return endCallback(false, result);\r\n  } catch (error) {\r\n    return endCallback(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Performs a direct inject of options before export. The function attempts\r\n * to stringify the provided options and removes unnecessary characters,\r\n * ensuring a clean and formatted input. The resulting string is saved as\r\n * a \"stright inject\" string in the export options. It then invokes the\r\n * doExport function with the updated options.\r\n *\r\n * IMPORTANT: Dangerous and must be used deliberately by someone who sets up\r\n * a server (see the  --allowCodeExecution option).\r\n *\r\n * @param {Object} options - The export options containing the input\r\n * to be injected.\r\n * @param {function} endCallback - The callback function to be invoked\r\n * at the end of the process.\r\n *\r\n * @returns {Promise} A Promise that resolves with the result of the export\r\n * operation or rejects with an error if any issues occur during the process.\r\n */\r\nconst doStraightInject = (options, endCallback) => {\r\n  try {\r\n    let strInj;\r\n    let instr = options.export.instr || options.export.options;\r\n\r\n    if (typeof instr !== 'string') {\r\n      // Try to stringify options\r\n      strInj = instr = optionsStringify(\r\n        instr,\r\n        options.customLogic?.allowCodeExecution\r\n      );\r\n    }\r\n    strInj = instr.replaceAll(/\\t|\\n|\\r/g, '').trim();\r\n\r\n    // Get rid of the ;\r\n    if (strInj[strInj.length - 1] === ';') {\r\n      strInj = strInj.substring(0, strInj.length - 1);\r\n    }\r\n\r\n    // Save as stright inject string\r\n    options.export.strInj = strInj;\r\n    return doExport(options, false, endCallback);\r\n  } catch (error) {\r\n    return endCallback(\r\n      new ExportError(\r\n        `[chart] Malformed input detected for ${options.export?.requestId || '?'}. Please make sure that your JSON/JavaScript options are sent using the \"options\" attribute, and that if you're using SVG, it is unescaped.`\r\n      ).setError(error)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Exports a string based on the provided options and invokes an end callback.\r\n *\r\n * @param {string} stringToExport - The string content to be exported.\r\n * @param {Object} options - Export options, including customLogic with\r\n * allowCodeExecution flag.\r\n * @param {Function} endCallback - Callback function to be invoked at the end\r\n * of the export process.\r\n *\r\n * @returns {any} Result of the export process or an error if encountered.\r\n */\r\nconst exportAsString = (stringToExport, options, endCallback) => {\r\n  const { allowCodeExecution } = options.customLogic;\r\n\r\n  // Check if it is SVG\r\n  if (\r\n    stringToExport.indexOf('<svg') >= 0 ||\r\n    stringToExport.indexOf('<?xml') >= 0\r\n  ) {\r\n    log(4, '[chart] Parsing input as SVG.');\r\n    return doExport(options, false, endCallback, stringToExport);\r\n  }\r\n\r\n  try {\r\n    // Try to parse to JSON and call the doExport function\r\n    const chartJSON = JSON.parse(stringToExport.replaceAll(/\\t|\\n|\\r/g, ' '));\r\n\r\n    // If a correct JSON, do the export\r\n    return doExport(options, chartJSON, endCallback);\r\n  } catch (error) {\r\n    // Not a valid JSON\r\n    if (toBoolean(allowCodeExecution)) {\r\n      return doStraightInject(options, endCallback);\r\n    } else {\r\n      // Do not allow straight injection without the allowCodeExecution flag\r\n      return endCallback(\r\n        new ExportError(\r\n          '[chart] Only JSON configurations and SVG are allowed for this server. If this is your server, JavaScript custom code can be enabled by starting the server with the --allowCodeExecution flag.'\r\n        ).setError(error)\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves and returns the current status of code execution permission.\r\n *\r\n * @returns {any} The value of allowCodeExecution.\r\n */\r\nexport const getAllowCodeExecution = () => allowCodeExecution;\r\n\r\n/**\r\n * Sets the code execution permission based on the provided boolean value.\r\n *\r\n * @param {any} value - The value to be converted and assigned\r\n * to allowCodeExecution.\r\n */\r\nexport const setAllowCodeExecution = (value) => {\r\n  allowCodeExecution = toBoolean(value);\r\n};\r\n\r\nexport default {\r\n  batchExport,\r\n  singleExport,\r\n  getAllowCodeExecution,\r\n  setAllowCodeExecution,\r\n  startExport,\r\n  findChartSize\r\n};\r\n","import { envs } from '../envs.js';\r\nimport { logWithStack } from '../logger.js';\r\n\r\n/**\r\n * Middleware for logging errors with stack trace and handling error response.\r\n *\r\n * @param {Error} error - The error object.\r\n * @param {Express.Request} req - The Express request object.\r\n * @param {Express.Response} res - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n */\r\nconst logErrorMiddleware = (error, req, res, next) => {\r\n  // Display the error with stack in a correct format\r\n  logWithStack(1, error);\r\n\r\n  // Delete the stack for the environment other than the development\r\n  if (envs.OTHER_NODE_ENV !== 'development') {\r\n    delete error.stack;\r\n  }\r\n\r\n  // Call the returnErrorMiddleware\r\n  next(error);\r\n};\r\n\r\n/**\r\n * Middleware for returning error response.\r\n *\r\n * @param {Error} error - The error object.\r\n * @param {Express.Request} req - The Express request object.\r\n * @param {Express.Response} res - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n */\r\nconst returnErrorMiddleware = (error, req, res, next) => {\r\n  // Gather all requied information for the response\r\n  const { statusCode: stCode, status, message, stack } = error;\r\n  const statusCode = stCode || status || 500;\r\n\r\n  // Set and return response\r\n  res.status(statusCode).json({ statusCode, message, stack });\r\n};\r\n\r\nexport default (app) => {\r\n  // Add log error middleware\r\n  app.use(logErrorMiddleware);\r\n\r\n  // Add set status and return error middleware\r\n  app.use(returnErrorMiddleware);\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport rateLimit from 'express-rate-limit';\r\n\r\nimport { log } from '../logger.js';\r\n\r\n/**\r\n * Middleware for enabling rate limiting on the specified Express app.\r\n *\r\n * @param {Express} app - The Express app instance.\r\n * @param {Object} limitConfig - Configuration options for rate limiting.\r\n */\r\nexport default (app, limitConfig) => {\r\n  const msg =\r\n    'Too many requests, you have been rate limited. Please try again later.';\r\n\r\n  // Options for the rate limiter\r\n  const rateOptions = {\r\n    max: limitConfig.maxRequests || 30,\r\n    window: limitConfig.window || 1,\r\n    delay: limitConfig.delay || 0,\r\n    trustProxy: limitConfig.trustProxy || false,\r\n    skipKey: limitConfig.skipKey || false,\r\n    skipToken: limitConfig.skipToken || false\r\n  };\r\n\r\n  // Set if behind a proxy\r\n  if (rateOptions.trustProxy) {\r\n    app.enable('trust proxy');\r\n  }\r\n\r\n  // Create a limiter\r\n  const limiter = rateLimit({\r\n    windowMs: rateOptions.window * 60 * 1000,\r\n    // Limit each IP to 100 requests per windowMs\r\n    max: rateOptions.max,\r\n    // Disable delaying, full speed until the max limit is reached\r\n    delayMs: rateOptions.delay,\r\n    handler: (request, response) => {\r\n      response.format({\r\n        json: () => {\r\n          response.status(429).send({ message: msg });\r\n        },\r\n        default: () => {\r\n          response.status(429).send(msg);\r\n        }\r\n      });\r\n    },\r\n    skip: (request) => {\r\n      // Allow bypassing the limiter if a valid key/token has been sent\r\n      if (\r\n        rateOptions.skipKey !== false &&\r\n        rateOptions.skipToken !== false &&\r\n        request.query.key === rateOptions.skipKey &&\r\n        request.query.access_token === rateOptions.skipToken\r\n      ) {\r\n        log(4, '[rate limiting] Skipping rate limiter.');\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  });\r\n\r\n  // Use a limiter as a middleware\r\n  app.use(limiter);\r\n\r\n  log(\r\n    3,\r\n    `[rate limiting] Enabled rate limiting with ${rateOptions.max} requests per ${rateOptions.window} minute for each IP, trusting proxy: ${rateOptions.trustProxy}.`\r\n  );\r\n};\r\n","import ExportError from './ExportError.js';\r\n\r\nclass HttpError extends ExportError {\r\n  constructor(message, status) {\r\n    super(message);\r\n    this.status = this.statusCode = status;\r\n  }\r\n\r\n  setStatus(status) {\r\n    this.status = status;\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default HttpError;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { getAllowCodeExecution, startExport } from '../../chart.js';\r\nimport { getOptions, mergeConfigOptions } from '../../config.js';\r\nimport { log } from '../../logger.js';\r\nimport {\r\n  fixType,\r\n  isCorrectJSON,\r\n  isObjectEmpty,\r\n  isPrivateRangeUrlFound,\r\n  optionsStringify,\r\n  measureTime\r\n} from '../../utils.js';\r\n\r\nimport HttpError from '../../errors/HttpError.js';\r\n\r\n// Reversed MIME types\r\nconst reversedMime = {\r\n  png: 'image/png',\r\n  jpeg: 'image/jpeg',\r\n  gif: 'image/gif',\r\n  pdf: 'application/pdf',\r\n  svg: 'image/svg+xml'\r\n};\r\n\r\n// The requests counter\r\nlet requestsCounter = 0;\r\n\r\n// The array of callbacks to call before a request\r\nconst beforeRequest = [];\r\n\r\n// The array of callbacks to call after a request\r\nconst afterRequest = [];\r\n\r\n/**\r\n * Invokes an array of callback functions with specified parameters, allowing\r\n * customization of request handling.\r\n *\r\n * @param {Function[]} callbacks - An array of callback functions\r\n * to be executed.\r\n * @param {Express.Request} request - The Express request object.\r\n * @param {Express.Response} response - The Express response object.\r\n * @param {Object} data - An object containing parameters like id, uniqueId,\r\n * type, and body.\r\n *\r\n * @returns {boolean} - Returns a boolean indicating the overall result\r\n * of the callback invocations.\r\n */\r\nconst doCallbacks = (callbacks, request, response, data) => {\r\n  let result = true;\r\n  const { id, uniqueId, type, body } = data;\r\n\r\n  callbacks.some((callback) => {\r\n    if (callback) {\r\n      let callResponse = callback(request, response, id, uniqueId, type, body);\r\n\r\n      if (callResponse !== undefined && callResponse !== true) {\r\n        result = callResponse;\r\n      }\r\n\r\n      return true;\r\n    }\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Handles the export requests from the client.\r\n *\r\n * @param {Express.Request} request - The Express request object.\r\n * @param {Express.Response} response - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n *\r\n * @returns {Promise<void>} - A promise that resolves once the export process\r\n * is complete.\r\n */\r\nconst exportHandler = async (request, response, next) => {\r\n  try {\r\n    // Start counting time\r\n    const stopCounter = measureTime();\r\n\r\n    // Create a unique ID for a request\r\n    const uniqueId = uuid().replace(/-/g, '');\r\n\r\n    // Get the current server's general options\r\n    const defaultOptions = getOptions();\r\n\r\n    const body = request.body;\r\n    const id = ++requestsCounter;\r\n\r\n    let type = fixType(body.type);\r\n\r\n    // Throw 'Bad Request' if there's no body\r\n    if (!body || isObjectEmpty(body)) {\r\n      throw new HttpError(\r\n        'The request body is required. Please ensure that your Content-Type header is correct (accepted types are application/json and multipart/form-data).',\r\n        400\r\n      );\r\n    }\r\n\r\n    // All of the below can be used\r\n    let instr = isCorrectJSON(body.infile || body.options || body.data);\r\n\r\n    // Throw 'Bad Request' if there's no JSON or SVG to export\r\n    if (!instr && !body.svg) {\r\n      log(\r\n        2,\r\n        `The request with ID ${uniqueId} from ${\r\n          request.headers['x-forwarded-for'] || request.connection.remoteAddress\r\n        } was incorrect. Payload received: ${JSON.stringify(body)}.`\r\n      );\r\n\r\n      throw new HttpError(\r\n        \"No correct chart data found. Ensure that you are using either application/json or multipart/form-data headers. If sending JSON, make sure the chart data is in the 'infile', 'options', or 'data' attribute. If sending SVG, ensure it is in the 'svg' attribute.\",\r\n        400\r\n      );\r\n    }\r\n\r\n    let callResponse = false;\r\n\r\n    // Call the before request functions\r\n    callResponse = doCallbacks(beforeRequest, request, response, {\r\n      id,\r\n      uniqueId,\r\n      type,\r\n      body\r\n    });\r\n\r\n    // Block the request if one of a callbacks failed\r\n    if (callResponse !== true) {\r\n      return response.send(callResponse);\r\n    }\r\n\r\n    let connectionAborted = false;\r\n\r\n    // In case the connection is closed, force to abort further actions\r\n    request.socket.on('close', () => {\r\n      connectionAborted = true;\r\n    });\r\n\r\n    log(4, `[export] Got an incoming HTTP request with ID ${uniqueId}.`);\r\n\r\n    body.constr = (typeof body.constr === 'string' && body.constr) || 'chart';\r\n\r\n    // Gather and organize options from the payload\r\n    const requestOptions = {\r\n      export: {\r\n        instr,\r\n        type,\r\n        constr: body.constr[0].toLowerCase() + body.constr.substr(1),\r\n        height: body.height,\r\n        width: body.width,\r\n        scale: body.scale || defaultOptions.export.scale,\r\n        globalOptions: isCorrectJSON(body.globalOptions, true),\r\n        themeOptions: isCorrectJSON(body.themeOptions, true)\r\n      },\r\n      customLogic: {\r\n        allowCodeExecution: getAllowCodeExecution(),\r\n        allowFileResources: false,\r\n        resources: isCorrectJSON(body.resources, true),\r\n        callback: body.callback,\r\n        customCode: body.customCode\r\n      }\r\n    };\r\n\r\n    if (instr) {\r\n      // Stringify JSON with options\r\n      requestOptions.export.instr = optionsStringify(\r\n        instr,\r\n        requestOptions.customLogic.allowCodeExecution\r\n      );\r\n    }\r\n\r\n    // Merge the request options into default ones\r\n    const options = mergeConfigOptions(defaultOptions, requestOptions);\r\n\r\n    // Save the JSON if exists\r\n    options.export.options = instr;\r\n\r\n    // Lastly, add the server specific arguments into options as payload\r\n    options.payload = {\r\n      svg: body.svg || false,\r\n      b64: body.b64 || false,\r\n      noDownload: body.noDownload || false,\r\n      requestId: uniqueId\r\n    };\r\n\r\n    // Test xlink:href elements from payload's SVG\r\n    if (body.svg && isPrivateRangeUrlFound(options.payload.svg)) {\r\n      throw new HttpError(\r\n        'SVG potentially contain at least one forbidden URL in xlink:href element. Please review the SVG content and ensure that all referenced URLs comply with security policies.',\r\n        400\r\n      );\r\n    }\r\n\r\n    // Start the export process\r\n    await startExport(options, (error, info) => {\r\n      // Remove the close event from the socket\r\n      request.socket.removeAllListeners('close');\r\n\r\n      // After the whole exporting process\r\n      if (defaultOptions.server.benchmarking) {\r\n        log(\r\n          5,\r\n          `[benchmark] Request with ID ${uniqueId} - After the whole exporting process: ${stopCounter()}ms.`\r\n        );\r\n      }\r\n\r\n      // If the connection was closed, do nothing\r\n      if (connectionAborted) {\r\n        return log(\r\n          3,\r\n          `[export] The client closed the connection before the chart finished processing.`\r\n        );\r\n      }\r\n\r\n      // If error, log it and send it to the error middleware\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // If data is missing, log the message and send it to the error middleware\r\n      if (!info || !info.result) {\r\n        throw new HttpError(\r\n          `Unexpected return from chart generation. Please check your request data. For the request with ID ${uniqueId}, the result is ${info.result}.`,\r\n          400\r\n        );\r\n      }\r\n\r\n      // Get the type from options\r\n      type = info.options.export.type;\r\n\r\n      // The after request callbacks\r\n      doCallbacks(afterRequest, request, response, { id, body: info.result });\r\n\r\n      if (info.result) {\r\n        // If only base64 is required, return it\r\n        if (body.b64) {\r\n          // SVG Exception for the Highcharts 11.3.0 version\r\n          if (type === 'pdf' || type == 'svg') {\r\n            return response.send(\r\n              Buffer.from(info.result, 'utf8').toString('base64')\r\n            );\r\n          }\r\n\r\n          return response.send(info.result);\r\n        }\r\n\r\n        // Set correct content type\r\n        response.header('Content-Type', reversedMime[type] || 'image/png');\r\n\r\n        // Decide whether to download or not chart file\r\n        if (!body.noDownload) {\r\n          response.attachment(\r\n            `${request.params.filename || request.body.filename || 'chart'}.${\r\n              type || 'png'\r\n            }`\r\n          );\r\n        }\r\n\r\n        // If SVG, return plain content\r\n        return type === 'svg'\r\n          ? response.send(info.result)\r\n          : response.send(Buffer.from(info.result, 'base64'));\r\n      }\r\n    });\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n};\r\n\r\nexport default (app) => {\r\n  /**\r\n   * Adds the POST / a route for handling POST requests at the root endpoint.\r\n   */\r\n  app.post('/', exportHandler);\r\n\r\n  /**\r\n   * Adds the POST /:filename a route for handling POST requests with\r\n   * a specified filename parameter.\r\n   */\r\n  app.post('/:filename', exportHandler);\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { join as pather } from 'path';\r\nimport { log } from '../../logger.js';\r\n\r\nimport cache from '../../cache.js';\r\nimport pool from '../../pool.js';\r\nimport { __dirname } from '../../utils.js';\r\n\r\nconst pkgFile = JSON.parse(readFileSync(pather(__dirname, 'package.json')));\r\n\r\nconst serverStartTime = new Date();\r\n\r\nconst successRates = [];\r\nconst recordInterval = 60 * 1000; // record every minute\r\nconst windowSize = 30; // 30 minutes\r\n\r\nfunction recordSuccessRate() {\r\n  const stats = pool.getStats();\r\n  const successRatio =\r\n    stats.exportAttempts === 0\r\n      ? 1\r\n      : (stats.performedExports / stats.exportAttempts) * 100;\r\n\r\n  successRates.push(successRatio);\r\n  if (successRates.length > windowSize) {\r\n    successRates.shift();\r\n  }\r\n}\r\n\r\nfunction calculateMovingAverage() {\r\n  const sum = successRates.reduce((a, b) => a + b, 0);\r\n  return sum / successRates.length;\r\n}\r\n\r\nsetInterval(recordSuccessRate, recordInterval);\r\n\r\n/**\r\n * Adds the /health and /success-moving-average routes\r\n * which output basic stats for the server.\r\n */\r\nexport default function addHealthRoutes(app) {\r\n  if (!app) {\r\n    return false;\r\n  }\r\n\r\n  app.get('/health', (_, res) => {\r\n    const stats = pool.getStats();\r\n    const period = successRates.length;\r\n    const movingAverage = calculateMovingAverage();\r\n\r\n    log(4, '[health.js] GET /health [200] - returning server health.');\r\n\r\n    res.send({\r\n      status: 'OK',\r\n      bootTime: serverStartTime,\r\n      uptime:\r\n        Math.floor(\r\n          (new Date().getTime() - serverStartTime.getTime()) / 1000 / 60\r\n        ) + ' minutes',\r\n      version: pkgFile.version,\r\n      highchartsVersion: cache.version(),\r\n      averageProcessingTime: stats.spentAverage,\r\n      performedExports: stats.performedExports,\r\n      failedExports: stats.droppedExports,\r\n      exportAttempts: stats.exportAttempts,\r\n      sucessRatio: (stats.performedExports / stats.exportAttempts) * 100,\r\n      // eslint-disable-next-line import/no-named-as-default-member\r\n      pool: pool.getPoolInfoJSON(),\r\n\r\n      // Moving average\r\n      period,\r\n      movingAverage,\r\n      message: `Last ${period} minutes had a success rate of ${movingAverage.toFixed(2)}%.`,\r\n\r\n      // SVG/JSON attempts\r\n      svgExportAttempts: stats.exportFromSvgAttempts,\r\n      jsonExportAttempts: stats.performedExports - stats.exportFromSvgAttempts\r\n    });\r\n  });\r\n}\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { promises as fsPromises } from 'fs';\r\nimport { posix } from 'path';\r\n\r\nimport cors from 'cors';\r\nimport express from 'express';\r\nimport http from 'http';\r\nimport https from 'https';\r\nimport multer from 'multer';\r\n\r\nimport errorHandler from './error.js';\r\nimport { log, logWithStack } from '../logger.js';\r\nimport rateLimit from './rate_limit.js';\r\nimport { __dirname } from '../utils.js';\r\n\r\nimport vSwitchRoute from './routes/change_hc_version.js';\r\nimport exportRoutes from './routes/export.js';\r\nimport healthRoute from './routes/health.js';\r\nimport uiRoute from './routes/ui.js';\r\n\r\nimport ExportError from '../errors/ExportError.js';\r\n\r\n// Create express app\r\nconst app = express();\r\n\r\n// Disable the X-Powered-By header\r\napp.disable('x-powered-by');\r\n\r\n// Enable CORS support\r\napp.use(cors());\r\n\r\n// Enable parsing of form data (files) with Multer package\r\nconst storage = multer.memoryStorage();\r\nconst upload = multer({\r\n  storage,\r\n  limits: {\r\n    fieldSize: 50 * 1024 * 1024\r\n  }\r\n});\r\n\r\n// Enable body parser\r\napp.use(express.json({ limit: 50 * 1024 * 1024 }));\r\napp.use(express.urlencoded({ extended: true, limit: 50 * 1024 * 1024 }));\r\n\r\n// Use only non-file multipart form fields\r\napp.use(upload.none());\r\n\r\n/**\r\n * Attach error handlers to the server.\r\n *\r\n * @param {http.Server} server - The HTTP/HTTPS server instance.\r\n */\r\nconst attachErrorHandlers = (server) => {\r\n  server.on('clientError', (error) => {\r\n    logWithStack(1, error, `[server] Client error: ${error.message}`);\r\n  });\r\n  server.on('error', (error) => {\r\n    logWithStack(1, error, `[server] Server error: ${error.message}`);\r\n  });\r\n  server.on('connection', (socket) => {\r\n    socket.on('error', (error) => {\r\n      logWithStack(1, error, `[server] Socket error: ${error.message}`);\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * Starts an HTTP server based on the provided configuration. The `serverConfig`\r\n * object contains all server related properties (see the `server` section\r\n * in the `lib/schemas/config.js` file for a reference).\r\n *\r\n * @param {Object} serverConfig - The server configuration object.\r\n *\r\n * @throws {ExportError} - Throws an error if the server cannot be configured\r\n * and started.\r\n */\r\nexport const startServer = async (serverConfig) => {\r\n  try {\r\n    // Stop if not enabled\r\n    if (!serverConfig.enable) {\r\n      return false;\r\n    }\r\n\r\n    // Listen HTTP server\r\n    if (!serverConfig.ssl.force) {\r\n      // Main server instance (HTTP)\r\n      const httpServer = http.createServer(app);\r\n\r\n      // Attach error handlers and listen to the server\r\n      attachErrorHandlers(httpServer);\r\n\r\n      // Listen\r\n      httpServer.listen(serverConfig.port, serverConfig.host);\r\n\r\n      log(\r\n        3,\r\n        `[server] Started HTTP server on ${serverConfig.host}:${serverConfig.port}.`\r\n      );\r\n    }\r\n\r\n    // Listen HTTPS server\r\n    if (serverConfig.ssl.enable) {\r\n      // Set up an SSL server also\r\n      let key, cert;\r\n\r\n      try {\r\n        // Get the SSL key\r\n        key = await fsPromises.readFile(\r\n          posix.join(serverConfig.ssl.certPath, 'server.key'),\r\n          'utf8'\r\n        );\r\n\r\n        // Get the SSL certificate\r\n        cert = await fsPromises.readFile(\r\n          posix.join(serverConfig.ssl.certPath, 'server.crt'),\r\n          'utf8'\r\n        );\r\n      } catch (error) {\r\n        log(\r\n          2,\r\n          `[server] Unable to load key/certificate from the '${serverConfig.ssl.certPath}' path. Could not run secured layer server.`\r\n        );\r\n      }\r\n\r\n      if (key && cert) {\r\n        // Main server instance (HTTPS)\r\n        const httpsServer = https.createServer({ key, cert }, app);\r\n\r\n        // Attach error handlers and listen to the server\r\n        attachErrorHandlers(httpsServer);\r\n\r\n        // Listen\r\n        httpsServer.listen(serverConfig.ssl.port, serverConfig.host);\r\n\r\n        log(\r\n          3,\r\n          `[server] Started HTTPS server on ${serverConfig.host}:${serverConfig.ssl.port}.`\r\n        );\r\n      }\r\n    }\r\n\r\n    // Enable the rate limiter if config says so\r\n    if (\r\n      serverConfig.rateLimiting &&\r\n      serverConfig.rateLimiting.enable &&\r\n      ![0, NaN].includes(serverConfig.rateLimiting.maxRequests)\r\n    ) {\r\n      rateLimit(app, serverConfig.rateLimiting);\r\n    }\r\n\r\n    // Set up static folder's route\r\n    app.use(express.static(posix.join(__dirname, 'public')));\r\n\r\n    // Set up routes\r\n    healthRoute(app);\r\n    exportRoutes(app);\r\n    uiRoute(app);\r\n    vSwitchRoute(app);\r\n\r\n    // Set up centralized error handler\r\n    errorHandler(app);\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[server] Could not configure and start the server.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Enable rate limiting for the server.\r\n *\r\n * @param {Object} limitConfig - Configuration object for rate limiting.\r\n */\r\nexport const enableRateLimiting = (limitConfig) => rateLimit(app, limitConfig);\r\n\r\n/**\r\n * Get the Express instance.\r\n *\r\n * @returns {Object} - The Express instance.\r\n */\r\nexport const getExpress = () => express;\r\n\r\n/**\r\n * Get the Express app instance.\r\n *\r\n * @returns {Object} - The Express app instance.\r\n */\r\nexport const getApp = () => app;\r\n\r\n/**\r\n * Apply middleware(s) to a specific path.\r\n *\r\n * @param {string} path - The path to which the middleware(s) should be applied.\r\n * @param {...Function} middlewares - The middleware functions to be applied.\r\n */\r\nexport const use = (path, ...middlewares) => {\r\n  app.use(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Set up a route with GET method and apply middleware(s).\r\n *\r\n * @param {string} path - The route path.\r\n * @param {...Function} middlewares - The middleware functions to be applied.\r\n */\r\nexport const get = (path, ...middlewares) => {\r\n  app.get(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Set up a route with POST method and apply middleware(s).\r\n *\r\n * @param {string} path - The route path.\r\n * @param {...Function} middlewares - The middleware functions to be applied.\r\n */\r\nexport const post = (path, ...middlewares) => {\r\n  app.post(path, ...middlewares);\r\n};\r\n\r\nexport default {\r\n  startServer,\r\n  enableRateLimiting,\r\n  getExpress,\r\n  getApp,\r\n  use,\r\n  get,\r\n  post\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { join } from 'path';\r\n\r\nimport { __dirname } from '../../utils.js';\r\n\r\n/**\r\n * Adds the GET / route for a UI when enabled on the export server.\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.get('/', (request, response) => {\r\n        response.sendFile(join(__dirname, 'public', 'index.html'));\r\n      });\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport cache from '../../cache.js';\r\nimport { envs } from '../../envs.js';\r\n\r\nimport HttpError from '../../errors/HttpError.js';\r\n\r\n/**\r\n * Adds the POST /change_hc_version/:newVersion route that can be utilized to modify\r\n * the Highcharts version on the server.\r\n *\r\n * TODO: Add auth token and connect to API\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.post(\r\n        '/version/change/:newVersion',\r\n        async (request, response, next) => {\r\n          try {\r\n            const adminToken = envs.HIGHCHARTS_ADMIN_TOKEN;\r\n\r\n            // Check the existence of the token\r\n            if (!adminToken || !adminToken.length) {\r\n              throw new HttpError(\r\n                'The server is not configured to perform run-time version changes: HIGHCHARTS_ADMIN_TOKEN is not set.',\r\n                401\r\n              );\r\n            }\r\n\r\n            // Check if the hc-auth header contain a correct token\r\n            const token = request.get('hc-auth');\r\n            if (!token || token !== adminToken) {\r\n              throw new HttpError(\r\n                'Invalid or missing token: Set the token in the hc-auth header.',\r\n                401\r\n              );\r\n            }\r\n\r\n            // Compare versions\r\n            const newVersion = request.params.newVersion;\r\n            if (newVersion) {\r\n              try {\r\n                // eslint-disable-next-line import/no-named-as-default-member\r\n                await cache.updateVersion(newVersion);\r\n              } catch (error) {\r\n                throw new HttpError(\r\n                  `Version change: ${error.message}`,\r\n                  error.statusCode\r\n                ).setError(error);\r\n              }\r\n\r\n              // Success\r\n              response.status(200).send({\r\n                statusCode: 200,\r\n                version: cache.version(),\r\n                message: `Successfully updated Highcharts to version: ${newVersion}.`\r\n              });\r\n            } else {\r\n              // No version specified\r\n              throw new HttpError('No new version supplied.', 400);\r\n            }\r\n          } catch (error) {\r\n            next(error);\r\n          }\r\n        }\r\n      );\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport 'colors';\r\n\r\nimport { checkAndUpdateCache } from './cache.js';\r\nimport {\r\n  batchExport,\r\n  setAllowCodeExecution,\r\n  singleExport,\r\n  startExport\r\n} from './chart.js';\r\nimport { mapToNewConfig, manualConfig, setOptions } from './config.js';\r\nimport {\r\n  initLogging,\r\n  log,\r\n  logWithStack,\r\n  setLogLevel,\r\n  enableFileLogging\r\n} from './logger.js';\r\nimport { initPool, killPool } from './pool.js';\r\nimport server, { startServer } from './server/server.js';\r\nimport { printLogo, printUsage } from './utils.js';\r\n\r\n/**\r\n * Initializes the export process. Tasks such as configuring logging, checking\r\n * cache and sources, and initializing the pool of resources happen during\r\n * this stage. Function that is required to be called before trying to export charts or setting a server. The `options` is an object that contains all options.\r\n *\r\n * @param {Object} options - All export options.\r\n *\r\n * @returns {Promise<Object>} Promise resolving to the updated export options.\r\n */\r\nconst initExport = async (options) => {\r\n  // Set the allowCodeExecution per export module scope\r\n  setAllowCodeExecution(\r\n    options.customLogic && options.customLogic.allowCodeExecution\r\n  );\r\n\r\n  // Init the logging\r\n  initLogging(options.logging);\r\n\r\n  // Check if cache needs to be updated\r\n  await checkAndUpdateCache(options);\r\n\r\n  // Init the pool\r\n  await initPool({\r\n    pool: options.pool || {\r\n      minWorkers: 1,\r\n      maxWorkers: 1\r\n    },\r\n    puppeteerArgs: options.puppeteer?.args || []\r\n  });\r\n\r\n  // Return updated options\r\n  return options;\r\n};\r\n\r\nexport default {\r\n  // Server\r\n  server,\r\n  startServer,\r\n  setOptions,\r\n\r\n  // Exporting\r\n  initExport,\r\n  singleExport,\r\n  batchExport,\r\n  startExport,\r\n  killPool,\r\n\r\n  // Logs\r\n  log,\r\n  logWithStack,\r\n  setLogLevel,\r\n  enableFileLogging,\r\n\r\n  // Utils\r\n  mapToNewConfig,\r\n  manualConfig,\r\n  printLogo,\r\n  printUsage\r\n};\r\n"],"names":["scriptsNames","core","modules","indicators","defaultConfig","puppeteer","args","value","type","description","highcharts","version","envLink","cdnURL","customScripts","forceFetch","cachePath","export","infile","instr","options","outfile","constr","defaultHeight","defaultWidth","defaultScale","height","width","scale","globalOptions","themeOptions","batch","rasterizationTimeout","customLogic","allowCodeExecution","allowFileResources","customCode","callback","resources","loadConfig","legacyName","createConfig","server","enable","cliName","host","port","benchmarking","proxy","timeout","rateLimiting","maxRequests","window","delay","trustProxy","skipKey","skipToken","ssl","force","certPath","pool","minWorkers","maxWorkers","workLimit","acquireTimeout","createTimeout","destroyTimeout","idleTimeout","createRetryInterval","reaperInterval","listenToProcessExits","logging","level","file","dest","ui","route","other","nodeEnv","noLogo","promptsConfig","name","message","initial","join","separator","instructions","choices","hint","min","max","round","absoluteProps","nestedArgs","createNestedArgs","obj","propChain","Object","keys","forEach","k","includes","entry","substring","undefined","dotenv","config","v","filterArray","z","string","transform","split","map","trim","filter","length","enum","values","refine","isNaN","parseFloat","envs","object","HIGHCHARTS_VERSION","test","HIGHCHARTS_CDN_URL","startsWith","HIGHCHARTS_CORE","HIGHCHARTS_MODULES","HIGHCHARTS_INDICATORS","HIGHCHARTS_FORCE_FETCH","HIGHCHARTS_CACHE_PATH","HIGHCHARTS_ADMIN_TOKEN","EXPORT_TYPE","EXPORT_CONSTR","EXPORT_DEFAULT_HEIGHT","EXPORT_DEFAULT_WIDTH","EXPORT_DEFAULT_SCALE","EXPORT_RASTERIZATION_TIMEOUT","CUSTOM_LOGIC_ALLOW_CODE_EXECUTION","CUSTOM_LOGIC_ALLOW_FILE_RESOURCES","SERVER_ENABLE","SERVER_HOST","SERVER_PORT","SERVER_BENCHMARKING","SERVER_PROXY_HOST","SERVER_PROXY_PORT","SERVER_PROXY_TIMEOUT","SERVER_RATE_LIMITING_ENABLE","SERVER_RATE_LIMITING_MAX_REQUESTS","SERVER_RATE_LIMITING_WINDOW","SERVER_RATE_LIMITING_DELAY","SERVER_RATE_LIMITING_TRUST_PROXY","SERVER_RATE_LIMITING_SKIP_KEY","SERVER_RATE_LIMITING_SKIP_TOKEN","SERVER_SSL_ENABLE","SERVER_SSL_FORCE","SERVER_SSL_PORT","SERVER_SSL_CERT_PATH","POOL_MIN_WORKERS","POOL_MAX_WORKERS","POOL_WORK_LIMIT","POOL_ACQUIRE_TIMEOUT","POOL_CREATE_TIMEOUT","POOL_DESTROY_TIMEOUT","POOL_IDLE_TIMEOUT","POOL_CREATE_RETRY_INTERVAL","POOL_REAPER_INTERVAL","POOL_BENCHMARKING","POOL_LISTEN_TO_PROCESS_EXITS","LOGGING_LEVEL","LOGGING_FILE","LOGGING_DEST","UI_ENABLE","UI_ROUTE","OTHER_NODE_ENV","OTHER_NO_LOGO","partial","parse","process","env","colors","toConsole","toFile","pathCreated","levelsDesc","title","color","listeners","key","option","entries","logToFile","texts","prefix","existsSync","mkdirSync","appendFile","concat","error","console","log","newLevel","Date","toString","fn","apply","logWithStack","customMessage","mainMessage","stackMessage","stack","slice","setLogLevel","enableFileLogging","logDest","logFile","endsWith","__dirname","fileURLToPath","URL","url","fixType","formats","outType","pop","find","t","handleResources","allowedProps","handledResources","correctResources","isCorrectJSON","readFileSync","files","propName","item","data","parsedData","JSON","stringify","deepCopy","copy","Array","isArray","prototype","hasOwnProperty","call","optionsStringify","allowFunctions","replaceAll","printUsage","bold","yellow","cycleCategories","descName","green","i","blue","category","toUpperCase","red","toBoolean","wrapAround","replace","measureTime","start","hrtime","bigint","Number","generalOptions","getOptions","mergeConfigOptions","newOptions","mergedOptions","updateDefaultConfig","configObj","customObj","customValue","initOptions","items","recursiveProps","objectToUpdate","nestedNames","shift","assign","async","fetch","requestOptions","Promise","resolve","reject","protocol","https","http","getProtocol","get","res","on","chunk","text","ExportError","Error","constructor","super","this","setError","statusCode","cache","activeManifest","sources","hcVersion","extractVersion","indexOf","fetchAndProcessScript","script","fetchedModules","shouldThrowError","response","updateCache","highchartsOptions","proxyOptions","sourcePath","coreScripts","moduleScripts","proxyAgent","proxyHost","proxyPort","HttpsProxyAgent","agent","allFetchPromises","all","fetchScripts","c","m","writeFileSync","checkAndUpdateCache","manifestPath","requestUpdate","manifest","moduleMap","numberOfModules","some","moduleName","newManifest","saveConfigToManifest","getCachePath","cache$1","newVersion","RANDOM_PID","randomBytes","PUPPETEER_DIR","path","minimalArgs","template","fs","browser","setPageContent","page","setContent","addScriptTag","evaluate","setupHighcharts","$eval","element","errorMessage","_displayErrors","innerHTML","clearPage","hardReset","goto","document","body","newPage","setCacheEnabled","close","isConnected","__basedir","setAsConfig","chart","triggerExport","puppeteerExport","injectedResources","clearInjected","dispose","scriptsToRemove","getElementsByTagName","stylesToRemove","linksToRemove","remove","exportOptions","requestAnimationFrame","displayErrors","debugger","isSVG","d","svgTemplate","strInj","js","push","content","isLocal","css","cssImports","match","cssImportPath","addStyleTag","size","chartHeight","baseVal","chartWidth","Highcharts","charts","viewportHeight","Math","ceil","viewportWidth","setViewport","deviceScaleFactor","zoomCallback","style","zoom","margin","x","y","getBoundingClientRect","trunc","getClipRegion","outerHTML","createSVG","encoding","clip","race","screenshot","omitBackground","_resolve","setTimeout","createImage","pdf","createPDF","oldCharts","oldChart","destroy","stats","performedExports","exportAttempts","exportFromSvgAttempts","timeSpent","droppedExports","spentAverage","puppeteerArgs","poolConfig","factory","create","id","uuid","startDate","getTime","browserNewPage","isClosed","workCount","random","validate","workerHandle","initPool","code","killPool","exit","allArgs","tryCount","open","launch","headless","userDataDir","createBrowser","parseInt","Pool","acquireTimeoutMillis","createTimeoutMillis","destroyTimeoutMillis","idleTimeoutMillis","createRetryIntervalMillis","reapIntervalMillis","propagateCreateError","resource","eventId","initialResources","acquire","promise","release","browserClose","destroyed","postWork","getPoolInfo","acquireCounter","payload","requestId","workStart","exportCounter","result","exportTime","numFree","numUsed","numPendingAcquires","pool$1","available","inUse","pendingAcquire","startExport","settings","endCallback","svg","initExportSettings","exportAsString","doStraightInject","doExport","findChartSize","exporting","precision","multiplier","pow","roundNumber","sourceHeight","sourceWidth","param","chartJson","customLogicOptions","allowCodeExecutionScoped","enabled","optionsName","stringToExport","chartJSON","logErrorMiddleware","req","next","returnErrorMiddleware","stCode","status","json","rateLimit","app","limitConfig","msg","rateOptions","limiter","windowMs","delayMs","handler","request","format","send","default","skip","query","access_token","use","HttpError","setStatus","reversedMime","png","jpeg","gif","requestsCounter","beforeRequest","afterRequest","doCallbacks","callbacks","uniqueId","callResponse","exportHandler","stopCounter","defaultOptions","headers","connection","remoteAddress","connectionAborted","socket","toLowerCase","substr","b64","noDownload","pattern","isPrivateRangeUrlFound","info","removeAllListeners","Buffer","from","header","attachment","params","filename","pkgFile","pather","serverStartTime","successRates","addHealthRoutes","_","period","movingAverage","reduce","a","b","bootTime","uptime","floor","highchartsVersion","averageProcessingTime","failedExports","sucessRatio","toFixed","svgExportAttempts","jsonExportAttempts","setInterval","successRatio","express","disable","cors","storage","multer","memoryStorage","upload","limits","fieldSize","limit","urlencoded","extended","none","attachErrorHandlers","startServer","serverConfig","httpServer","createServer","listen","cert","fsPromises","readFile","posix","httpsServer","NaN","static","healthRoute","post","exportRoutes","sendFile","uiRoute","adminToken","token","vSwitchRoute","errorHandler","enableRateLimiting","getExpress","getApp","middlewares","index","setOptions","userOptions","configIndex","findIndex","arg","fileName","loadConfigFile","showUsage","propertiesChain","argumentType","prop","pairArgumentValue","initExport","initLogging","singleExport","batchExport","batchFunctions","pair","mapToNewConfig","oldOptions","manualConfig","configFileName","configFile","choice","prompts","onSubmit","p","categories","questionsCounter","allQuestions","section","prompt","answer","module","writeFile","printLogo","packageVersion"],"mappings":"+nBAeO,MAAMA,EAAe,CAC1BC,KAAM,CAAC,aAAc,kBAAmB,iBACxCC,QAAS,CACP,QACA,MACA,QACA,YACA,cACA,uBACA,gBACA,uBACA,eACA,QACA,OACA,aACA,mBACA,eACA,cACA,UACA,UACA,cACA,WACA,UACA,YACA,cACA,YACA,sBACA,SACA,SACA,WACA,aACA,YACA,eACA,yBACA,SACA,eACA,YACA,kBACA,SACA,cACA,mBACA,eACA,cACA,eACA,cACA,cACA,WACA,eACA,WACA,SACA,OACA,WACA,YACA,SACA,qBACA,aACA,WACA,WACA,WACA,WACA,eACA,UACA,kBACA,oBACA,aACA,WAEFC,WAAY,CAAC,mBAKFC,EAAgB,CAC3BC,UAAW,CACTC,KAAM,CACJC,MAAO,GACPC,KAAM,WACNC,YAAa,0CAGjBC,WAAY,CACVC,QAAS,CACPJ,MAAO,SACPC,KAAM,SACNI,QAAS,qBACTH,YAAa,sCAEfI,OAAQ,CACNN,MAAO,+BACPC,KAAM,SACNI,QAAS,qBACTH,YAAa,kDAEfR,KAAM,CACJM,MAAOP,EAAaC,KACpBO,KAAM,WACNI,QAAS,kBACTH,YAAa,yCAEfP,QAAS,CACPK,MAAOP,EAAaE,QACpBM,KAAM,WACNI,QAAS,qBACTH,YAAa,uCAEfN,WAAY,CACVI,MAAOP,EAAaG,WACpBK,KAAM,WACNI,QAAS,wBACTH,YAAa,0CAEfK,cAAe,CACbP,MAAO,CACL,wEACA,kGAEFC,KAAM,WACNC,YAAa,uDAEfM,WAAY,CACVR,OAAO,EACPC,KAAM,UACNI,QAAS,yBACTH,YACE,iFAEJO,UAAW,CACTT,MAAO,SACPC,KAAM,SACNI,QAAS,wBACTH,YACE,oGAGNQ,OAAQ,CACNC,OAAQ,CACNX,MAAO,KACPC,KAAM,SACNC,YACE,wHAEJU,MAAO,CACLZ,MAAO,KACPC,KAAM,SACNC,YACE,qGAEJW,QAAS,CACPb,MAAO,KACPC,KAAM,SACNC,YAAa,oCAEfY,QAAS,CACPd,MAAO,KACPC,KAAM,SACNC,YACE,qGAEJD,KAAM,CACJD,MAAO,MACPC,KAAM,SACNI,QAAS,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"}