{"version":3,"file":"index.esm.js","sources":["../lib/schemas/config.js","../lib/logger.js","../lib/server/error.js","../lib/server/rate_limit.js","../lib/utils.js","../lib/fetch.js","../lib/errors/ExportError.js","../lib/cache.js","../lib/browser.js","../lib/export.js","../lib/benchmark.js","../templates/svg_export/svg_export.js","../lib/pool.js","../lib/server/routes/health.js","../lib/config.js","../lib/chart.js","../lib/errors/HttpError.js","../lib/errors/BadRequestError.js","../lib/server/routes/export.js","../lib/server/server.js","../lib/server/routes/ui.js","../lib/server/routes/change_hc_version.js","../lib/index.js"],"sourcesContent":["/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// Load .env into environment variables\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\n// This is the configuration object with all options and their default values,\r\n// also from the .env file if one exists\r\nexport const defaultConfig = {\r\n  puppeteer: {\r\n    args: {\r\n      value: [],\r\n      type: 'string[]',\r\n      description: 'Array of arguments to send to puppeteer.'\r\n    }\r\n  },\r\n  highcharts: {\r\n    version: {\r\n      value: 'latest',\r\n      envLink: 'HIGHCHARTS_VERSION',\r\n      type: 'string',\r\n      description: 'Highcharts version to use.'\r\n    },\r\n    cdnURL: {\r\n      value: 'https://code.highcharts.com/',\r\n      envLink: 'HIGHCHARTS_CDN',\r\n      type: 'string',\r\n      description: 'The CDN URL of Highcharts scripts to use.'\r\n    },\r\n    coreScripts: {\r\n      envLink: 'HIGHCHARTS_CORE_SCRIPTS',\r\n      value: ['highcharts', 'highcharts-more', 'highcharts-3d'],\r\n      type: 'string[]',\r\n      description: 'Highcharts core scripts to fetch.'\r\n    },\r\n    modules: {\r\n      envLink: 'HIGHCHARTS_MODULES',\r\n      value: [\r\n        'stock',\r\n        'map',\r\n        'gantt',\r\n        'exporting',\r\n        'export-data',\r\n        'parallel-coordinates',\r\n        'accessibility',\r\n        'annotations-advanced',\r\n        'boost-canvas',\r\n        'boost',\r\n        'data',\r\n        'draggable-points',\r\n        'static-scale',\r\n        'broken-axis',\r\n        'heatmap',\r\n        'tilemap',\r\n        'timeline',\r\n        'treemap',\r\n        'treegraph',\r\n        'item-series',\r\n        'drilldown',\r\n        'histogram-bellcurve',\r\n        'bullet',\r\n        'funnel',\r\n        'funnel3d',\r\n        'pyramid3d',\r\n        'networkgraph',\r\n        'pareto',\r\n        'pattern-fill',\r\n        'pictorial',\r\n        'price-indicator',\r\n        'sankey',\r\n        'arc-diagram',\r\n        'dependency-wheel',\r\n        'series-label',\r\n        'solid-gauge',\r\n        'sonification',\r\n        'stock-tools',\r\n        'streamgraph',\r\n        'sunburst',\r\n        'variable-pie',\r\n        'variwide',\r\n        'vector',\r\n        'venn',\r\n        'windbarb',\r\n        'wordcloud',\r\n        'xrange',\r\n        'no-data-to-display',\r\n        'drag-panes',\r\n        'debugger',\r\n        'dumbbell',\r\n        'lollipop',\r\n        'cylinder',\r\n        'organization',\r\n        'dotplot',\r\n        'marker-clusters',\r\n        'hollowcandlestick',\r\n        'heikinashi'\r\n      ],\r\n      type: 'string[]',\r\n      description: 'Highcharts modules to fetch.'\r\n    },\r\n    indicators: {\r\n      envLink: 'HIGHCHARTS_INDICATORS',\r\n      value: ['indicators-all'],\r\n      type: 'string[]',\r\n      description: 'Highcharts indicators to fetch.'\r\n    },\r\n    scripts: {\r\n      value: [\r\n        'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js',\r\n        'https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js'\r\n      ],\r\n      type: 'string[]',\r\n      description:\r\n        'Additional direct scripts/optional dependencies (e.g. moment.js).'\r\n    },\r\n    forceFetch: {\r\n      envLink: 'HIGHCHARTS_FORCE_FETCH',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'Should all the scripts be refetched after rerunning the server.'\r\n    }\r\n  },\r\n  export: {\r\n    infile: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'The input file name along with a type (json or svg). It can be a correct JSON or SVG file.'\r\n    },\r\n    instr: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'An input in a form of a stringified JSON or SVG file. Overrides the --infile.'\r\n    },\r\n    options: {\r\n      value: false,\r\n      type: 'string',\r\n      description: 'An alias for the --instr option.'\r\n    },\r\n    outfile: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'The output filename along with a type (jpeg, png, pdf or svg). Ignores the --type flag.'\r\n    },\r\n    type: {\r\n      envLink: 'EXPORT_DEFAULT_TYPE',\r\n      value: 'png',\r\n      type: 'string',\r\n      description:\r\n        'The format of the file to export to. Can be jpeg, png, pdf or svg.'\r\n    },\r\n    constr: {\r\n      envLink: 'EXPORT_DEFAULT_CONSTR',\r\n      value: 'chart',\r\n      type: 'string',\r\n      description:\r\n        'The constructor to use. Can be chart, stockChart, mapChart or ganttChart.'\r\n    },\r\n    defaultHeight: {\r\n      envLink: 'EXPORT_DEFAULT_HEIGHT',\r\n      value: 400,\r\n      type: 'number',\r\n      description:\r\n        'The default height of the exported chart. Used when not found any value set.'\r\n    },\r\n    defaultWidth: {\r\n      envLink: 'EXPORT_DEFAULT_WIDTH',\r\n      value: 600,\r\n      type: 'number',\r\n      description:\r\n        'The default width of the exported chart. Used when not found any value set.'\r\n    },\r\n    defaultScale: {\r\n      envLink: 'EXPORT_DEFAULT_SCALE',\r\n      value: 1,\r\n      type: 'number',\r\n      description:\r\n        'The default scale of the exported chart. Ranges between 1 and 5.'\r\n    },\r\n    height: {\r\n      type: 'number',\r\n      value: false,\r\n      description:\r\n        'The default height of the exported chart. Overrides the option in the chart settings.'\r\n    },\r\n    width: {\r\n      type: 'number',\r\n      value: false,\r\n      description:\r\n        'The width of the exported chart. Overrides the option in the chart settings.'\r\n    },\r\n    scale: {\r\n      value: false,\r\n      type: 'number',\r\n      description: 'The scale of the exported chart. Ranges between 1 and 5.'\r\n    },\r\n    globalOptions: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'A stringified JSON or a filename with options to be passed into the Highcharts.setOptions.'\r\n    },\r\n    themeOptions: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'A stringified JSON or a filename with theme options to be passed into the Highcharts.setOptions.'\r\n    },\r\n    batch: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Starts a batch job. A string that contains input/output pairs: \"in=out;in=out;..\".'\r\n    },\r\n    rasterizationTimeout: {\r\n      envLink: 'EXPORT_RASTERIZATION_TIMEOUT',\r\n      value: 1500,\r\n      type: 'number',\r\n      description: 'The number of milliseconds to wait for rendering a webpage.'\r\n    }\r\n  },\r\n  customCode: {\r\n    allowCodeExecution: {\r\n      envLink: 'HIGHCHARTS_ALLOW_CODE_EXECUTION',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'If set to true, allow for the execution of arbitrary code when exporting.'\r\n    },\r\n    allowFileResources: {\r\n      envLink: 'HIGHCHARTS_ALLOW_FILE_RESOURCES',\r\n      value: true,\r\n      type: 'boolean',\r\n      description:\r\n        'Allow injecting resources from the filesystem. Has no effect when running as a server.'\r\n    },\r\n    customCode: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'A function to be called before chart initialization. Can be a filename with the js extension.'\r\n    },\r\n    callback: {\r\n      value: false,\r\n      type: 'string',\r\n      description: 'A JavaScript file with a function to run on construction.'\r\n    },\r\n    resources: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'An additional resource in a form of stringified JSON. It can contain files, js and css sections.'\r\n    },\r\n    loadConfig: {\r\n      value: false,\r\n      type: 'string',\r\n      description: 'A file that contains a pre-defined config to use.'\r\n    },\r\n    createConfig: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Allows to set options through a prompt and save in a provided config file.'\r\n    }\r\n  },\r\n  server: {\r\n    enable: {\r\n      envLink: 'HIGHCHARTS_SERVER_ENABLE',\r\n      value: false,\r\n      type: 'boolean',\r\n      cliName: 'enableServer',\r\n      description: 'If set to true, starts a server on 0.0.0.0.'\r\n    },\r\n    host: {\r\n      envLink: 'HIGHCHARTS_SERVER_HOST',\r\n      value: '0.0.0.0',\r\n      type: 'string',\r\n      description:\r\n        'The hostname of the server. Also starts a server listening on the supplied hostname.'\r\n    },\r\n    port: {\r\n      envLink: 'HIGHCHARTS_SERVER_PORT',\r\n      value: 7801,\r\n      type: 'number',\r\n      description: 'The port to use for the server. Defaults to 7801.'\r\n    },\r\n    ssl: {\r\n      enable: {\r\n        envLink: 'HIGHCHARTS_SERVER_SSL_ENABLE',\r\n        value: false,\r\n        type: 'boolean',\r\n        cliName: 'enableSsl',\r\n        description: 'Enables the SSL protocol.'\r\n      },\r\n      force: {\r\n        envLink: 'HIGHCHARTS_SERVER_SSL_FORCE',\r\n        value: false,\r\n        type: 'boolean',\r\n        cliName: 'sslForced',\r\n        description:\r\n          'If set to true, forces the server to only serve over HTTPS.'\r\n      },\r\n      port: {\r\n        envLink: 'HIGHCHARTS_SERVER_SSL_PORT',\r\n        value: 443,\r\n        type: 'number',\r\n        cliName: 'sslPort',\r\n        description: 'The port on which to run the SSL server.'\r\n      },\r\n      certPath: {\r\n        envLink: 'HIGHCHARTS_SSL_CERT_PATH',\r\n        value: '',\r\n        type: 'string',\r\n        description: 'The path to the SSL certificate/key.'\r\n      }\r\n    },\r\n    rateLimiting: {\r\n      enable: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_ENABLE',\r\n        value: false,\r\n        type: 'boolean',\r\n        cliName: 'enableRateLimiting',\r\n        description: 'Enables rate limiting.'\r\n      },\r\n      maxRequests: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_MAX',\r\n        value: 10,\r\n        type: 'number',\r\n        description: 'Max requests allowed in a one minute.'\r\n      },\r\n      window: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_WINDOW',\r\n        value: 1,\r\n        type: 'number',\r\n        description: 'The time window in minutes for rate limiting.'\r\n      },\r\n      delay: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_DELAY',\r\n        value: 0,\r\n        type: 'number',\r\n        description:\r\n          'The amount to delay each successive request before hitting the max.'\r\n      },\r\n      trustProxy: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_TRUST_PROXY',\r\n        value: false,\r\n        type: 'boolean',\r\n        description: 'Set this to true if behind a load balancer.'\r\n      },\r\n      skipKey: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_SKIP_KEY',\r\n        value: '',\r\n        type: 'number|string',\r\n        description:\r\n          'Allows bypassing the rate limiter and should be provided with skipToken argument.'\r\n      },\r\n      skipToken: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_SKIP_TOKEN',\r\n        value: '',\r\n        type: 'number|string',\r\n        description:\r\n          'Allows bypassing the rate limiter and should be provided with skipKey argument.'\r\n      }\r\n    }\r\n  },\r\n  pool: {\r\n    minWorkers: {\r\n      envLink: 'HIGHCHARTS_POOL_MIN_WORKERS',\r\n      value: 4,\r\n      type: 'number',\r\n      description: 'The number of initial workers to spawn.'\r\n    },\r\n    maxWorkers: {\r\n      envLink: 'HIGHCHARTS_POOL_MAX_WORKERS',\r\n      value: 8,\r\n      type: 'number',\r\n      description: 'The number of max workers to spawn.'\r\n    },\r\n    workLimit: {\r\n      envLink: 'HIGHCHARTS_POOL_WORK_LIMIT',\r\n      value: 40,\r\n      type: 'number',\r\n      description:\r\n        'The pieces of work that can be performed before restarting process.'\r\n    },\r\n    acquireTimeout: {\r\n      envLink: 'HIGHCHARTS_POOL_ACQUIRE_TIMEOUT',\r\n      value: 5000,\r\n      type: 'number',\r\n      description:\r\n        'The number of milliseconds to wait for acquiring a resource.'\r\n    },\r\n    createTimeout: {\r\n      envLink: 'HIGHCHARTS_POOL_CREATE_TIMEOUT',\r\n      value: 5000,\r\n      type: 'number',\r\n      description: 'The number of milliseconds to wait for creating a resource.'\r\n    },\r\n    destroyTimeout: {\r\n      envLink: 'HIGHCHARTS_POOL_DESTROY_TIMEOUT',\r\n      value: 5000,\r\n      type: 'number',\r\n      description:\r\n        'The number of milliseconds to wait for destroying a resource.'\r\n    },\r\n    idleTimeout: {\r\n      envLink: 'HIGHCHARTS_POOL_IDLE_TIMEOUT',\r\n      value: 30000,\r\n      type: 'number',\r\n      description:\r\n        'The number of milliseconds after an idle resource is destroyed.'\r\n    },\r\n    createRetryInterval: {\r\n      envLink: 'HIGHCHARTS_POOL_CREATE_RETRY_INTERVAL',\r\n      value: 200,\r\n      type: 'number',\r\n      description:\r\n        'The number of milliseconds after the create process is retried in case of fail.'\r\n    },\r\n    reaperInterval: {\r\n      envLink: 'HIGHCHARTS_POOL_REAPER_INTERVAL',\r\n      value: 1000,\r\n      type: 'number',\r\n      description:\r\n        'The number of milliseconds after the check for idle resources to destroy is triggered.'\r\n    },\r\n    benchmarking: {\r\n      envLink: 'HIGHCHARTS_POOL_BENCHMARKING',\r\n      value: false,\r\n      type: 'boolean',\r\n      description: 'Enable benchmarking.'\r\n    },\r\n    listenToProcessExits: {\r\n      envLink: 'HIGHCHARTS_POOL_LISTEN_TO_PROCESS_EXITS',\r\n      value: true,\r\n      type: 'boolean',\r\n      description:\r\n        'Set to false in order to skip attaching process.exit handlers.'\r\n    }\r\n  },\r\n  logging: {\r\n    level: {\r\n      envLink: 'HIGHCHARTS_LOG_LEVEL',\r\n      value: 4,\r\n      type: 'number',\r\n      cliName: 'logLevel',\r\n      description:\r\n        'The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose).'\r\n    },\r\n    file: {\r\n      envLink: 'HIGHCHARTS_LOG_FILE',\r\n      value: 'highcharts-export-server.log',\r\n      type: 'string',\r\n      cliName: 'logFile',\r\n      description:\r\n        'A name of a log file. The --logDest also needs to be set to enable file logging.'\r\n    },\r\n    dest: {\r\n      envLink: 'HIGHCHARTS_LOG_DEST',\r\n      value: 'log/',\r\n      type: 'string',\r\n      cliName: 'logDest',\r\n      description: 'The path to store log files. Also enables file logging.'\r\n    }\r\n  },\r\n  ui: {\r\n    enable: {\r\n      envLink: 'HIGHCHARTS_UI_ENABLE',\r\n      value: false,\r\n      type: 'boolean',\r\n      cliName: 'enableUi',\r\n      description: 'Enables the UI for the export server.'\r\n    },\r\n    route: {\r\n      envLink: 'HIGHCHARTS_UI_ROUTE',\r\n      value: '/',\r\n      type: 'string',\r\n      cliName: 'uiRoute',\r\n      description: 'The route to attach the UI to.'\r\n    }\r\n  },\r\n  other: {\r\n    noLogo: {\r\n      envLink: 'HIGHCHARTS_NO_LOGO',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'Skip printing the logo on a startup. Will be replaced by a simple text.'\r\n    }\r\n  },\r\n  payload: {}\r\n};\r\n\r\n// The config descriptions object for the prompts functionality. It contains\r\n// information like:\r\n// * Type of a prompt\r\n// * Name of an option\r\n// * Short description of a chosen option\r\n// * Initial value\r\nexport const promptsConfig = {\r\n  puppeteer: [\r\n    {\r\n      type: 'list',\r\n      name: 'args',\r\n      message: 'Puppeteer arguments',\r\n      initial: defaultConfig.puppeteer.args.value.join(','),\r\n      separator: ','\r\n    }\r\n  ],\r\n  highcharts: [\r\n    {\r\n      type: 'text',\r\n      name: 'version',\r\n      message: 'Highcharts version',\r\n      initial: defaultConfig.highcharts.version.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'cdnURL',\r\n      message: 'The url of CDN',\r\n      initial: defaultConfig.highcharts.cdnURL.value\r\n    },\r\n    {\r\n      type: 'multiselect',\r\n      name: 'modules',\r\n      message: 'Available modules',\r\n      instructions: 'Space: Select specific, A: Select all, Enter: Confirm.',\r\n      choices: defaultConfig.highcharts.modules.value\r\n    },\r\n    {\r\n      type: 'list',\r\n      name: 'scripts',\r\n      message: 'Custom scripts',\r\n      initial: defaultConfig.highcharts.scripts.value.join(','),\r\n      separator: ','\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'forceFetch',\r\n      message: 'Should refetch all the scripts after each server rerun',\r\n      initial: defaultConfig.highcharts.forceFetch.value\r\n    }\r\n  ],\r\n  export: [\r\n    {\r\n      type: 'select',\r\n      name: 'type',\r\n      message: 'The default type of a file to export to',\r\n      hint: `Default: ${defaultConfig.export.type.value}`,\r\n      initial: 0,\r\n      choices: ['png', 'jpeg', 'pdf', 'svg']\r\n    },\r\n    {\r\n      type: 'select',\r\n      name: 'constr',\r\n      message: 'The default constructor for Highcharts to use',\r\n      hint: `Default: ${defaultConfig.export.constr.value}`,\r\n      initial: 0,\r\n      choices: ['chart', 'stockChart', 'mapChart', 'ganttChart']\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultHeight',\r\n      message: 'The default fallback height of the exported chart',\r\n      initial: defaultConfig.export.defaultHeight.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultWidth',\r\n      message: 'The default fallback width of the exported chart',\r\n      initial: defaultConfig.export.defaultWidth.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultScale',\r\n      message: 'The default fallback scale of the exported chart',\r\n      initial: defaultConfig.export.defaultScale.value,\r\n      min: 0.1,\r\n      max: 5\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rasterizationTimeout',\r\n      message: 'The number of milliseconds to wait for rendering a webpage',\r\n      initial: defaultConfig.export.rasterizationTimeout.value\r\n    }\r\n  ],\r\n  customCode: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'allowCodeExecution',\r\n      message: 'Allow to execute custom code',\r\n      initial: defaultConfig.customCode.allowCodeExecution.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'allowFileResources',\r\n      message: 'Allow file resources',\r\n      initial: defaultConfig.customCode.allowFileResources.value\r\n    }\r\n  ],\r\n  server: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'enable',\r\n      message: 'Starts a server on 0.0.0.0',\r\n      initial: defaultConfig.server.enable.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'host',\r\n      message: 'A hostname of a server',\r\n      initial: defaultConfig.server.host.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'port',\r\n      message: 'A port of a server',\r\n      initial: defaultConfig.server.port.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'ssl.enable',\r\n      message: 'Enable SSL protocol',\r\n      initial: defaultConfig.server.ssl.enable.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'ssl.force',\r\n      message: 'Force to only serve over HTTPS',\r\n      initial: defaultConfig.server.ssl.force.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'ssl.port',\r\n      message: 'Port on which to run the SSL server',\r\n      initial: defaultConfig.server.ssl.port.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'ssl.certPath',\r\n      message: 'A path where to find the SSL certificate/key',\r\n      initial: defaultConfig.server.ssl.certPath.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'rateLimiting.enable',\r\n      message: 'Enable rate limiting',\r\n      initial: defaultConfig.server.rateLimiting.enable.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.maxRequests',\r\n      message: 'Max requests allowed in a one minute',\r\n      initial: defaultConfig.server.rateLimiting.maxRequests.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.window',\r\n      message: 'The time window in minutes for rate limiting',\r\n      initial: defaultConfig.server.rateLimiting.window.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.delay',\r\n      message:\r\n        'The amount to delay each successive request before hitting the max',\r\n      initial: defaultConfig.server.rateLimiting.delay.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'rateLimiting.trustProxy',\r\n      message: 'Set this to true if behind a load balancer',\r\n      initial: defaultConfig.server.rateLimiting.trustProxy.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'rateLimiting.skipKey',\r\n      message:\r\n        'Allows bypassing the rate limiter and should be provided with skipToken argument',\r\n      initial: defaultConfig.server.rateLimiting.skipKey.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'rateLimiting.skipToken',\r\n      message:\r\n        'Allows bypassing the rate limiter and should be provided with skipKey argument',\r\n      initial: defaultConfig.server.rateLimiting.skipToken.value\r\n    }\r\n  ],\r\n  pool: [\r\n    {\r\n      type: 'number',\r\n      name: 'minWorkers',\r\n      message: 'The number of initial workers to spawn',\r\n      initial: defaultConfig.pool.minWorkers.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'maxWorkers',\r\n      message: 'The number of max workers to spawn',\r\n      initial: defaultConfig.pool.maxWorkers.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'workLimit',\r\n      message:\r\n        'The pieces of work that can be performed before restarting a puppeteer process',\r\n      initial: defaultConfig.pool.workLimit.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'acquireTimeout',\r\n      message: 'The number of milliseconds to wait for acquiring a resource',\r\n      initial: defaultConfig.pool.acquireTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'createTimeout',\r\n      message: 'The number of milliseconds to wait for creating a resource',\r\n      initial: defaultConfig.pool.createTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'destroyTimeout',\r\n      message: 'The number of milliseconds to wait for destroying a resource',\r\n      initial: defaultConfig.pool.destroyTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'idleTimeout',\r\n      message: 'The number of milliseconds after an idle resource is destroyed',\r\n      initial: defaultConfig.pool.idleTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'createRetryInterval',\r\n      message:\r\n        'The number of milliseconds after the create process is retried in case of fail',\r\n      initial: defaultConfig.pool.createRetryInterval.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'reaperInterval',\r\n      message:\r\n        'The number of milliseconds after the check for idle resources to destroy is triggered',\r\n      initial: defaultConfig.pool.reaperInterval.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'benchmarking',\r\n      message: 'Set benchmarking',\r\n      initial: defaultConfig.pool.benchmarking.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'listenToProcessExits',\r\n      message: 'Set to false in order to skip attaching process.exit handlers',\r\n      initial: defaultConfig.pool.listenToProcessExits.value\r\n    }\r\n  ],\r\n  logging: [\r\n    {\r\n      type: 'number',\r\n      name: 'level',\r\n      message:\r\n        'The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose)',\r\n      initial: defaultConfig.logging.level.value,\r\n      round: 0,\r\n      min: 0,\r\n      max: 4\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'file',\r\n      message:\r\n        'A name of a log file. The --logDest also needs to be set to enable file logging',\r\n      initial: defaultConfig.logging.file.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'dest',\r\n      message: 'A path to log files. It enables file logging',\r\n      initial: defaultConfig.logging.dest.value\r\n    }\r\n  ],\r\n  ui: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'enable',\r\n      message: 'Enable UI for the export server',\r\n      initial: defaultConfig.ui.enable.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'route',\r\n      message: 'A route to attach the UI to',\r\n      initial: defaultConfig.ui.route.value\r\n    }\r\n  ],\r\n  other: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'noLogo',\r\n      message:\r\n        'Skip printing the logo on a startup. Will be replaced by a simple text',\r\n      initial: defaultConfig.other.noLogo.value\r\n    }\r\n  ]\r\n};\r\n\r\n// Absolute props that, in case of merging recursively, need to be force merged\r\nexport const absoluteProps = [\r\n  'options',\r\n  'globalOptions',\r\n  'themeOptions',\r\n  'resources',\r\n  'payload'\r\n];\r\n\r\n// Argument nesting level of all export server options\r\nexport const nestedArgs = {};\r\n\r\n/**\r\n * Creates nested arguments chain for all options\r\n *\r\n * @param {object} obj - The object based on which the initial configuration be\r\n * made.\r\n * @param {string } propChain - Required for creating a string chain of\r\n * properties for nested arguments.\r\n */\r\nconst createNestedArgs = (obj, propChain = '') => {\r\n  Object.keys(obj).forEach((k) => {\r\n    if (!['puppeteer', 'highcharts'].includes(k)) {\r\n      const entry = obj[k];\r\n      if (typeof entry.value === 'undefined') {\r\n        // Go deeper in the nested arguments\r\n        createNestedArgs(entry, `${propChain}.${k}`);\r\n      } else {\r\n        // Create the chain of nested arguments\r\n        nestedArgs[entry.cliName || k] = `${propChain}.${k}`.substring(1);\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\ncreateNestedArgs(defaultConfig);\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { appendFile, existsSync, mkdirSync } from 'fs';\r\n\r\nimport { defaultConfig } from './schemas/config.js';\r\n\r\n// The available colors\r\nconst colors = ['red', 'yellow', 'blue', 'gray'];\r\n\r\n// The default logging config\r\nlet logging = {\r\n  // Flags for logging status\r\n  toConsole: true,\r\n  toFile: false,\r\n  pathCreated: false,\r\n  // Log levels\r\n  levelsDesc: [\r\n    {\r\n      title: 'error',\r\n      color: colors[0]\r\n    },\r\n    {\r\n      title: 'warning',\r\n      color: colors[1]\r\n    },\r\n    {\r\n      title: 'notice',\r\n      color: colors[2]\r\n    },\r\n    {\r\n      title: 'verbose',\r\n      color: colors[3]\r\n    }\r\n  ],\r\n  // Log listeners\r\n  listeners: []\r\n};\r\n\r\n// Gather init logging options\r\nfor (const [key, option] of Object.entries(defaultConfig.logging)) {\r\n  logging[key] = option.value;\r\n}\r\n\r\nconst logToFile = (texts, prefix) => {\r\n  if (logging.toFile) {\r\n    if (!logging.pathCreated) {\r\n      // Create if does not exist\r\n      !existsSync(logging.dest) && mkdirSync(logging.dest);\r\n\r\n      // We now assume the path is available, e.g. it's the responsibility\r\n      // of the user to create the path with the correct access rights.\r\n      logging.pathCreated = true;\r\n    }\r\n\r\n    // Add the content to a file\r\n    appendFile(\r\n      `${logging.dest}${logging.file}`,\r\n      [prefix].concat(texts).join(' ') + '\\n',\r\n      (error) => {\r\n        if (error) {\r\n          console.log(`[logger] Unable to write to log file: ${error}`);\r\n          logging.toFile = false;\r\n        }\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Logs a message. Accepts a variable amount of arguments. Arguments after\r\n * `level` will be passed directly to console.log, and/or will be joined\r\n * and appended to the log file.\r\n *\r\n * @param {any} args - An array of arguments where the first is the log level\r\n * and the rest are strings to build a message with.\r\n */\r\nexport const log = (...args) => {\r\n  const [newLevel, ...texts] = args;\r\n\r\n  // Current logging options\r\n  const { level, levelsDesc } = logging;\r\n\r\n  // Check if log level is within a correct range\r\n  if (newLevel === 0 || newLevel > level || level > levelsDesc.length) {\r\n    return;\r\n  }\r\n\r\n  // Get rid of the GMT text information\r\n  const newDate = new Date().toString().split('(')[0].trim();\r\n\r\n  // Create a message's prefix\r\n  const prefix = `${newDate} [${levelsDesc[newLevel - 1].title}] -`;\r\n\r\n  // Call available log listeners\r\n  logging.listeners.forEach((fn) => {\r\n    fn(prefix, texts.join(' '));\r\n  });\r\n\r\n  // Log to file\r\n  logToFile(texts, prefix);\r\n\r\n  // Log to console\r\n  if (logging.toConsole) {\r\n    console.log.apply(\r\n      undefined,\r\n      [prefix.toString()[logging.levelsDesc[newLevel - 1].color]].concat(texts)\r\n    );\r\n  }\r\n};\r\n\r\nexport const logWithStack = (level, error, customMessage) => {\r\n  // Log either custom or error's message\r\n  log(\r\n    level,\r\n    (customMessage || (error && `${error.name}: ${error.message}`))[\r\n      colors[level - 1]\r\n    ]\r\n  );\r\n  if (error) {\r\n    // If the customMessage exists, we want to display the whole stack message\r\n    /// TO DO: Correct\r\n    // const stackMessage = customMessage\r\n    //   ? error.stack\r\n    //   : error.stack.split('\\n').slice(1).join('\\n');\r\n    const stackMessage = error.stack;\r\n\r\n    // Log to console\r\n    if (logging.toConsole) {\r\n      console.log(stackMessage);\r\n    }\r\n\r\n    // Log to file\r\n    logToFile([stackMessage]);\r\n  }\r\n};\r\n\r\n/**\r\n * Sets the file logging configuration.\r\n *\r\n * @param {string} logDest - A path to log to.\r\n * @param {string} logFile - The name of the log file.\r\n */\r\nexport const enableFileLogging = (logDest, logFile) => {\r\n  // Update logging options\r\n  logging = {\r\n    ...logging,\r\n    dest: logDest || logging.dest,\r\n    file: logFile || logging.file,\r\n    toFile: true\r\n  };\r\n\r\n  if (logging.dest.length === 0) {\r\n    return log(1, '[logger] File logging init: no path supplied.');\r\n  }\r\n\r\n  if (!logging.dest.endsWith('/')) {\r\n    logging.dest += '/';\r\n  }\r\n};\r\n\r\n/**\r\n * Adds a log listener.\r\n *\r\n * @param {function} fn - The function to call when getting a log event.\r\n */\r\nexport const listen = (fn) => {\r\n  logging.listeners.push(fn);\r\n};\r\n\r\n/**\r\n * Sets the current log level. Log levels are:\r\n * - 0 = no logging\r\n * - 1 = error\r\n * - 2 = warning\r\n * - 3 = notice\r\n * - 4 = verbose\r\n *\r\n * @param {number} newLevel - The new log level (0 - 4).\r\n */\r\nexport const setLogLevel = (newLevel) => {\r\n  if (newLevel >= 0 && newLevel <= logging.levelsDesc.length) {\r\n    logging.level = newLevel;\r\n  }\r\n};\r\n\r\n/**\r\n * Enables or disables logging to the stdout.\r\n *\r\n * @param {boolean} enabled - Whether log to console or not.\r\n */\r\nexport const toggleSTDOut = (enabled) => {\r\n  logging.toConsole = enabled;\r\n};\r\n\r\nexport default {\r\n  log,\r\n  logWithStack,\r\n  enableFileLogging,\r\n  listen,\r\n  setLogLevel,\r\n  toggleSTDOut\r\n};\r\n","import { logWithStack } from '../logger.js';\r\n\r\nconst logErrorMiddleware = (error, req, res, next) => {\r\n  // Display the error with stack in a correct format\r\n  logWithStack(1, error);\r\n\r\n  // Delete the stack for the environment other than the development\r\n  if (process.env.NODE_ENV !== 'development') {\r\n    delete error.stack;\r\n  }\r\n\r\n  // Call the returnErrorMiddleware\r\n  next(error);\r\n};\r\n\r\nconst returnErrorMiddleware = (error, req, res, next) => {\r\n  // Gather all requied information for the response\r\n  const { statusCode: stCode, status, message, stack } = error;\r\n  const statusCode = stCode || status || 500;\r\n\r\n  // Set and return response\r\n  res.status(statusCode).json({ statusCode, message, stack });\r\n};\r\n\r\nexport default (app) => {\r\n  // Add log error middleware\r\n  app.use(logErrorMiddleware);\r\n\r\n  // Add set status and return error middleware\r\n  app.use(returnErrorMiddleware);\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport rateLimit from 'express-rate-limit';\r\n\r\nimport { log } from '../logger.js';\r\n\r\n/**\r\n * Enables rate limiting for a given app.\r\n *\r\n * @param {object} app - The express app.\r\n * @param {object} limitConfig - The options for the rate limiting.\r\n */\r\nexport default (app, limitConfig) => {\r\n  const msg =\r\n    'Too many requests, you have been rate limited. Please try again later.';\r\n\r\n  // Options for the rate limiter\r\n  const rateOptions = {\r\n    max: limitConfig.maxRequests || 30,\r\n    window: limitConfig.window || 1,\r\n    delay: limitConfig.delay || 0,\r\n    trustProxy: limitConfig.trustProxy || false,\r\n    skipKey: limitConfig.skipKey || false,\r\n    skipToken: limitConfig.skipToken || false\r\n  };\r\n\r\n  // Set if behind a proxy\r\n  if (rateOptions.trustProxy) {\r\n    app.enable('trust proxy');\r\n  }\r\n\r\n  // Create a limiter\r\n  const limiter = rateLimit({\r\n    windowMs: rateOptions.window * 60 * 1000,\r\n    // Limit each IP to 100 requests per windowMs\r\n    max: rateOptions.max,\r\n    // Disable delaying, full speed until the max limit is reached\r\n    delayMs: rateOptions.delay,\r\n    handler: (request, response) => {\r\n      response.format({\r\n        json: () => {\r\n          response.status(429).send({ message: msg });\r\n        },\r\n        default: () => {\r\n          response.status(429).send(msg);\r\n        }\r\n      });\r\n    },\r\n    skip: (request) => {\r\n      // Allow bypassing the limiter if a valid key/token has been sent\r\n      if (\r\n        rateOptions.skipKey !== false &&\r\n        rateOptions.skipToken !== false &&\r\n        request.query.key === rateOptions.skipKey &&\r\n        request.query.access_token === rateOptions.skipToken\r\n      ) {\r\n        log(4, '[rate limiting] Skipping rate limiter.');\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  });\r\n\r\n  // Use a limiter as a middleware\r\n  app.use(limiter);\r\n\r\n  log(\r\n    3,\r\n    `[rate-limiting] Enabled rate limiting: ${rateOptions.max} requests per ${rateOptions.window} minute per IP, trusting proxy: ${rateOptions.trustProxy}.`\r\n  );\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { join } from 'path';\r\nimport { fileURLToPath } from 'url';\r\n\r\nimport { defaultConfig } from '../lib/schemas/config.js';\r\nimport { log } from './logger.js';\r\n\r\nconst MAX_BACKOFF_ATTEMPTS = 6;\r\n\r\nexport const __dirname = fileURLToPath(new URL('../.', import.meta.url));\r\n\r\n/**\r\n * Clears text from whitespaces with a regex rule.\r\n *\r\n * @param {string} rule - The rule for clearing a string, default to /\\s\\s+/g.\r\n * @return {string} - Cleared text.\r\n */\r\nexport const clearText = (text, rule = /\\s\\s+/g, replacer = ' ') =>\r\n  text.replaceAll(rule, replacer).trim();\r\n\r\n/**\r\n * Delays calling the function by time calculated based on the backoff\r\n * algorithm.\r\n *\r\n * @param {function} fn - A function to try to call with the backoff algorithm\r\n * on.\r\n * @param {number} attempt - The number of an attempt, where the first one is 0.\r\n */\r\nexport const expBackoff = async (fn, attempt = 0, ...args) => {\r\n  try {\r\n    // Try to call the function\r\n    return await fn(...args);\r\n  } catch (error) {\r\n    // Calculate delay in ms\r\n    const delayInMs = 2 ** attempt * 1000;\r\n\r\n    // If the attempt exceeds the maximum attempts of reapeat, throw an error\r\n    if (++attempt >= MAX_BACKOFF_ATTEMPTS) {\r\n      throw error;\r\n    }\r\n\r\n    // Wait given amount of time\r\n    await new Promise((response) => setTimeout(response, delayInMs));\r\n    log(\r\n      3,\r\n      `[pool] Waited ${delayInMs}ms until next call for the resource id: ${args[0]}.`\r\n    );\r\n\r\n    // Try again\r\n    return expBackoff(fn, attempt, ...args);\r\n  }\r\n};\r\n\r\n/**\r\n * Fixes to supported type format if MIME.\r\n *\r\n * @param {string} type - Type to be corrected.\r\n * @param {string} outfile - Name of the outfile.\r\n */\r\nexport const fixType = (type, outfile) => {\r\n  // MIME types\r\n  const mimeTypes = {\r\n    'image/png': 'png',\r\n    'image/jpeg': 'jpeg',\r\n    'application/pdf': 'pdf',\r\n    'image/svg+xml': 'svg'\r\n  };\r\n\r\n  // Formats\r\n  const formats = ['png', 'jpeg', 'pdf', 'svg'];\r\n\r\n  // Check if type and outfile's extensions are the same\r\n  if (outfile) {\r\n    const outType = outfile.split('.').pop();\r\n\r\n    // Check if extension has a correct type\r\n    if (formats.includes(outType) && type !== outType) {\r\n      type = outType;\r\n    }\r\n  }\r\n\r\n  // Return a correct type\r\n  return mimeTypes[type] || formats.find((t) => t === type) || 'png';\r\n};\r\n\r\n/**\r\n * Handles the provided resources.\r\n *\r\n * @param {string} resources - The stringified resources.\r\n * @param {string} allowFileResources - Decide if resources from file are\r\n * allowed.\r\n */\r\nexport const handleResources = (resources = false, allowFileResources) => {\r\n  const allowedProps = ['js', 'css', 'files'];\r\n\r\n  let handledResources = resources;\r\n  let correctResources = false;\r\n\r\n  // Try to load resources from a file\r\n  if (allowFileResources && resources.endsWith('.json')) {\r\n    try {\r\n      if (!resources) {\r\n        handledResources = isCorrectJSON(\r\n          readFileSync('resources.json', 'utf8')\r\n        );\r\n      } else if (resources && resources.endsWith('.json')) {\r\n        handledResources = isCorrectJSON(readFileSync(resources, 'utf8'));\r\n      } else {\r\n        handledResources = isCorrectJSON(resources);\r\n        if (handledResources === true) {\r\n          handledResources = isCorrectJSON(\r\n            readFileSync('resources.json', 'utf8')\r\n          );\r\n        }\r\n      }\r\n    } catch (notice) {\r\n      return log(3, `[cli] No resources found.`);\r\n    }\r\n  } else {\r\n    // Try to get JSON\r\n    handledResources = isCorrectJSON(resources);\r\n\r\n    // Get rid of the files section\r\n    if (!allowFileResources) {\r\n      delete handledResources.files;\r\n    }\r\n  }\r\n\r\n  // Filter from unnecessary properties\r\n  for (const propName in handledResources) {\r\n    if (!allowedProps.includes(propName)) {\r\n      delete handledResources[propName];\r\n    } else if (!correctResources) {\r\n      correctResources = true;\r\n    }\r\n  }\r\n\r\n  // Check if at least one of allowed properties is present\r\n  if (!correctResources) {\r\n    return log(3, `[cli] No resources found.`);\r\n  }\r\n\r\n  // Handle files section\r\n  if (handledResources.files) {\r\n    handledResources.files = handledResources.files.map((item) => item.trim());\r\n    if (!handledResources.files || handledResources.files.length <= 0) {\r\n      delete handledResources.files;\r\n    }\r\n  }\r\n\r\n  // Return resources\r\n  return handledResources;\r\n};\r\n\r\n/**\r\n * Checks if provided data is or can be a correct JSON.\r\n *\r\n * @param {any} data - Data to be checked.\r\n * @param {boolean} toString - If true, return stringified representation.\r\n */\r\nexport function isCorrectJSON(data, toString) {\r\n  try {\r\n    // Get the string representation if not already before parsing\r\n    const parsedData = JSON.parse(\r\n      typeof data !== 'string' ? JSON.stringify(data) : data\r\n    );\r\n\r\n    // Return a stringified representation of a JSON if required\r\n    if (typeof parsedData !== 'string' && toString) {\r\n      return JSON.stringify(parsedData);\r\n    }\r\n\r\n    // Return a JSON\r\n    return parsedData;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if the item is an object.\r\n *\r\n * @param {any} item - Item to be checked.\r\n */\r\nexport const isObject = (item) =>\r\n  typeof item === 'object' && !Array.isArray(item) && item !== null;\r\n\r\n/**\r\n * Checks if the item is an empty object.\r\n *\r\n * @param {any} item - Item to be checked.\r\n */\r\nexport const isObjectEmpty = (item) =>\r\n  typeof item === 'object' && item !== null && Object.keys(item).length === 0;\r\n\r\n/**\r\n * Checks if string contains private range urls.\r\n *\r\n * @export utils\r\n * @param item {string} item to be checked\r\n */\r\nexport const isPrivateRangeUrlFound = (item) => {\r\n  return [\r\n    'localhost',\r\n    '(10).(.*).(.*).(.*)',\r\n    '(127).(.*).(.*).(.*)',\r\n    '(172).(1[6-9]|2[0-9]|3[0-1]).(.*).(.*)',\r\n    '(192).(168).(.*).(.*)'\r\n  ].some((ipRegEx) =>\r\n    item.match(`xlink:href=\"(?:(http://|https://))?${ipRegEx}`)\r\n  );\r\n};\r\n\r\n/**\r\n * Creates and returns a deep copy of the given object.\r\n *\r\n * @param {object} object - Object to copy.\r\n * @return {object} - Deep copy of the object.\r\n */\r\nexport const deepCopy = (obj) => {\r\n  if (obj === null || typeof obj !== 'object') {\r\n    return obj;\r\n  }\r\n\r\n  const copy = Array.isArray(obj) ? [] : {};\r\n\r\n  for (const key in obj) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n      copy[key] = deepCopy(obj[key]);\r\n    }\r\n  }\r\n\r\n  return copy;\r\n};\r\n\r\n/**\r\n * Stringifies object with options. Possible to preserve functions with\r\n * allowFunctions flag.\r\n *\r\n * @param {object} options - Options to stringify.\r\n * @param {boolean} allowFunctions - Flag for keeping functions.\r\n */\r\nexport const optionsStringify = (options, allowFunctions) => {\r\n  const replacerCallback = (name, value) => {\r\n    if (typeof value === 'string') {\r\n      value = value.trim();\r\n\r\n      // If allowFunctions is set to true, preserve functions\r\n      if (\r\n        (value.startsWith('function(') || value.startsWith('function (')) &&\r\n        value.endsWith('}')\r\n      ) {\r\n        value = allowFunctions\r\n          ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\r\n          : undefined;\r\n      }\r\n    }\r\n\r\n    return typeof value === 'function'\r\n      ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\r\n      : value;\r\n  };\r\n\r\n  // Stringify options and if required, replace special functions marks\r\n  return JSON.stringify(options, replacerCallback).replaceAll(\r\n    /\"EXP_FUN|EXP_FUN\"/g,\r\n    ''\r\n  );\r\n};\r\n\r\n/**\r\n * Prints the export server logo.\r\n *\r\n * @param {boolean} noLogo - Whether to display logo or text.\r\n */\r\nexport const printLogo = (noLogo) => {\r\n  // Get package version either from env or from package.json\r\n  const packageVersion = JSON.parse(\r\n    readFileSync(join(__dirname, 'package.json'))\r\n  ).version;\r\n\r\n  // Print text only\r\n  if (noLogo) {\r\n    console.log(`Starting highcharts export server v${packageVersion}...`);\r\n    return;\r\n  }\r\n\r\n  // Print the logo\r\n  console.log(\r\n    readFileSync(__dirname + '/msg/startup.msg').toString().bold.yellow,\r\n    `v${packageVersion}`\r\n  );\r\n};\r\n\r\n/**\r\n * Prints the CLI usage. If required, it can list properties recursively\r\n */\r\nexport function printUsage() {\r\n  const pad = 48;\r\n  const readme = 'https://github.com/highcharts/node-export-server#readme';\r\n\r\n  // Display readme information\r\n  console.log(\r\n    'Usage of CLI arguments:'.bold,\r\n    '\\n------',\r\n    `\\nFor more detailed information visit readme at: ${readme.bold.yellow}.`\r\n  );\r\n\r\n  const cycleCategories = (options) => {\r\n    for (const [name, option] of Object.entries(options)) {\r\n      // If category has more levels, go further\r\n      if (!Object.prototype.hasOwnProperty.call(option, 'value')) {\r\n        cycleCategories(option);\r\n      } else {\r\n        let descName = `  --${option.cliName || name} ${\r\n          ('<' + option.type + '>').green\r\n        } `;\r\n        if (descName.length < pad) {\r\n          for (let i = descName.length; i < pad; i++) {\r\n            descName += '.';\r\n          }\r\n        }\r\n\r\n        // Display correctly aligned messages\r\n        console.log(\r\n          descName,\r\n          option.description,\r\n          `[Default: ${option.value.toString().bold}]`.blue\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  // Cycle through options of each categories and display the usage info\r\n  Object.keys(defaultConfig).forEach((category) => {\r\n    // Only puppeteer and highcharts categories cannot be configured through CLI\r\n    if (!['puppeteer', 'highcharts'].includes(category)) {\r\n      console.log(`\\n${category.toUpperCase()}`.red);\r\n      cycleCategories(defaultConfig[category]);\r\n    }\r\n  });\r\n  console.log('\\n');\r\n}\r\n\r\n/**\r\n * Rounds number to passed precision.\r\n *\r\n * @param {number} value - Number to round.\r\n * @param {number} precision - A precision of rounding.\r\n */\r\nexport const roundNumber = (value, precision = 1) => {\r\n  const multiplier = Math.pow(10, precision || 0);\r\n  return Math.round(+value * multiplier) / multiplier;\r\n};\r\n\r\n/**\r\n * Casts the item to boolean.\r\n *\r\n * @param {any} item - Item to be cast.\r\n */\r\nexport const toBoolean = (item) =>\r\n  ['false', 'undefined', 'null', 'NaN', '0', ''].includes(item)\r\n    ? false\r\n    : !!item;\r\n\r\n/**\r\n * If necessary, places a custom code inside a function.\r\n *\r\n * @param {any} customCode - The customCode.\r\n */\r\nexport const wrapAround = (customCode, allowFileResources) => {\r\n  if (customCode && typeof customCode === 'string') {\r\n    customCode = customCode.trim();\r\n\r\n    if (customCode.endsWith('.js')) {\r\n      return allowFileResources\r\n        ? wrapAround(readFileSync(customCode, 'utf8'))\r\n        : false;\r\n    } else if (\r\n      customCode.startsWith('function()') ||\r\n      customCode.startsWith('function ()') ||\r\n      customCode.startsWith('()=>') ||\r\n      customCode.startsWith('() =>')\r\n    ) {\r\n      return `(${customCode})()`;\r\n    }\r\n    return customCode.replace(/;$/, '');\r\n  }\r\n};\r\n\r\n/**\r\n * Utility to measure time.\r\n */\r\nexport const measureTime = () => {\r\n  const start = process.hrtime.bigint();\r\n  return () => Number(process.hrtime.bigint() - start) / 1000000;\r\n};\r\n\r\nexport default {\r\n  __dirname,\r\n  clearText,\r\n  expBackoff,\r\n  fixType,\r\n  handleResources,\r\n  isCorrectJSON,\r\n  isObject,\r\n  isObjectEmpty,\r\n  isPrivateRangeUrlFound,\r\n  optionsStringify,\r\n  printLogo,\r\n  printUsage,\r\n  roundNumber,\r\n  toBoolean,\r\n  wrapAround,\r\n  measureTime\r\n};\r\n","/**\r\n * This module exports two functions: fetch (for GET requests) and post (for POST requests).\r\n */\r\n\r\nimport http from 'http';\r\nimport https from 'https';\r\n\r\n/**\r\n * Determines the protocol of the given URL (either `http` or `https`).\r\n *\r\n * @function\r\n * @param {string} url - The URL whose protocol needs to be determined.\r\n * @returns {Object} Returns the `https` module if the URL starts with 'https',\r\n * otherwise returns the `http` module.\r\n * @private\r\n *\r\n * @example\r\n *\r\n * const protocol = getProtocol('https://example.com');\r\n * console.log(protocol); // Outputs the 'https' module\r\n */\r\nconst getProtocol = (url) => {\r\n  return url.startsWith('https') ? https : http;\r\n};\r\n\r\n/**\r\n * Sends a GET request to the specified URL with optional request options.\r\n *\r\n * @function\r\n * @async\r\n * @param {string} url - The URL to fetch.\r\n * @param {Object} [requestOptions={}] - Optional request options and headers.\r\n * @returns {Promise<Object>} Returns a promise that resolves with the response object.\r\n * The response object contains a `.text` property with the raw response data.\r\n * @throws {Error} Throws an error if the request fails or if no data is fetched from the URL.\r\n *\r\n * @example\r\n *\r\n * async function getData() {\r\n *   try {\r\n *     const response = await fetch('https://api.example.com/data');\r\n *     console.log(response.text);\r\n *   } catch (error) {\r\n *     console.error('Error fetching data:', error);\r\n *   }\r\n * }\r\n *\r\n * getData();\r\n */\r\nasync function fetch(url, requestOptions = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const protocol = getProtocol(url);\r\n\r\n    protocol\r\n      .get(url, requestOptions, (res) => {\r\n        let data = '';\r\n\r\n        // A chunk of data has been received.\r\n        res.on('data', (chunk) => {\r\n          data += chunk;\r\n        });\r\n\r\n        // The whole response has been received.\r\n        res.on('end', () => {\r\n          if (!data) {\r\n            reject('Nothing was fetched from the URL.');\r\n          }\r\n\r\n          res.text = data;\r\n          resolve(res);\r\n        });\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\n/**\r\n * Sends a POST request to the specified URL with the given body and request options.\r\n *\r\n * @function\r\n * @async\r\n * @param {string} url - The URL to which the request should be sent.\r\n * @param {Object} [body={}] - The data to be sent as the request body, in JSON format.\r\n * @param {Object} [requestOptions={}] - Optional request options and headers.\r\n * @returns {Promise<Object>} - Returns a promise that resolves with the parsed JSON response.\r\n * @throws {Error} Throws an error if the request fails or if the response cannot be parsed.\r\n *\r\n * @example\r\n *\r\n * async function sendData() {\r\n *   const dataToSend = {\r\n *     key1: 'value1',\r\n *     key2: 'value2',\r\n *   };\r\n *   try {\r\n *     const response = await post('https://api.example.com/data', dataToSend);\r\n *     console.log(response);\r\n *   } catch (error) {\r\n *     console.error('Error sending data:', error);\r\n *   }\r\n * }\r\n *\r\n * sendData();\r\n */\r\nasync function post(url, body = {}, requestOptions = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const protocol = getProtocol(url);\r\n    const data = JSON.stringify(body);\r\n\r\n    // Set default headers and merge with requestOptions\r\n    const options = Object.assign(\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Content-Length': data.length\r\n        }\r\n      },\r\n      requestOptions\r\n    );\r\n\r\n    const req = protocol\r\n      .request(url, options, (res) => {\r\n        let responseData = '';\r\n\r\n        // A chunk of data has been received.\r\n        res.on('data', (chunk) => {\r\n          responseData += chunk;\r\n        });\r\n\r\n        // The whole response has been received.\r\n        res.on('end', () => {\r\n          try {\r\n            res.text = responseData;\r\n            resolve(res);\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        });\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error);\r\n      });\r\n\r\n    // Write the request body and end the request.\r\n    req.write(data);\r\n    req.end();\r\n  });\r\n}\r\n\r\nexport default fetch;\r\nexport { fetch, post };\r\n","class ExportError extends Error {\r\n  constructor(message) {\r\n    super();\r\n    this.message = message;\r\n  }\r\n\r\n  setError(error) {\r\n    this.error = error;\r\n    this.name = error.name;\r\n    if (error.stack) {\r\n      this.stack = error.stack;\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default ExportError;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// The cache manager manages the Highcharts library and its dependencies.\r\n// The cache itself is stored in .cache, and is checked by the config system\r\n// before starting the service\r\n\r\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';\r\nimport { join } from 'path';\r\n\r\nimport dotenv from 'dotenv';\r\nimport HttpsProxyAgent from 'https-proxy-agent';\r\n\r\nimport { fetch } from './fetch.js';\r\nimport { log } from './logger.js';\r\nimport { __dirname } from '../lib/utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\ndotenv.config();\r\n\r\nconst cachePath = join(__dirname, '.cache');\r\n\r\nconst cache = {\r\n  cdnURL: 'https://code.highcharts.com/',\r\n  activeManifest: {},\r\n  sources: '',\r\n  hcVersion: ''\r\n};\r\n\r\n// TODO: The config should be accesssible globally so we don't have to do this sort of thing..\r\nlet appliedConfig = false;\r\n\r\n/**\r\n * Extracts the Highcharts version from the cache\r\n */\r\nconst extractVersion = () =>\r\n  (cache.hcVersion = cache.sources\r\n    .substr(0, cache.sources.indexOf('*/'))\r\n    .replace('/*', '')\r\n    .replace('*/', '')\r\n    .replace(/\\n/g, '')\r\n    .trim());\r\n\r\n/**\r\n * Saves the Highcharts part of a config to a manifest file in the cache\r\n *\r\n * @param {object} config - Highcharts related configuration object.\r\n * @param {object} fetchedModules - An object that contains mapped names of\r\n * fetched Highcharts modules to use.\r\n */\r\nconst saveConfigToManifest = async (config, fetchedModules) => {\r\n  const newManifest = {\r\n    version: config.version,\r\n    modules: fetchedModules || {}\r\n  };\r\n\r\n  // Update cache object with the current modules\r\n  cache.activeManifest = newManifest;\r\n\r\n  log(4, '[cache] Writing a new manifest.');\r\n  try {\r\n    writeFileSync(\r\n      join(cachePath, 'manifest.json'),\r\n      JSON.stringify(newManifest),\r\n      'utf8'\r\n    );\r\n  } catch (error) {\r\n    throw new ExportError('[cache] Error writing cache manifest.').setError(\r\n      error\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches a single script.\r\n *\r\n * @param {string} script - A path to script to get.\r\n * @param {object} proxyAgent - The proxy agent to use for a request.\r\n */\r\nconst fetchScript = async (script, proxyAgent) => {\r\n  try {\r\n    // Get rid of the .js from the custom strings\r\n    if (script.endsWith('.js')) {\r\n      script = script.substring(0, script.length - 3);\r\n    }\r\n\r\n    log(4, `[cache] Fetching script - ${script}.js`);\r\n\r\n    // If exists, add proxy agent to request options\r\n    const requestOptions = proxyAgent\r\n      ? {\r\n          agent: proxyAgent,\r\n          timeout: +process.env['PROXY_SERVER_TIMEOUT'] || 5000\r\n        }\r\n      : {};\r\n\r\n    // Fetch the script\r\n    const response = await fetch(`${script}.js`, requestOptions);\r\n\r\n    // If OK, return its text representation\r\n    if (response.statusCode === 200) {\r\n      return response.text;\r\n    }\r\n\r\n    throw `${response.statusCode}`;\r\n  } catch (error) {\r\n    log(1, `[cache] Error fetching script ${script}.js: ${error}.`);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Updates the Highcharts cache.\r\n *\r\n * @param {object} config - Highcharts related configuration object.\r\n * @param {string} sourcePath - A path to the file where save updated sources.\r\n * @return {object} An object that contains mapped names of fetched Highcharts\r\n * modules to use.\r\n */\r\nconst updateCache = async (config, sourcePath) => {\r\n  const { coreScripts, modules, indicators, scripts: customScripts } = config;\r\n  const hcVersion =\r\n    config.version === 'latest' || !config.version ? '' : `${config.version}/`;\r\n\r\n  log(3, `[cache] Updating cache to Highcharts ${hcVersion}.`);\r\n\r\n  // Gather all scripts to fetch\r\n  const allScripts = [\r\n    ...coreScripts.map((c) => `${hcVersion}${c}`),\r\n    ...modules.map((m) =>\r\n      m === 'map' ? `maps/${hcVersion}modules/${m}` : `${hcVersion}modules/${m}`\r\n    ),\r\n    ...indicators.map((i) => `stock/${hcVersion}indicators/${i}`)\r\n  ];\r\n\r\n  // Configure proxy if exists\r\n  let proxyAgent;\r\n  const proxyHost = process.env['PROXY_SERVER_HOST'];\r\n  const proxyPort = process.env['PROXY_SERVER_PORT'];\r\n\r\n  // Try to create a Proxy Agent\r\n  if (proxyHost && proxyPort) {\r\n    try {\r\n      proxyAgent = new HttpsProxyAgent({\r\n        host: proxyHost,\r\n        port: +proxyPort\r\n      });\r\n    } catch (error) {\r\n      throw new ExportError('[cache] Could not create a Proxy Agent.').setError(\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  const fetchedModules = {};\r\n  try {\r\n    cache.sources = // TODO: convert to for loop\r\n      (\r\n        await Promise.all([\r\n          ...allScripts.map(async (script) => {\r\n            const text = await fetchScript(\r\n              `${config.cdnURL || cache.cdnURL}${script}`,\r\n              proxyAgent\r\n            );\r\n\r\n            // If fetched correctly, set it\r\n            if (typeof text === 'string') {\r\n              fetchedModules[\r\n                script.replace(\r\n                  /(.*)\\/|(.*)modules\\/|stock\\/(.*)indicators\\/|maps\\/(.*)modules\\//gi,\r\n                  ''\r\n                )\r\n              ] = 1;\r\n            }\r\n\r\n            return text;\r\n          }),\r\n          ...customScripts.map((script) => fetchScript(script, proxyAgent))\r\n        ])\r\n      ).join(';\\n');\r\n    extractVersion();\r\n\r\n    // Save the fetched modules into caches' source JSON\r\n    writeFileSync(sourcePath, cache.sources);\r\n    return fetchedModules;\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[cache] Unable to update local Highcharts cache.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\nexport const updateVersion = async (newVersion) =>\r\n  appliedConfig\r\n    ? await checkCache(\r\n        Object.assign(appliedConfig, {\r\n          version: newVersion\r\n        })\r\n      )\r\n    : false;\r\n\r\n/**\r\n * Fetches any missing Highcharts and dependencies\r\n *\r\n * @param {object} config - Highcharts related configuration object.\r\n */\r\nexport const checkCache = async (config) => {\r\n  let fetchedModules;\r\n  // Prepare paths to manifest and sources from the .cache folder\r\n  const manifestPath = join(cachePath, 'manifest.json');\r\n  const sourcePath = join(cachePath, 'sources.js');\r\n\r\n  // TODO: deal with trying to switch to the running version\r\n  // const activeVersion = appliedConfig ? appliedConfig.version : false;\r\n\r\n  appliedConfig = config;\r\n\r\n  // Create the .cache destination if it doesn't exist already\r\n  !existsSync(cachePath) && mkdirSync(cachePath);\r\n\r\n  // Fetch all the scripts either if manifest.json does not exist\r\n  // or if the forceFetch option is enabled\r\n  if (!existsSync(manifestPath) || config.forceFetch) {\r\n    log(3, '[cache] Fetching and caching Highcharts dependencies.');\r\n    fetchedModules = await updateCache(config, sourcePath);\r\n  } else {\r\n    let requestUpdate = false;\r\n\r\n    // Read the manifest JSON\r\n    const manifest = JSON.parse(readFileSync(manifestPath));\r\n\r\n    // Check if the modules is an array, if so, we rewrite it to a map to make\r\n    // it easier to resolve modules.\r\n    if (manifest.modules && Array.isArray(manifest.modules)) {\r\n      const moduleMap = {};\r\n      manifest.modules.forEach((m) => (moduleMap[m] = 1));\r\n      manifest.modules = moduleMap;\r\n    }\r\n\r\n    const { modules, coreScripts, indicators } = config;\r\n    const numberOfModules =\r\n      modules.length + coreScripts.length + indicators.length;\r\n\r\n    // Compare the loaded config with the contents in .cache.\r\n    // If there are changes, fetch requested modules and products,\r\n    // and bake them into a giant blob. Save the blob.\r\n    if (manifest.version !== config.version) {\r\n      log(2, '[cache] Highcharts version mismatch in cache, need to re-fetch.');\r\n      requestUpdate = true;\r\n    } else if (Object.keys(manifest.modules || {}).length !== numberOfModules) {\r\n      log(\r\n        2,\r\n        '[cache] Cache and requested modules do not match, need to re-fetch.'\r\n      );\r\n      requestUpdate = true;\r\n    } else {\r\n      // Check each module, if anything is missing refetch everything\r\n      requestUpdate = (config.modules || []).some((moduleName) => {\r\n        if (!manifest.modules[moduleName]) {\r\n          log(\r\n            2,\r\n            `[cache] The ${moduleName} missing in cache, need to re-fetch.`\r\n          );\r\n          return true;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (requestUpdate) {\r\n      fetchedModules = await updateCache(config, sourcePath);\r\n    } else {\r\n      log(3, '[cache] Dependency cache is up to date, proceeding.');\r\n\r\n      // Load the sources\r\n      cache.sources = readFileSync(sourcePath, 'utf8');\r\n\r\n      // Get current modules map\r\n      fetchedModules = manifest.modules;\r\n      extractVersion();\r\n    }\r\n  }\r\n\r\n  // Finally, save the new manifest, which is basically our current config\r\n  // in a slightly different format\r\n  await saveConfigToManifest(config, fetchedModules);\r\n};\r\n\r\nexport default {\r\n  checkCache,\r\n  updateVersion,\r\n  getCache: () => cache,\r\n  highcharts: () => cache.sources,\r\n  version: () => cache.hcVersion\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport puppeteer from 'puppeteer';\r\nimport fs from 'fs';\r\nimport * as url from 'url';\r\nimport path from 'node:path';\r\n\r\n// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1463328\r\n// Not ideal - leaves trash in the FS\r\nimport { randomBytes } from 'node:crypto';\r\n\r\nimport { log, logWithStack } from './logger.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nconst RANDOM_PID = randomBytes(64).toString('base64url');\r\nconst PUPPETEER_DIR = path.join('tmp', `puppeteer-${RANDOM_PID}`);\r\nconst DATA_DIR = path.join(PUPPETEER_DIR, 'profile');\r\n\r\n// The minimal args to speed up the browser\r\nconst minimalArgs = [\r\n  `--user-data-dir=${DATA_DIR}`,\r\n  '--autoplay-policy=user-gesture-required',\r\n  '--disable-background-networking',\r\n  '--disable-background-timer-throttling',\r\n  '--disable-backgrounding-occluded-windows',\r\n  '--disable-breakpad',\r\n  '--disable-client-side-phishing-detection',\r\n  '--disable-component-update',\r\n  '--disable-default-apps',\r\n  '--disable-dev-shm-usage',\r\n  '--disable-domain-reliability',\r\n  '--disable-extensions',\r\n  '--disable-features=AudioServiceOutOfProcess',\r\n  '--disable-hang-monitor',\r\n  '--disable-ipc-flooding-protection',\r\n  '--disable-notifications',\r\n  '--disable-offer-store-unmasked-wallet-cards',\r\n  '--disable-popup-blocking',\r\n  '--disable-print-preview',\r\n  '--disable-prompt-on-repost',\r\n  '--disable-renderer-backgrounding',\r\n  '--disable-session-crashed-bubble',\r\n  '--disable-setuid-sandbox',\r\n  '--disable-speech-api',\r\n  '--disable-sync',\r\n  '--hide-crash-restore-bubble',\r\n  '--hide-scrollbars',\r\n  '--ignore-gpu-blacklist',\r\n  '--metrics-recording-only',\r\n  '--mute-audio',\r\n  '--no-default-browser-check',\r\n  '--no-first-run',\r\n  '--no-pings',\r\n  '--no-sandbox',\r\n  '--no-zygote',\r\n  '--password-store=basic',\r\n  '--use-mock-keychain'\r\n];\r\n\r\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\r\n\r\nconst template = fs.readFileSync(\r\n  __dirname + '/../templates/template.html',\r\n  'utf8'\r\n);\r\n\r\nlet browser;\r\n\r\nconst setPageContent = async (page) => {\r\n  await page.setContent(template);\r\n  await page.addScriptTag({ path: __dirname + '/../.cache/sources.js' });\r\n  // eslint-disable-next-line no-undef\r\n  await page.evaluate(() => window.setupHighcharts());\r\n\r\n  page.on('pageerror', async (err) => {\r\n    // TODO: Consider adding a switch here that turns on log(0) logging\r\n    // on page errors.\r\n    // log(0, '[page error]', err);\r\n    await page.$eval(\r\n      '#container',\r\n      (element, errorMessage) => {\r\n        // eslint-disable-next-line no-undef\r\n        if (window._displayErrors) {\r\n          element.innerHTML = errorMessage;\r\n        }\r\n      },\r\n      `<h1>Chart input data error</h1>${err.toString()}`\r\n    );\r\n  });\r\n};\r\n\r\nexport const newPage = async () => {\r\n  if (!browser) return false;\r\n\r\n  const page = await browser.newPage();\r\n\r\n  // Disable cache\r\n  await page.setCacheEnabled(false);\r\n\r\n  // Set the content\r\n  await setPageContent(page);\r\n  return page;\r\n};\r\n\r\nexport const clearPage = async (page, hardReset = false) => {\r\n  try {\r\n    if (hardReset) {\r\n      // Navigate to about:blank\r\n      await page.goto('about:blank');\r\n\r\n      // Set the content and and scripts again\r\n      await setPageContent(page);\r\n    } else {\r\n      // Clear body content\r\n      await page.$eval(\r\n        'body',\r\n        (body) =>\r\n          (body.innerHTML =\r\n            '<div id=\"chart-container\"><div id=\"container\"></div></div>')\r\n      );\r\n    }\r\n  } catch (error) {\r\n    logWithStack(2, error, '[browser] Could not clear the page content.');\r\n  }\r\n};\r\n\r\nexport const create = async (puppeteerArgs) => {\r\n  const allArgs = [...minimalArgs, ...(puppeteerArgs || [])];\r\n\r\n  // Create a browser\r\n  if (!browser) {\r\n    let tryCount = 0;\r\n\r\n    const open = async () => {\r\n      try {\r\n        log(\r\n          3,\r\n          `[browser] Attempting to get a browser instance (try ${tryCount}).`\r\n        );\r\n        browser = await puppeteer.launch({\r\n          headless: 'new',\r\n          args: allArgs,\r\n          userDataDir: './tmp/'\r\n        });\r\n      } catch (error) {\r\n        logWithStack(\r\n          1,\r\n          error,\r\n          '[browser] Could not launch a browser instance.'\r\n        );\r\n\r\n        // Retry to launch browser until reaching max attempts\r\n        if (++tryCount < 25) {\r\n          log(3, `[browser] Retry to open a browser (${tryCount} out of 25).`);\r\n          await new Promise((response) => setTimeout(response, 4000));\r\n          await open();\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      await open();\r\n    } catch (error) {\r\n      throw new ExportError(\r\n        '[browser] Max retries to open a browser instance reached.'\r\n      ).setError(error);\r\n    }\r\n\r\n    if (!browser) {\r\n      throw new ExportError('[browser] Cannot find a browser to open.');\r\n    }\r\n  }\r\n\r\n  // Return a browser promise\r\n  return browser;\r\n};\r\n\r\nexport const get = async () => {\r\n  if (!browser) {\r\n    throw new ExportError('[browser] No valid browser has been created.');\r\n  }\r\n\r\n  return browser;\r\n};\r\n\r\nexport const close = async () => {\r\n  // Close the browser when connnected\r\n  if (browser.connected) {\r\n    await browser.close();\r\n  }\r\n};\r\n\r\nexport default {\r\n  newPage,\r\n  clearPage,\r\n  get,\r\n  close\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// TODO: remove this temp benchmark stuff. I had this idea of doing a general benchmarking\r\n// system, but it adds so much bloat in the code that it shouldn't be there.\r\n\r\nimport { readFileSync } from 'fs';\r\nimport path from 'path';\r\nimport * as url from 'url';\r\n\r\nimport benchmark from './benchmark.js';\r\nimport cache from './cache.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport svgTemplate from './../templates/svg_export/svg_export.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nconst __basedir = url.fileURLToPath(new URL('.', import.meta.url));\r\n\r\n/**\r\n * Gets the clip region for the chart DOM node.\r\n *\r\n * @param {object} page - A page of a browser instance.\r\n * @return {object} - A clipped region.\r\n */\r\nconst getClipRegion = (page) =>\r\n  page.$eval('#chart-container', (element) => {\r\n    const { x, y, width, height } = element.getBoundingClientRect();\r\n    return {\r\n      x,\r\n      y,\r\n      width,\r\n      height: Math.trunc(height > 1 ? height : 500)\r\n    };\r\n  });\r\n\r\n/**\r\n * Rasterizes the page to an image (PNG or JPEG)\r\n *\r\n * @param {object} page - A page of a browser instance.\r\n * @param {string} type - The type of a result image.\r\n * @param {string} encoding - The type of encoding used.\r\n * @param {string} clip - The clip region.\r\n * @param {number} rasterizationTimeout - The rasterization timeout\r\n * in milliseconds.\r\n * @returns {string} - A string representation of a screenshot.\r\n */\r\nconst createImage = (page, type, encoding, clip, rasterizationTimeout) =>\r\n  Promise.race([\r\n    page.screenshot({\r\n      type,\r\n      encoding,\r\n      clip,\r\n\r\n      // #447, #463 - always render on a transparent page if the expected type\r\n      // format is PNG\r\n      omitBackground: type == 'png'\r\n    }),\r\n    new Promise((_resolve, reject) =>\r\n      setTimeout(\r\n        () => reject(new Error('Rasterization timeout')),\r\n        rasterizationTimeout || 1500\r\n      )\r\n    )\r\n  ]);\r\n\r\n/**\r\n * Turns page into a PDF.\r\n *\r\n * @param {object} page - A page of a browser instance.\r\n * @param {number} height - The height of a chart.\r\n * @param {number} width - The width of a chart.\r\n * @param {string} encoding - The type of encoding used.\r\n * @return {object} - A buffer with PDF representation.\r\n */\r\nconst createPDF = (page, height, width, encoding) =>\r\n  page.pdf({\r\n    // This will remove an extra empty page in PDF exports\r\n    height: height + 1,\r\n    width,\r\n    encoding\r\n  });\r\n\r\n/**\r\n * Exports as a SVG.\r\n *\r\n * @param {object} page - A page of a browser instance.\r\n * @return {object} - The outerHTML element with the SVG representation.\r\n */\r\nconst createSVG = (page) =>\r\n  page.$eval('#container svg:first-of-type', (element) => element.outerHTML);\r\n\r\n/** Load config into a page and render a chart\r\n *\r\n * @param {object} page - A page of a browser instance.\r\n * @param {object} chart - Chart's options.\r\n * @param {object} options - All options object.\r\n */\r\nconst setAsConfig = (page, chart, options) =>\r\n  page.evaluate(\r\n    // eslint-disable-next-line no-undef\r\n    (chart, options) => window.triggerExport(chart, options),\r\n    chart,\r\n    options\r\n  );\r\n\r\n/**\r\n * Does an export for a given browser.\r\n *\r\n * @param {object} browser - A browser instance.\r\n * @param {object} chart - Chart's options.\r\n * @param {object} options - All options object.\r\n * @return {object} - The data returned from one of the methods for exporting\r\n * a specific type of an image.\r\n */\r\nexport default async (page, chart, options) => {\r\n  /**\r\n   * Keeps track of all resources added on the page with addXXXTag. etc\r\n   * It's VITAL that all added resources ends up here so we can clear things\r\n   * out when doing a new export in the same page!\r\n   */\r\n  const injectedResources = [];\r\n\r\n  /** Clear out all state set on the page with addScriptTag/addStyleTag. */\r\n  const clearInjected = async (page) => {\r\n    for (const res of injectedResources) {\r\n      await res.dispose();\r\n    }\r\n\r\n    // Reset all CSS and script tags\r\n    await page.evaluate(() => {\r\n      // eslint-disable-next-line no-undef\r\n      const [, ...scriptsToRemove] = document.getElementsByTagName('script');\r\n      // eslint-disable-next-line no-undef\r\n      const [, ...stylesToRemove] = document.getElementsByTagName('style');\r\n      // eslint-disable-next-line no-undef\r\n      const [...linksToRemove] = document.getElementsByTagName('link');\r\n\r\n      // Remove tags\r\n      for (const element of [\r\n        ...scriptsToRemove,\r\n        ...stylesToRemove,\r\n        ...linksToRemove\r\n      ]) {\r\n        element.remove();\r\n      }\r\n    });\r\n  };\r\n\r\n  try {\r\n    const exportBench = benchmark('Puppeteer');\r\n\r\n    log(4, '[export] Determining export path.');\r\n\r\n    const exportOptions = options.export;\r\n\r\n    // Force a rAF\r\n    // See https://github.com/puppeteer/puppeteer/issues/7507\r\n    // eslint-disable-next-line no-undef\r\n    await page.evaluate(() => requestAnimationFrame(() => {}));\r\n\r\n    // Decide whether display error or debbuger wrapper around it\r\n    const displayErrors =\r\n      exportOptions?.options?.chart?.displayErrors &&\r\n      cache.getCache().activeManifest.modules.debugger;\r\n\r\n    // eslint-disable-next-line no-undef\r\n    await page.evaluate((d) => (window._displayErrors = d), displayErrors);\r\n\r\n    const svgBench = benchmark('SVG handling');\r\n\r\n    let isSVG;\r\n    if (\r\n      chart.indexOf &&\r\n      (chart.indexOf('<svg') >= 0 || chart.indexOf('<?xml') >= 0)\r\n    ) {\r\n      // SVG input handling\r\n      log(4, '[export] Treating as SVG.');\r\n\r\n      // If input is also SVG, just return it\r\n      if (exportOptions.type === 'svg') {\r\n        return chart;\r\n      }\r\n\r\n      isSVG = true;\r\n      const setPageBench = benchmark('Setting content');\r\n      await page.setContent(svgTemplate(chart));\r\n      setPageBench();\r\n    } else {\r\n      // JSON config handling\r\n      log(4, '[export] Treating as config.');\r\n\r\n      // Need to perform straight inject\r\n      if (exportOptions.strInj) {\r\n        // Injection based configuration export\r\n        const setPageBench = benchmark('Setting page content (inject)');\r\n        await setAsConfig(\r\n          page,\r\n          {\r\n            chart: {\r\n              height: exportOptions.height,\r\n              width: exportOptions.width\r\n            }\r\n          },\r\n          options\r\n        );\r\n        setPageBench();\r\n      } else {\r\n        // Basic configuration export\r\n        chart.chart.height = exportOptions.height;\r\n        chart.chart.width = exportOptions.width;\r\n\r\n        const setContentBench = benchmark('Setting page content (config)');\r\n        await setAsConfig(page, chart, options);\r\n        setContentBench();\r\n      }\r\n    }\r\n\r\n    svgBench();\r\n    const resBench = benchmark('Applying resources');\r\n\r\n    // Use resources\r\n    const resources = options.customCode.resources;\r\n    if (resources) {\r\n      // Load custom JS code\r\n      if (resources.js) {\r\n        injectedResources.push(\r\n          await page.addScriptTag({\r\n            content: resources.js\r\n          })\r\n        );\r\n      }\r\n\r\n      // Load scripts from all custom files\r\n      if (resources.files) {\r\n        for (const file of resources.files) {\r\n          try {\r\n            const isLocal = !file.startsWith('http') ? true : false;\r\n\r\n            // Add each custom script from resources' files\r\n            injectedResources.push(\r\n              await page.addScriptTag(\r\n                isLocal\r\n                  ? {\r\n                      content: readFileSync(file, 'utf8')\r\n                    }\r\n                  : {\r\n                      url: file\r\n                    }\r\n              )\r\n            );\r\n          } catch (error) {\r\n            logWithStack(2, error, '[export] JS file cannot be loaded.');\r\n          }\r\n        }\r\n      }\r\n\r\n      const cssBench = benchmark('Loading css');\r\n\r\n      // Load CSS\r\n      if (resources.css) {\r\n        let cssImports = resources.css.match(/@import\\s*([^;]*);/g);\r\n        if (cssImports) {\r\n          // Handle css section\r\n          for (let cssImportPath of cssImports) {\r\n            if (cssImportPath) {\r\n              cssImportPath = cssImportPath\r\n                .replace('url(', '')\r\n                .replace('@import', '')\r\n                .replace(/\"/g, '')\r\n                .replace(/'/g, '')\r\n                .replace(/;/, '')\r\n                .replace(/\\)/g, '')\r\n                .trim();\r\n\r\n              // Add each custom css from resources\r\n              if (cssImportPath.startsWith('http')) {\r\n                injectedResources.push(\r\n                  await page.addStyleTag({\r\n                    url: cssImportPath\r\n                  })\r\n                );\r\n              } else if (options.customCode.allowFileResources) {\r\n                injectedResources.push(\r\n                  await page.addStyleTag({\r\n                    path: path.join(__basedir, cssImportPath)\r\n                  })\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // The rest of the CSS section will be content by now\r\n        injectedResources.push(\r\n          await page.addStyleTag({\r\n            content: resources.css.replace(/@import\\s*([^;]*);/g, '') || ' '\r\n          })\r\n        );\r\n      }\r\n\r\n      cssBench();\r\n    }\r\n\r\n    resBench();\r\n\r\n    // Get the real chart size\r\n    const size = isSVG\r\n      ? await page.$eval(\r\n          '#chart-container svg:first-of-type',\r\n          (element, scale) => ({\r\n            chartHeight: element.height.baseVal.value * scale,\r\n            chartWidth: element.width.baseVal.value * scale\r\n          }),\r\n          parseFloat(exportOptions.scale)\r\n        )\r\n      : await page.evaluate(() => {\r\n          // eslint-disable-next-line no-undef\r\n          const { chartHeight, chartWidth } = window.Highcharts.charts[0];\r\n          return {\r\n            chartHeight,\r\n            chartWidth\r\n          };\r\n        });\r\n\r\n    const vpBench = benchmark('Setting viewport');\r\n\r\n    // Set final height and width for viewport\r\n    const viewportHeight = Math.ceil(size?.chartHeight || exportOptions.height);\r\n    const viewportWidth = Math.ceil(size?.chartWidth || exportOptions.width);\r\n\r\n    // Set the viewport for the first time\r\n    // NOTE: the call to setViewport is expensive - can we get away with only\r\n    // calling it once, e.g. moving this one into the isSVG condition below?\r\n    await page.setViewport({\r\n      height: viewportHeight,\r\n      width: viewportWidth,\r\n      deviceScaleFactor: isSVG ? 1 : parseFloat(exportOptions.scale)\r\n    });\r\n\r\n    // Prepare a zoom callback for the next evaluate call\r\n    const zoomCallback = isSVG\r\n      ? // In case of SVG the zoom must be set directly for body\r\n        (scale) => {\r\n          // Set the zoom as scale\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.zoom = scale;\r\n\r\n          // Set the margin to 0px\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.margin = '0px';\r\n        }\r\n      : // No need for such scale manipulation in case of other types of exports\r\n        () => {\r\n          // Reset the zoom for other exports than to SVGs\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.zoom = 1;\r\n        };\r\n\r\n    // Set the zoom accordingly\r\n    await page.evaluate(zoomCallback, parseFloat(exportOptions.scale));\r\n\r\n    // Get the clip region for the page\r\n    const { height, width, x, y } = await getClipRegion(page);\r\n\r\n    if (!isSVG) {\r\n      // Set the final viewport now that we have the real height\r\n      await page.setViewport({\r\n        width: Math.round(width),\r\n        height: Math.round(height),\r\n        deviceScaleFactor: parseFloat(exportOptions.scale)\r\n      });\r\n    }\r\n\r\n    vpBench();\r\n\r\n    let data;\r\n\r\n    const expBenchmark = benchmark('Rasterizing chart');\r\n\r\n    // RASTERIZATION\r\n    if (exportOptions.type === 'svg') {\r\n      // SVG\r\n      data = await createSVG(page);\r\n    } else if (exportOptions.type === 'png' || exportOptions.type === 'jpeg') {\r\n      // PNG or JPEG\r\n      data = await createImage(\r\n        page,\r\n        exportOptions.type,\r\n        'base64',\r\n        {\r\n          width: viewportWidth,\r\n          height: viewportHeight,\r\n          x,\r\n          y\r\n        },\r\n        exportOptions.rasterizationTimeout\r\n      );\r\n    } else if (exportOptions.type === 'pdf') {\r\n      // PDF\r\n      data = await createPDF(page, viewportHeight, viewportWidth, 'base64');\r\n    } else {\r\n      throw new ExportError(\r\n        `[export] Unsupported output format ${exportOptions.type}.`\r\n      );\r\n    }\r\n\r\n    // Destroy old charts after the export is done\r\n    await page.evaluate(() => {\r\n      // We are not guaranteed that Highcharts is loaded, e,g, when doing SVG\r\n      // exports\r\n      if (typeof Highcharts !== 'undefined') {\r\n        // eslint-disable-next-line no-undef\r\n        const oldCharts = Highcharts.charts;\r\n\r\n        // Check in any already existing charts\r\n        if (Array.isArray(oldCharts) && oldCharts.length) {\r\n          // Destroy old charts\r\n          for (const oldChart of oldCharts) {\r\n            oldChart && oldChart.destroy();\r\n            // eslint-disable-next-line no-undef\r\n            Highcharts.charts.shift();\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    expBenchmark();\r\n    exportBench();\r\n\r\n    await clearInjected(page);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    await clearInjected(page);\r\n    return error;\r\n  }\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { log } from './logger.js';\r\nconst timers = {};\r\n\r\n// TODO: Read from config\r\nlet enabled = false;\r\n\r\nexport default (id) => {\r\n  if (!enabled) {\r\n    return () => {};\r\n  }\r\n\r\n  timers[id] = new Date();\r\n  return () => {\r\n    log(\r\n      3,\r\n      `[benchmark] - ${id}: ${new Date().getTime() - timers[id].getTime()}ms`\r\n    );\r\n  };\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport cssTemplate from './css.js';\r\n\r\nexport default (chart) => `\r\n<!DOCTYPE html>\r\n<html lang='en-US'>\r\n  <head>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n    <title>Highcarts Export</title>\r\n  </head>\r\n  <style>\r\n    ${cssTemplate()}\r\n  </style>\r\n  <body>\r\n    <div id=\"chart-container\">\r\n      ${chart}\r\n    </div>\r\n  </body>\r\n</html>\r\n\r\n`;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { Pool } from 'tarn';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport {\r\n  close,\r\n  create as createBrowser,\r\n  newPage as browserNewPage,\r\n  clearPage\r\n} from './browser.js';\r\nimport puppeteerExport from './export.js';\r\nimport { log, logWithStack } from './logger.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nlet performedExports = 0;\r\nlet exportAttempts = 0;\r\nlet timeSpent = 0;\r\nlet droppedExports = 0;\r\nlet spentAverage = 0;\r\nlet poolConfig = {};\r\n\r\n// The pool instance\r\nlet pool = false;\r\n\r\n// Custom puppeteer arguments\r\nlet puppeteerArgs;\r\n\r\nconst factory = {\r\n  /**\r\n   * Creates a new worker.\r\n   *\r\n   * @return {object} - An object with the id of a resource, the work count and\r\n   * a reference to the browser page.\r\n   */\r\n  create: async () => {\r\n    const id = uuid();\r\n    let page = false;\r\n\r\n    const s = new Date().getTime();\r\n\r\n    try {\r\n      page = await browserNewPage();\r\n\r\n      if (!page || page.isClosed()) {\r\n        throw '[pool] Invalid page';\r\n      }\r\n\r\n      log(\r\n        3,\r\n        `[pool] Successfully created a worker ${id} - took ${\r\n          new Date().getTime() - s\r\n        } ms.`\r\n      );\r\n    } catch (error) {\r\n      log(\r\n        1,\r\n        `[pool] Error creating a new page in pool entry creation! ${error}`\r\n      );\r\n\r\n      throw 'Error creating page';\r\n    }\r\n\r\n    return {\r\n      id,\r\n      page,\r\n      // Try to distribute the initial work count\r\n      workCount: Math.round(Math.random() * (poolConfig.workLimit / 2))\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Validates a worker.\r\n   *\r\n   * @param {object} workerHandle - A browser's instance.\r\n   *\r\n   * @return {boolean} - Bool that indicates if a resource is valid or not.\r\n   */\r\n  validate: async (workerHandle) => {\r\n    if (\r\n      poolConfig.workLimit &&\r\n      ++workerHandle.workCount > poolConfig.workLimit\r\n    ) {\r\n      log(\r\n        3,\r\n        `[pool] Worker failed validation: exceeded work limit (limit is ${poolConfig.workLimit})`\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // Clear page\r\n    await clearPage(workerHandle.page, true);\r\n    return true;\r\n  },\r\n\r\n  /**\r\n   * Destroys a worker.\r\n   *\r\n   * @param {object} workerHandle - A browser's instance.\r\n   */\r\n  destroy: (workerHandle) => {\r\n    log(3, `[pool] Destroying pool entry ${workerHandle.id}.`);\r\n\r\n    if (workerHandle.page) {\r\n      // We don't really need to wait around for this.\r\n      workerHandle.page.close();\r\n    }\r\n  },\r\n\r\n  // Logger function\r\n  log: (message, logLevel) => console.log(`${logLevel}: ${message}`)\r\n};\r\n\r\n/**\r\n * Inits the pool of resources.\r\n *\r\n * @param {object} config - Pool configuration along with custom puppeteer\r\n * arguments for the puppeteer.launch function.\r\n */\r\nexport const init = async (config) => {\r\n  // The newest puppeteer arguments for the browser creation\r\n  puppeteerArgs = config.puppeteerArgs;\r\n\r\n  // Wait until we've sucessfully created a browser instance.\r\n  try {\r\n    await createBrowser(puppeteerArgs);\r\n  } catch (error) {\r\n    throw new ExportError(error.message).setError(error);\r\n  }\r\n\r\n  // For the module scope usage\r\n  poolConfig = config && config.pool ? { ...config.pool } : {};\r\n\r\n  log(\r\n    3,\r\n    `[pool] Initializing pool with workers: min ${poolConfig.minWorkers}, max ${poolConfig.maxWorkers}.`\r\n  );\r\n\r\n  if (pool) {\r\n    return log(\r\n      4,\r\n      '[pool] Already initialized, please kill it before creating a new one.'\r\n    );\r\n  }\r\n\r\n  // Attach process' exit listeners\r\n  if (poolConfig.listenToProcessExits) {\r\n    attachProcessExitListeners();\r\n  }\r\n\r\n  if (parseInt(poolConfig.minWorkers) > parseInt(poolConfig.maxWorkers)) {\r\n    poolConfig.minWorkers = poolConfig.maxWorkers;\r\n  }\r\n\r\n  try {\r\n    // Create a pool along with a minimal number of resources\r\n    pool = new Pool({\r\n      // Get the create/validate/destroy/log functions\r\n      ...factory,\r\n      min: parseInt(poolConfig.minWorkers),\r\n      max: parseInt(poolConfig.maxWorkers),\r\n      acquireTimeoutMillis: poolConfig.acquireTimeout,\r\n      createTimeoutMillis: poolConfig.createTimeout,\r\n      destroyTimeoutMillis: poolConfig.destroyTimeout,\r\n      idleTimeoutMillis: poolConfig.idleTimeout,\r\n      createRetryIntervalMillis: poolConfig.createRetryInterval,\r\n      reapIntervalMillis: poolConfig.reaperInterval,\r\n      propagateCreateError: false\r\n    });\r\n\r\n    // Set events\r\n    pool.on('createFail', (eventId, error) => {\r\n      logWithStack(\r\n        1,\r\n        error,\r\n        `[pool] Error when creating worker of an event id ${eventId}.`\r\n      );\r\n    });\r\n\r\n    pool.on('acquireFail', (eventId, error) => {\r\n      logWithStack(\r\n        1,\r\n        error,\r\n        `[pool] Error when acquiring worker of an event id ${eventId}.`\r\n      );\r\n    });\r\n\r\n    pool.on('destroyFail', (eventId, resource, error) => {\r\n      logWithStack(\r\n        1,\r\n        error,\r\n        `[pool] Error when destroying worker of an id ${resource.id}, event id ${eventId}.`\r\n      );\r\n    });\r\n\r\n    pool.on('release', async (resource) => {\r\n      // Clear page\r\n      await clearPage(resource.page, false);\r\n      log(4, `[pool] Releasing a worker of an id ${resource.id}.`);\r\n    });\r\n\r\n    pool.on('destroySuccess', (eventId, resource) => {\r\n      log(4, `[pool] Destroyed a worker of an id ${resource.id}.`);\r\n    });\r\n\r\n    const initialResources = [];\r\n    // Create an initial number of resources\r\n    for (let i = 0; i < poolConfig.minWorkers; i++) {\r\n      try {\r\n        const resource = await pool.acquire().promise;\r\n        initialResources.push(resource);\r\n      } catch (error) {\r\n        logWithStack(1, error, '[pool] Could not create an initial resource.');\r\n      }\r\n    }\r\n\r\n    // Release the initial number of resources back to the pool\r\n    initialResources.forEach((resource) => {\r\n      pool.release(resource);\r\n    });\r\n\r\n    log(\r\n      3,\r\n      `[pool] The pool is ready${initialResources.length ? ` with ${initialResources.length} initial resources waiting.` : '.'}`\r\n    );\r\n  } catch (error) {\r\n    throw new ExportError('[pool] Could not create the worker pool.').setError(\r\n      error\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Attaches process' exit listeners.\r\n */\r\nexport function attachProcessExitListeners() {\r\n  log(4, '[pool] Attaching exit listeners to the process.');\r\n\r\n  // Kill all pool resources on exit\r\n  process.on('exit', async () => {\r\n    await killPool();\r\n  });\r\n\r\n  // Handler for the SIGINT\r\n  process.on('SIGINT', (name, code) => {\r\n    log(4, `The ${name} event with code: ${code}.`);\r\n    process.exit(1);\r\n  });\r\n\r\n  // Handler for the SIGTERM\r\n  process.on('SIGTERM', (name, code) => {\r\n    log(4, `The ${name} event with code: ${code}.`);\r\n    process.exit(1);\r\n  });\r\n\r\n  // Handler for the uncaughtException\r\n  process.on('uncaughtException', (error, name) => {\r\n    logWithStack(1, error, `The ${name} error.`);\r\n    process.exit(1);\r\n  });\r\n}\r\n\r\n/**\r\n * Kills the pool and flush the browser instance.\r\n */\r\nexport async function killPool() {\r\n  log(3, '[pool] Killing all workers.');\r\n\r\n  // Return true when the pool is already destroyed\r\n  if (pool.destroyed) {\r\n    // Close the browser instance if still connected\r\n    await close();\r\n    return true;\r\n  }\r\n\r\n  // If still alive, destroy the pool of pages before closing a browser\r\n  await pool.destroy();\r\n\r\n  // Close the browser instance\r\n  await close();\r\n  return true;\r\n}\r\n\r\n/**\r\n * Posts work to the pool.\r\n *\r\n * @param {object} chart - Chart's options.\r\n * @param {object} options - All options object.\r\n */\r\nexport const postWork = async (chart, options) => {\r\n  let workerHandle;\r\n\r\n  try {\r\n    log(4, '[pool] Work received, starting to process.');\r\n\r\n    if (poolConfig.benchmarking) {\r\n      getPoolInfo();\r\n    }\r\n\r\n    ++exportAttempts;\r\n\r\n    if (!pool) {\r\n      throw new ExportError('Work received, but pool has not been started.');\r\n    }\r\n\r\n    // Acquire the worker along with the id of resource and work count\r\n    try {\r\n      log(4, '[pool] Acquiring a worker handle.');\r\n      workerHandle = await pool.acquire().promise;\r\n    } catch (error) {\r\n      throw new ExportError('Error when acquiring available entry.').setError(\r\n        error\r\n      );\r\n    }\r\n\r\n    log(4, '[pool] Acquired a worker handle.');\r\n\r\n    if (!workerHandle.page) {\r\n      throw new ExportError(\r\n        'Resolved worker page is invalid: pool setup is wonky.'\r\n      );\r\n    }\r\n\r\n    // Save the start time\r\n    let workStart = new Date().getTime();\r\n\r\n    log(4, `[pool] Starting work on pool entry ${workerHandle.id}.`);\r\n\r\n    // Perform an export on a puppeteer level\r\n    const result = await puppeteerExport(workerHandle.page, chart, options);\r\n\r\n    // Check if it's an error\r\n    if (result instanceof Error) {\r\n      // TODO: If the export failed because puppeteer timed out, we need to force kill the worker so we get a new page. That needs to be handled better than this hack.\r\n      if (result.message === 'Rasterization timeout') {\r\n        workerHandle.page.close();\r\n        workerHandle.page = await browserNewPage();\r\n      }\r\n\r\n      throw new ExportError('Error encountered during export.').setError(\r\n        result\r\n      );\r\n    }\r\n\r\n    // Release the resource back to the pool\r\n    pool.release(workerHandle);\r\n\r\n    // Used for statistics in averageTime and processedWorkCount, which\r\n    // in turn is used by the /health route.\r\n    const workEnd = new Date().getTime();\r\n    const exportTime = workEnd - workStart;\r\n    timeSpent += exportTime;\r\n    spentAverage = timeSpent / ++performedExports;\r\n\r\n    log(4, `[pool] Work completed in ${exportTime} ms.`);\r\n\r\n    // Otherwise return the result\r\n    return {\r\n      result,\r\n      options\r\n    };\r\n  } catch (error) {\r\n    ++droppedExports;\r\n\r\n    if (workerHandle) {\r\n      pool.release(workerHandle);\r\n    }\r\n\r\n    throw new ExportError(`[pool] In pool.postWork: ${error.message}`).setError(\r\n      error\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Gets the pool.\r\n */\r\nexport function getPool() {\r\n  return pool;\r\n}\r\n\r\n/**\r\n * Gets the pool's information in JSON form.\r\n */\r\nexport const getPoolInfoJSON = () => ({\r\n  min: pool.min,\r\n  max: pool.max,\r\n  size: pool.size,\r\n  available: pool.available,\r\n  borrowed: pool.borrowed,\r\n  pending: pool.pending,\r\n  spareResourceCapacity: pool.spareResourceCapacity\r\n});\r\n\r\n/**\r\n * Gets the pool's information.\r\n */\r\nexport function getPoolInfo() {\r\n  const {\r\n    min,\r\n    max,\r\n    size,\r\n    available,\r\n    borrowed,\r\n    pending,\r\n    spareResourceCapacity\r\n  } = pool;\r\n\r\n  log(4, `[pool] The minimum number of resources allowed by pool: ${min}.`);\r\n  log(4, `[pool] The maximum number of resources allowed by pool: ${max}.`);\r\n  log(\r\n    4,\r\n    `[pool] The number of all resources in pool (free or in use): ${size}.`\r\n  );\r\n  log(\r\n    4,\r\n    `[pool] The number of resources that are currently available: ${available}.`\r\n  );\r\n  log(\r\n    4,\r\n    `[pool] The number of resources that are currently acquired: ${borrowed}.`\r\n  );\r\n  log(\r\n    4,\r\n    `[pool] The number of callers waiting to acquire a resource: ${pending}.`\r\n  );\r\n  log(\r\n    4,\r\n    `[pool] The number of how many more resources can the pool manage/create: ${spareResourceCapacity}.`\r\n  );\r\n}\r\n\r\nexport default {\r\n  init,\r\n  killPool,\r\n  postWork,\r\n  getPool,\r\n  getPoolInfo,\r\n  getPoolInfoJSON,\r\n  workAttempts: () => exportAttempts,\r\n  droppedWork: () => droppedExports,\r\n  averageTime: () => spentAverage,\r\n  processedWorkCount: () => performedExports\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { join as pather } from 'path';\r\n\r\nimport cache from '../../cache.js';\r\nimport pool from '../../pool.js';\r\nimport { __dirname } from '../../utils.js';\r\n\r\nconst pkgFile = JSON.parse(readFileSync(pather(__dirname, 'package.json')));\r\n\r\nconst serverStartTime = new Date();\r\n\r\n/**\r\n * Adds the /health route which outputs basic stats for the server\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.get('/health', (request, response) => {\r\n        response.send({\r\n          status: 'OK',\r\n          bootTime: serverStartTime,\r\n          uptime:\r\n            Math.floor(\r\n              (new Date().getTime() - serverStartTime.getTime()) / 1000 / 60\r\n            ) + ' minutes',\r\n          version: pkgFile.version,\r\n          highchartsVersion: cache.version(),\r\n          averageProcessingTime: pool.averageTime(),\r\n          performedExports: pool.processedWorkCount(),\r\n          failedExports: pool.droppedWork(),\r\n          exportAttempts: pool.workAttempts(),\r\n          sucessRatio: (pool.processedWorkCount() / pool.workAttempts()) * 100,\r\n          // eslint-disable-next-line import/no-named-as-default-member\r\n          pool: pool.getPoolInfoJSON()\r\n        });\r\n      });\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { existsSync, readFileSync, promises as fsPromises } from 'fs';\r\n\r\nimport prompts from 'prompts';\r\n\r\nimport { logWithStack } from './logger.js';\r\nimport { deepCopy, isObject, printUsage, toBoolean } from './utils.js';\r\nimport {\r\n  absoluteProps,\r\n  defaultConfig,\r\n  nestedArgs,\r\n  promptsConfig\r\n} from './schemas/config.js';\r\n\r\nlet generalOptions = {};\r\n\r\n/**\r\n * Getter for the general options.\r\n *\r\n * @return {object} - General options object.\r\n */\r\nexport const getOptions = () => generalOptions;\r\n\r\n/**\r\n * Initializes and sets the general options for the server instace.\r\n *\r\n * @param {object} userOptions - Additional user options (e.g. from the node\r\n * module usage).\r\n * @param {string[]} args - CLI arguments.\r\n * @return {object} - General options object.\r\n */\r\nexport const setOptions = (userOptions, args) => {\r\n  // Only for the CLI usage\r\n  if (args?.length) {\r\n    // Get the additional options from the custom JSON file\r\n    generalOptions = loadConfigFile(args);\r\n  }\r\n\r\n  // Update the default config with a correct option values\r\n  updateDefaultConfig(defaultConfig, generalOptions);\r\n\r\n  // Set values for server's options and returns them\r\n  generalOptions = initOptions(defaultConfig);\r\n\r\n  // Apply user options if there are any\r\n  if (userOptions) {\r\n    // Merge user options\r\n    generalOptions = mergeConfigOptions(\r\n      generalOptions,\r\n      userOptions,\r\n      absoluteProps\r\n    );\r\n  }\r\n\r\n  // Only for the CLI usage\r\n  if (args?.length) {\r\n    // Pair provided arguments\r\n    generalOptions = pairArgumentValue(generalOptions, args, defaultConfig);\r\n  }\r\n\r\n  // Return final general options\r\n  return generalOptions;\r\n};\r\n\r\n/**\r\n * Displays a prompt for the manual configuration.\r\n *\r\n * @param {string} configFileName - The name of a configuration file.\r\n */\r\nexport const manualConfig = async (configFileName) => {\r\n  // Prepare a config object\r\n  let configFile = {};\r\n\r\n  // Check if provided config file exists\r\n  if (existsSync(configFileName)) {\r\n    configFile = JSON.parse(readFileSync(configFileName, 'utf8'));\r\n  }\r\n\r\n  // Question about a configuration category\r\n  const onSubmit = async (p, categories) => {\r\n    let questionsCounter = 0;\r\n    let allQuestions = [];\r\n\r\n    // Create a corresponding property in the manualConfig object\r\n    for (const section of categories) {\r\n      // Mark each option with a section\r\n      promptsConfig[section] = promptsConfig[section].map((option) => ({\r\n        ...option,\r\n        section\r\n      }));\r\n\r\n      // Collect the questions\r\n      allQuestions = [...allQuestions, ...promptsConfig[section]];\r\n    }\r\n\r\n    await prompts(allQuestions, {\r\n      onSubmit: async (prompt, answer) => {\r\n        // Get the default modules\r\n        if (prompt.name === 'modules') {\r\n          answer = answer.length\r\n            ? answer.map((module) => prompt.choices[module])\r\n            : prompt.choices;\r\n\r\n          configFile[prompt.section][prompt.name] = answer;\r\n        } else {\r\n          configFile[prompt.section] = recursiveProps(\r\n            Object.assign({}, configFile[prompt.section] || {}),\r\n            prompt.name.split('.'),\r\n            prompt.choices ? prompt.choices[answer] : answer\r\n          );\r\n        }\r\n\r\n        if (++questionsCounter === allQuestions.length) {\r\n          try {\r\n            await fsPromises.writeFile(\r\n              configFileName,\r\n              JSON.stringify(configFile, null, 2),\r\n              'utf8'\r\n            );\r\n          } catch (error) {\r\n            logWithStack(\r\n              1,\r\n              error,\r\n              '[config] Error while creating config.json.'\r\n            );\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return true;\r\n  };\r\n\r\n  // Find the categories\r\n  const choices = Object.keys(promptsConfig).map((choice) => ({\r\n    title: `${choice} options`,\r\n    value: choice\r\n  }));\r\n\r\n  // Category prompt\r\n  return prompts(\r\n    {\r\n      type: 'multiselect',\r\n      name: 'category',\r\n      message: 'Which category do you want to configure?',\r\n      hint: 'Space: Select specific, A: Select all, Enter: Confirm.',\r\n      instructions: '',\r\n      choices\r\n    },\r\n    { onSubmit }\r\n  );\r\n};\r\n\r\n/**\r\n * Maps the old options to the new config structure.\r\n *\r\n * @param {object} oldOptions - Options to be mapped.\r\n */\r\nexport const mapToNewConfig = (oldOptions) => {\r\n  const newOptions = {};\r\n  // Cycle through old-structured options\r\n  for (const [key, value] of Object.entries(oldOptions)) {\r\n    const propertiesChain = nestedArgs[key] ? nestedArgs[key].split('.') : [];\r\n\r\n    // Populate object in correct properties levels\r\n    propertiesChain.reduce(\r\n      (obj, prop, index) =>\r\n        (obj[prop] =\r\n          propertiesChain.length - 1 === index ? value : obj[prop] || {}),\r\n      newOptions\r\n    );\r\n  }\r\n  return newOptions;\r\n};\r\n\r\n/**\r\n * Merges the new options to the options object. It omits undefined values.\r\n *\r\n * @param {object} options - Old options.\r\n * @param {object} newOptions - New options.\r\n * @param {string[]} absoluteProps - Array of object names that should be force\r\n * merged.\r\n */\r\nexport const mergeConfigOptions = (options, newOptions, absoluteProps = []) => {\r\n  const mergedOptions = deepCopy(options);\r\n\r\n  for (const [key, value] of Object.entries(newOptions)) {\r\n    mergedOptions[key] =\r\n      isObject(value) &&\r\n      !absoluteProps.includes(key) &&\r\n      mergedOptions[key] !== undefined\r\n        ? mergeConfigOptions(mergedOptions[key], value, absoluteProps)\r\n        : value !== undefined\r\n          ? value\r\n          : mergedOptions[key];\r\n  }\r\n\r\n  return mergedOptions;\r\n};\r\n\r\n/**\r\n * Initializes options for the `startExport` method by merging user options\r\n * with the general options.\r\n *\r\n * @param {any} exportOptions - User options for exporting.\r\n * @param {any} generalOptions - General options are used for the export server.\r\n * @return {object} - User options merged with default options.\r\n */\r\nexport const initExportSettings = (exportOptions, generalOptions = {}) => {\r\n  let options = {};\r\n\r\n  if (exportOptions.svg) {\r\n    options = deepCopy(generalOptions);\r\n    options.export.type = exportOptions.type || exportOptions.export.type;\r\n    options.export.scale = exportOptions.scale || exportOptions.export.scale;\r\n    options.export.outfile =\r\n      exportOptions.outfile || exportOptions.export.outfile;\r\n    options.payload = {\r\n      svg: exportOptions.svg\r\n    };\r\n  } else {\r\n    options = mergeConfigOptions(\r\n      generalOptions,\r\n      exportOptions,\r\n      // Omit going down recursively with the belows\r\n      absoluteProps\r\n    );\r\n  }\r\n\r\n  options.export.outfile =\r\n    options.export?.outfile || `chart.${options.export?.type || 'png'}`;\r\n  return options;\r\n};\r\n\r\n/**\r\n * Loads the configuration from a custom JSON file.\r\n *\r\n * @param {string[]} args - CLI arguments.\r\n * @return {object} - Options object from the JSON file.\r\n */\r\nfunction loadConfigFile(args) {\r\n  // Check if the --loadConfig option was used\r\n  const configIndex = args.findIndex(\r\n    (arg) => arg.replace(/-/g, '') === 'loadConfig'\r\n  );\r\n\r\n  // Check if the --loadConfig has a value\r\n  if (configIndex > -1 && args[configIndex + 1]) {\r\n    const fileName = args[configIndex + 1];\r\n    try {\r\n      // Check if an additional config file is a correct JSON file\r\n      if (fileName && fileName.endsWith('.json')) {\r\n        // Load an optional custom JSON config file\r\n        return JSON.parse(readFileSync(fileName));\r\n      }\r\n    } catch (error) {\r\n      logWithStack(\r\n        2,\r\n        error,\r\n        `[config] Unable to load config from the ${fileName}.`\r\n      );\r\n    }\r\n  }\r\n\r\n  // No additional options to return\r\n  return {};\r\n}\r\n\r\n/**\r\n * Setting correct values of the options from the default config.\r\n *\r\n * @param {object} configObj - The config object based on which the initial\r\n * configuration be made.\r\n * @param {object} customObj - The custom object which can contain additional\r\n * option values to set.\r\n * @param {string} propChain - Required for creating a string chain of\r\n * properties for nested arguments.\r\n */\r\nfunction updateDefaultConfig(configObj, customObj = {}, propChain = '') {\r\n  Object.keys(configObj).forEach((key) => {\r\n    const entry = configObj[key];\r\n    const customValue = customObj && customObj[key];\r\n    let numEnvVal;\r\n\r\n    if (typeof entry.value === 'undefined') {\r\n      updateDefaultConfig(entry, customValue, `${propChain}.${key}`);\r\n    } else {\r\n      // If a value from a custom JSON exists, it take precedence\r\n      if (customValue !== undefined) {\r\n        entry.value = customValue;\r\n      }\r\n\r\n      // If a value from an env variable exists, it take precedence\r\n      if (entry.envLink) {\r\n        // Load the env var\r\n        if (entry.type === 'boolean') {\r\n          entry.value = toBoolean(\r\n            [process.env[entry.envLink], entry.value].find(\r\n              (el) => el || el === 'false'\r\n            )\r\n          );\r\n        } else if (entry.type === 'number') {\r\n          numEnvVal = +process.env[entry.envLink];\r\n          entry.value = numEnvVal >= 0 ? numEnvVal : entry.value;\r\n        } else if (entry.type.indexOf(']') >= 0 && process.env[entry.envLink]) {\r\n          entry.value = process.env[entry.envLink].split(',');\r\n        } else {\r\n          entry.value = process.env[entry.envLink] || entry.value;\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Inits options recursively.\r\n *\r\n * @param {any} items - Items to update options from.\r\n * @return {object} - Updated options object.\r\n */\r\nfunction initOptions(items) {\r\n  let options = {};\r\n  for (const [name, item] of Object.entries(items)) {\r\n    options[name] = Object.prototype.hasOwnProperty.call(item, 'value')\r\n      ? item.value\r\n      : initOptions(item);\r\n  }\r\n  return options;\r\n}\r\n\r\n/**\r\n * Pairs argument with a corresponding value.\r\n *\r\n * @param {object} options - All server options.\r\n * @param {string[]} args - Array of arguments from a user.\r\n * @param {object} defaultConfig - The default config object.\r\n */\r\nfunction pairArgumentValue(options, args, defaultConfig) {\r\n  for (let i = 0; i < args.length; i++) {\r\n    let option = args[i].replace(/-/g, '');\r\n\r\n    // Find the right place for property's value\r\n    const propertiesChain = nestedArgs[option]\r\n      ? nestedArgs[option].split('.')\r\n      : [];\r\n\r\n    propertiesChain.reduce((obj, prop, index) => {\r\n      if (propertiesChain.length - 1 === index) {\r\n        // Finds an option and set a corresponding value\r\n        if (typeof obj[prop] !== 'undefined') {\r\n          if (args[++i]) {\r\n            obj[prop] = args[i] || obj[prop];\r\n          } else {\r\n            console.log(`Missing argument value for ${option}!`.red, '\\n');\r\n            options = printUsage(defaultConfig);\r\n          }\r\n        }\r\n      }\r\n      return obj[prop];\r\n    }, options);\r\n  }\r\n\r\n  return options;\r\n}\r\n\r\n/**\r\n * Recursively sets a property in a correct indentation level based on the\r\n * array of nested properties names.\r\n *\r\n * @param {object} objectToUpdate - Object where a property must be set on a\r\n * correct level.\r\n * @param  {string[]}nestedNames - Array of nasted names that indicates\r\n * indentation level.\r\n * @param {any} value - A value to assign to the property.\r\n * @return {object} - Updated options object.\r\n */\r\nfunction recursiveProps(objectToUpdate, nestedNames, value) {\r\n  while (nestedNames.length > 1) {\r\n    const propName = nestedNames.shift();\r\n\r\n    // Create a property in object if it doesn't exist\r\n    if (!Object.prototype.hasOwnProperty.call(objectToUpdate, propName)) {\r\n      objectToUpdate[propName] = {};\r\n    }\r\n\r\n    // Call function again if there still names to go\r\n    objectToUpdate[propName] = recursiveProps(\r\n      Object.assign({}, objectToUpdate[propName]),\r\n      nestedNames,\r\n      value\r\n    );\r\n\r\n    return objectToUpdate;\r\n  }\r\n\r\n  // Assign the final value\r\n  objectToUpdate[nestedNames[0]] = value;\r\n  return objectToUpdate;\r\n}\r\n\r\nexport default {\r\n  getOptions,\r\n  setOptions,\r\n  manualConfig,\r\n  mapToNewConfig,\r\n  mergeConfigOptions,\r\n  initExportSettings\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync, writeFileSync } from 'fs';\r\n\r\nimport { initExportSettings, getOptions } from './config.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport { killPool, postWork } from './pool.js';\r\nimport {\r\n  fixType,\r\n  handleResources,\r\n  isCorrectJSON,\r\n  optionsStringify,\r\n  roundNumber,\r\n  toBoolean,\r\n  wrapAround\r\n} from './utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nlet allowCodeExecution = false;\r\n\r\nexport const startExport = async (settings, endCallback) => {\r\n  // Starting exporting process message\r\n  log(4, '[chart] Starting exporting process.');\r\n\r\n  // Initialize options\r\n  const options = initExportSettings(settings, getOptions());\r\n\r\n  // Get the export options\r\n  const exportOptions = options.export;\r\n\r\n  // If SVG is an input (argument can be sent only by the request)\r\n  if (options.payload?.svg && options.payload.svg !== '') {\r\n    try {\r\n      log(4, '[chart] Attempting to export from a SVG input.');\r\n      return exportAsString(options.payload.svg.trim(), options, endCallback);\r\n    } catch (error) {\r\n      /// TO DO: Check\r\n      return endCallback(\r\n        false,\r\n        new ExportError('[chart] Error loading SVG input.').setError(error)\r\n      );\r\n    }\r\n  }\r\n\r\n  // Export using options from the file\r\n  if (exportOptions.infile && exportOptions.infile.length) {\r\n    // Try to read the file to get the string representation\r\n    try {\r\n      log(4, '[chart] Attempting to export from an input file.');\r\n      options.export.instr = readFileSync(exportOptions.infile, 'utf8');\r\n      return exportAsString(options.export.instr.trim(), options, endCallback);\r\n    } catch (error) {\r\n      /// TO DO: Check\r\n      return endCallback(\r\n        false,\r\n        new ExportError('[chart] Error loading input file.').setError(error)\r\n      );\r\n    }\r\n  }\r\n\r\n  // Export with options from the raw representation\r\n  if (\r\n    (exportOptions.instr && exportOptions.instr !== '') ||\r\n    (exportOptions.options && exportOptions.options !== '')\r\n  ) {\r\n    try {\r\n      log(4, '[chart] Attempting to export from a raw input.');\r\n\r\n      // Perform a direct inject when forced\r\n      if (toBoolean(options.customCode?.allowCodeExecution)) {\r\n        return doStraightInject(options, endCallback);\r\n      }\r\n\r\n      // Either try to parse to JSON first or do the direct export\r\n      return typeof exportOptions.instr === 'string'\r\n        ? exportAsString(exportOptions.instr.trim(), options, endCallback)\r\n        : doExport(\r\n            options,\r\n            exportOptions.instr || exportOptions.options,\r\n            endCallback\r\n          );\r\n    } catch (error) {\r\n      /// TO DO: Check\r\n      return endCallback(\r\n        false,\r\n        new ExportError('[chart] Error loading raw input.').setError(error)\r\n      );\r\n    }\r\n  }\r\n\r\n  // No input specified, pass an error message to the callback\r\n  return (\r\n    endCallback &&\r\n    endCallback(\r\n      false,\r\n      new ExportError(\r\n        `[chart] No input specified. ${JSON.stringify(exportOptions, undefined, '  ')}`\r\n      )\r\n    )\r\n  );\r\n};\r\n\r\nexport const batchExport = (options) => {\r\n  const batchFunctions = [];\r\n\r\n  // Split and pair the --batch arguments\r\n  for (let pair of options.export.batch.split(';')) {\r\n    pair = pair.split('=');\r\n    if (pair.length === 2) {\r\n      batchFunctions.push(\r\n        new Promise((resolve, reject) => {\r\n          startExport(\r\n            {\r\n              ...options,\r\n              export: {\r\n                ...options.export,\r\n                infile: pair[0],\r\n                outfile: pair[1]\r\n              }\r\n            },\r\n            (info, error) => {\r\n              // Throw an error\r\n              if (error) {\r\n                return reject(error);\r\n              }\r\n\r\n              // Save the base64 from a buffer to a correct image file\r\n              writeFileSync(\r\n                info.options.export.outfile,\r\n                Buffer.from(info.result, 'base64')\r\n              );\r\n\r\n              resolve();\r\n            }\r\n          );\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  // Kill the pool after all exports are done\r\n  Promise.all(batchFunctions)\r\n    .then(() => {\r\n      killPool();\r\n    })\r\n    .catch((error) => {\r\n      /// TO DO: Check\r\n      logWithStack(1, error, '[chart] Error encountered during batch export.');\r\n      process.exit(1);\r\n    });\r\n};\r\n\r\nexport const singleExport = async (options) => {\r\n  // Use instr or its alias, options\r\n  options.export.instr = options.export.instr || options.export.options;\r\n\r\n  // Perform an export\r\n  await startExport(options, (info, error) => {\r\n    // Exit process when error\r\n    if (error) {\r\n      throw error;\r\n    }\r\n\r\n    const { outfile, type } = info.options.export;\r\n\r\n    // Save the base64 from a buffer to a correct image file\r\n    writeFileSync(\r\n      outfile || `chart.${type}`,\r\n      type !== 'svg' ? Buffer.from(info.result, 'base64') : info.result\r\n    );\r\n\r\n    // Kill the pool\r\n    killPool();\r\n  });\r\n};\r\n\r\n/**\r\n * Function for choosing chart size and scale based on options prioritization.\r\n *\r\n * @param {object} options - All options object.\r\n * @return {object} - An object with updated size and scale for a chart.\r\n */\r\nexport const findChartSize = (options) => {\r\n  const { chart, exporting } =\r\n    options.export?.options || isCorrectJSON(options.export?.instr);\r\n\r\n  // See if globalOptions holds chart or exporting size\r\n  const globalOptions = isCorrectJSON(options.export?.globalOptions);\r\n\r\n  // Secure scale value\r\n  let scale =\r\n    options.export?.scale ||\r\n    exporting?.scale ||\r\n    globalOptions?.exporting?.scale ||\r\n    options.export?.defaultScale ||\r\n    1;\r\n\r\n  // the scale cannot be lower than 0.1 and cannot be higher than 5.0\r\n  scale = Math.max(0.1, Math.min(scale, 5.0));\r\n\r\n  // we want to round the numbers like 0.23234 -> 0.23\r\n  scale = roundNumber(scale, 2);\r\n\r\n  // Find chart size and scale\r\n  const size = {\r\n    height:\r\n      options.export?.height ||\r\n      exporting?.sourceHeight ||\r\n      chart?.height ||\r\n      globalOptions?.exporting?.sourceHeight ||\r\n      globalOptions?.chart?.height ||\r\n      options.export?.defaultHeight ||\r\n      400,\r\n    width:\r\n      options.export?.width ||\r\n      exporting?.sourceWidth ||\r\n      chart?.width ||\r\n      globalOptions?.exporting?.sourceWidth ||\r\n      globalOptions?.chart?.width ||\r\n      options.export?.defaultWidth ||\r\n      600,\r\n    scale\r\n  };\r\n\r\n  // Get rid of potential px and %\r\n  for (var [param, value] of Object.entries(size)) {\r\n    size[param] =\r\n      typeof value === 'string' ? +value.replace(/px|%/gi, '') : value;\r\n  }\r\n  return size;\r\n};\r\n\r\n/**\r\n * Function for final options preparation before export.\r\n *\r\n * @param {object} options - All options object.\r\n * @param {object} chartJson - Chart JSON.\r\n * @param {function} endCallback - The end callback.\r\n * @param {string} svg - The SVG representation.\r\n */\r\nconst doExport = async (options, chartJson, endCallback, svg) => {\r\n  let { export: exportOptions, customCode: customCodeOptions } = options;\r\n\r\n  const allowCodeExecutionScoped =\r\n    typeof customCodeOptions.allowCodeExecution === 'boolean'\r\n      ? customCodeOptions.allowCodeExecution\r\n      : allowCodeExecution;\r\n\r\n  if (!customCodeOptions) {\r\n    customCodeOptions = options.customCode = {};\r\n  } else if (allowCodeExecutionScoped) {\r\n    if (typeof options.customCode.resources === 'string') {\r\n      // Process resources\r\n      options.customCode.resources = handleResources(\r\n        options.customCode.resources,\r\n        toBoolean(options.customCode.allowFileResources)\r\n      );\r\n    } else if (!options.customCode.resources) {\r\n      try {\r\n        const resources = readFileSync('resources.json', 'utf8');\r\n        options.customCode.resources = handleResources(\r\n          resources,\r\n          toBoolean(options.customCode.allowFileResources)\r\n        );\r\n      } catch (error) {\r\n        logWithStack(\r\n          2,\r\n          error,\r\n          `[chart] The default resources.json cannot be loaded.`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // If the allowCodeExecution flag isn't set, we should refuse the usage\r\n  // of callback, resources, and custom code. Additionally, the worker will\r\n  // refuse to run arbitrary JavaScript. Prioritized should be the scoped\r\n  // option, then we should take a look at the overall pool option.\r\n  if (!allowCodeExecutionScoped && customCodeOptions) {\r\n    if (\r\n      customCodeOptions.callback ||\r\n      customCodeOptions.resources ||\r\n      customCodeOptions.customCode\r\n    ) {\r\n      // Send back a friendly message saying that the exporter does not support\r\n      // these settings.\r\n      return (\r\n        endCallback &&\r\n        endCallback(\r\n          false,\r\n          new ExportError(\r\n            `[chart] The 'callback', 'resources' and 'customCode' options have been disabled for this server.`\r\n          )\r\n        )\r\n      );\r\n    }\r\n\r\n    // Reset all additional custom code\r\n    customCodeOptions.callback = false;\r\n    customCodeOptions.resources = false;\r\n    customCodeOptions.customCode = false;\r\n  }\r\n\r\n  // Clean properties to keep it lean and mean\r\n  if (chartJson) {\r\n    chartJson.chart = chartJson.chart || {};\r\n    chartJson.exporting = chartJson.exporting || {};\r\n    chartJson.exporting.enabled = false;\r\n  }\r\n\r\n  exportOptions.constr = exportOptions.constr || 'chart';\r\n  exportOptions.type = fixType(exportOptions.type, exportOptions.outfile);\r\n  if (exportOptions.type === 'svg') {\r\n    exportOptions.width = false;\r\n  }\r\n\r\n  // Prepare global and theme options\r\n  ['globalOptions', 'themeOptions'].forEach((optionsName) => {\r\n    try {\r\n      if (exportOptions && exportOptions[optionsName]) {\r\n        if (\r\n          typeof exportOptions[optionsName] === 'string' &&\r\n          exportOptions[optionsName].endsWith('.json')\r\n        ) {\r\n          exportOptions[optionsName] = isCorrectJSON(\r\n            readFileSync(exportOptions[optionsName], 'utf8'),\r\n            true\r\n          );\r\n        } else {\r\n          exportOptions[optionsName] = isCorrectJSON(\r\n            exportOptions[optionsName],\r\n            true\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      exportOptions[optionsName] = {};\r\n      /// TO DO: Check\r\n      logWithStack(2, error, `[chart] The '${optionsName}' cannot be loaded.`);\r\n    }\r\n  });\r\n\r\n  // Prepare customCode\r\n  if (customCodeOptions.allowCodeExecution) {\r\n    try {\r\n      customCodeOptions.customCode = wrapAround(\r\n        customCodeOptions.customCode,\r\n        customCodeOptions.allowFileResources\r\n      );\r\n    } catch (error) {\r\n      logWithStack(2, error, `[chart] The 'customCode' cannot be loaded.`);\r\n    }\r\n  }\r\n\r\n  // Get the callback\r\n  if (\r\n    customCodeOptions &&\r\n    customCodeOptions.callback &&\r\n    customCodeOptions.callback?.indexOf('{') < 0\r\n  ) {\r\n    // The allowFileResources is always set to false for HTTP requests to avoid\r\n    // injecting arbitrary files from the fs\r\n    if (customCodeOptions.allowFileResources) {\r\n      try {\r\n        customCodeOptions.callback = readFileSync(\r\n          customCodeOptions.callback,\r\n          'utf8'\r\n        );\r\n      } catch (error) {\r\n        /// TO DO: Check\r\n        logWithStack(2, error, `[chart] The 'callback' cannot be loaded.`);\r\n        customCodeOptions.callback = false;\r\n      }\r\n    } else {\r\n      customCodeOptions.callback = false;\r\n    }\r\n  }\r\n\r\n  // Size search\r\n  options.export = {\r\n    ...options.export,\r\n    ...findChartSize(options)\r\n  };\r\n\r\n  // Post the work to the pool\r\n  /// TO DO: Correct\r\n  try {\r\n    const result = await postWork(\r\n      exportOptions.strInj || chartJson || svg,\r\n      options\r\n    );\r\n    return endCallback(result);\r\n  } catch (error) {\r\n    return endCallback(false, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Function for straight injecting the code.\r\n * Dangerous and must be used deliberately by someone who sets up a server\r\n * (see  --allowCodeExecution).\r\n *\r\n * @param {object} options - All options object.\r\n * @param {function} endCallback - The function to call when exporting is done.\r\n */\r\nconst doStraightInject = (options, endCallback) => {\r\n  try {\r\n    let strInj;\r\n    let instr = options.export.instr || options.export.options;\r\n\r\n    if (typeof instr !== 'string') {\r\n      // Try to stringify options\r\n      strInj = instr = optionsStringify(\r\n        instr,\r\n        options.customCode?.allowCodeExecution\r\n      );\r\n    }\r\n    strInj = instr.replaceAll(/\\t|\\n|\\r/g, '').trim();\r\n\r\n    // Get rid of the ;\r\n    if (strInj[strInj.length - 1] === ';') {\r\n      strInj = strInj.substring(0, strInj.length - 1);\r\n    }\r\n\r\n    // Save as stright inject string\r\n    options.export.strInj = strInj;\r\n    return doExport(options, false, endCallback);\r\n  } catch (error) {\r\n    return (\r\n      endCallback &&\r\n      endCallback(\r\n        false,\r\n        new ExportError(\r\n          `[chart] Malformed input detected for ${options.export?.requestId || '?'}. Please make sure that your JSON/JavaScript options are sent using the \"options\" attribute, and that if you're using SVG, it is unescaped.`\r\n        ).setError(error)\r\n      )\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Prepares an input before exporting.\r\n *\r\n * @param {string} stringToExport - String representation of SVG/export options.\r\n * @param {object} options - All options object.\r\n * @param {function} endCallback - The function to call when exporting is done.\r\n */\r\nconst exportAsString = (stringToExport, options, endCallback) => {\r\n  const { allowCodeExecution } = options.customCode;\r\n\r\n  // Check if it is SVG\r\n  if (\r\n    stringToExport.indexOf('<svg') >= 0 ||\r\n    stringToExport.indexOf('<?xml') >= 0\r\n  ) {\r\n    log(4, '[chart] Parsing input as SVG.');\r\n    return doExport(options, false, endCallback, stringToExport);\r\n  }\r\n\r\n  try {\r\n    // Try to parse to JSON and call the doExport function\r\n    const chartJSON = JSON.parse(stringToExport.replaceAll(/\\t|\\n|\\r/g, ' '));\r\n\r\n    // If a correct JSON, do the export\r\n    return doExport(options, chartJSON, endCallback);\r\n  } catch (error) {\r\n    // Not a valid JSON\r\n    if (toBoolean(allowCodeExecution)) {\r\n      return doStraightInject(options, endCallback);\r\n    } else {\r\n      // Do not allow straight injection without the allowCodeExecution flag\r\n      return (\r\n        endCallback &&\r\n        endCallback(\r\n          false,\r\n          new ExportError(\r\n            '[chart] Only JSON configurations and SVG are allowed for this server. If this is your server, JavaScript custom code can be enabled by starting the server with the --allowCodeExecution flag.'\r\n          ).setError(error)\r\n        )\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport const getAllowCodeExecution = () => allowCodeExecution;\r\n\r\nexport const setAllowCodeExecution = (value) => {\r\n  allowCodeExecution = toBoolean(value);\r\n};\r\n\r\n/**\r\n * Starts an exporting process\r\n *\r\n * @param {object} settings - Settings for export.\r\n * @param {function} endCallback - The function to call when exporting is done.\r\n */\r\nexport default {\r\n  batchExport,\r\n  singleExport,\r\n  getAllowCodeExecution,\r\n  setAllowCodeExecution,\r\n  startExport,\r\n  findChartSize\r\n};\r\n","class HttpError extends Error {\r\n  constructor(status, message) {\r\n    super(message);\r\n    this.status = this.statusCode = status;\r\n    this.message = message;\r\n  }\r\n\r\n  setStatus(status) {\r\n    this.status = status;\r\n    return this;\r\n  }\r\n\r\n  setError(error) {\r\n    this.error = error;\r\n    if (error.stack) {\r\n      this.stack = error.stack;\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default HttpError;\r\n","import HttpError from './HttpError.js';\r\n\r\nclass BadRequestError extends HttpError {\r\n  constructor(message, error) {\r\n    super(400, message || 'Bad request');\r\n    if (error) {\r\n      this.stack = error.stack;\r\n    }\r\n  }\r\n}\r\n\r\nexport default BadRequestError;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { getAllowCodeExecution, startExport } from '../../chart.js';\r\nimport { getOptions, mergeConfigOptions } from '../../config.js';\r\nimport { log } from '../../logger.js';\r\nimport {\r\n  fixType,\r\n  isCorrectJSON,\r\n  isObjectEmpty,\r\n  isPrivateRangeUrlFound,\r\n  optionsStringify,\r\n  measureTime\r\n} from '../../utils.js';\r\n\r\nimport BadRequestError from '../../errors/BadRequestError.js';\r\n\r\n// Reversed MIME types\r\nconst reversedMime = {\r\n  png: 'image/png',\r\n  jpeg: 'image/jpeg',\r\n  gif: 'image/gif',\r\n  pdf: 'application/pdf',\r\n  svg: 'image/svg+xml'\r\n};\r\n\r\n// The requests counter\r\nlet requestsCounter = 0;\r\n\r\nconst benchmark = false;\r\n\r\n// The array of callbacks to call before a request\r\nconst beforeRequest = [];\r\n\r\n// The array of callbacks to call after a request\r\nconst afterRequest = [];\r\n\r\n/**\r\n * Calls callbacks.\r\n *\r\n * @param {Array} callbacks - An array of callbacks.\r\n * @param {object} request - The request.\r\n * @param {object} response - The response.\r\n * @param {object} data - The data to send to callbacks.\r\n * @return {object} - The result from a callback.\r\n */\r\nconst doCallbacks = (callbacks, request, response, data) => {\r\n  let result = true;\r\n  const { id, uniqueId, type, body } = data;\r\n\r\n  callbacks.some((callback) => {\r\n    if (callback) {\r\n      let callResponse = callback(request, response, id, uniqueId, type, body);\r\n\r\n      if (callResponse !== undefined && callResponse !== true) {\r\n        result = callResponse;\r\n      }\r\n\r\n      return true;\r\n    }\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Handles an export.\r\n *\r\n * @param {object} request - The request.\r\n * @param {object} response - The response.\r\n */\r\nconst exportHandler = async (request, response, next) => {\r\n  try {\r\n    // Start counting time\r\n    const stopCounter = measureTime();\r\n\r\n    // Get the current server's general options\r\n    const defaultOptions = getOptions();\r\n\r\n    // Init default options\r\n    if (benchmark) {\r\n      console.log('Init default options:', stopCounter(), 'ms.');\r\n    }\r\n\r\n    const body = request.body;\r\n    const id = ++requestsCounter;\r\n    const uniqueId = uuid().replace(/-/g, '');\r\n    let type = fixType(body.type);\r\n\r\n    // Fix type\r\n    if (benchmark) {\r\n      console.log('Fix type:', stopCounter(), 'ms.');\r\n    }\r\n\r\n    // Throw 'Bad Request' if there's no body\r\n    if (!body || isObjectEmpty(body)) {\r\n      throw new BadRequestError(\r\n        'The request body is required. Make sure your Content-Type header is correct (accepted are application/json and multipart/form-data).'\r\n      );\r\n    }\r\n\r\n    // All of the below can be used\r\n    let instr = isCorrectJSON(body.infile || body.options || body.data);\r\n\r\n    // Is correct JSON\r\n    if (benchmark) {\r\n      console.log('Is correct JSON:', stopCounter(), 'ms.');\r\n    }\r\n\r\n    // Throw 'Bad Request' if there's no JSON or SVG to export\r\n    if (!instr && !body.svg) {\r\n      log(\r\n        2,\r\n        `Request ${uniqueId} from ${\r\n          request.headers['x-forwarded-for'] || request.connection.remoteAddress\r\n        } was incorrect. Payload received: ${JSON.stringify(body)}.`\r\n      );\r\n\r\n      throw new BadRequestError(\r\n        \"No correct chart data found. Please make sure you are using application/json or multipart/form-data headers, and that the chart data is in the 'infile', 'options' or 'data' attribute if sending JSON or in the 'svg' if sending SVG.\"\r\n      );\r\n    }\r\n\r\n    let callResponse = false;\r\n\r\n    // Call the before request functions\r\n    callResponse = doCallbacks(beforeRequest, request, response, {\r\n      id,\r\n      uniqueId,\r\n      type,\r\n      body\r\n    });\r\n\r\n    // Do callbacks\r\n    if (benchmark) {\r\n      console.log('Do callbacks:', stopCounter(), 'ms.');\r\n    }\r\n\r\n    // Block the request if one of a callbacks failed\r\n    if (callResponse !== true) {\r\n      return response.send(callResponse);\r\n    }\r\n\r\n    let connectionAborted = false;\r\n\r\n    // In case the connection is closed, force to abort further actions\r\n    request.socket.on('close', () => {\r\n      connectionAborted = true;\r\n    });\r\n\r\n    log(4, `[export] Got an incoming HTTP request ${uniqueId}.`);\r\n\r\n    body.constr = (typeof body.constr === 'string' && body.constr) || 'chart';\r\n\r\n    // Gather and organize options from the payload\r\n    const requestOptions = {\r\n      export: {\r\n        instr,\r\n        type,\r\n        constr: body.constr[0].toLowerCase() + body.constr.substr(1),\r\n        height: body.height,\r\n        width: body.width,\r\n        scale: body.scale || defaultOptions.export.scale,\r\n        globalOptions: isCorrectJSON(body.globalOptions, true),\r\n        themeOptions: isCorrectJSON(body.themeOptions, true)\r\n      },\r\n      customCode: {\r\n        allowCodeExecution: getAllowCodeExecution(),\r\n        allowFileResources: false,\r\n        resources: isCorrectJSON(body.resources, true),\r\n        callback: body.callback,\r\n        customCode: body.customCode\r\n      }\r\n    };\r\n\r\n    // Organize options\r\n    if (benchmark) {\r\n      console.log('Organize options:', stopCounter(), 'ms.');\r\n    }\r\n\r\n    if (instr) {\r\n      // Stringify JSON with options\r\n      requestOptions.export.instr = optionsStringify(\r\n        instr,\r\n        requestOptions.customCode.allowCodeExecution\r\n      );\r\n\r\n      // Stringify JSON with options\r\n      if (benchmark) {\r\n        console.log('Stringify JSON with options:', stopCounter(), 'ms.');\r\n      }\r\n    }\r\n\r\n    // Merge the request options into default ones\r\n    const options = mergeConfigOptions(defaultOptions, requestOptions);\r\n\r\n    // Merge config options\r\n    if (benchmark) {\r\n      console.log('Merge config options:', stopCounter(), 'ms.');\r\n    }\r\n\r\n    // Save the JSON if exists\r\n    options.export.options = instr;\r\n\r\n    // Lastly, add the server specific arguments into options as payload\r\n    options.payload = {\r\n      svg: body.svg || false,\r\n      b64: body.b64 || false,\r\n      dataOptions: isCorrectJSON(body.dataOptions, true),\r\n      noDownload: body.noDownload || false,\r\n      requestId: uniqueId\r\n    };\r\n\r\n    // Setting payload\r\n    if (benchmark) {\r\n      console.log('Setting payload:', stopCounter(), 'ms.');\r\n    }\r\n\r\n    // Test xlink:href elements from payload's SVG\r\n    if (body.svg && isPrivateRangeUrlFound(options.payload.svg)) {\r\n      throw new BadRequestError(\r\n        'SVG potentially contain at least one forbidden URL in xlink:href element.'\r\n      );\r\n    }\r\n\r\n    // Check URL range\r\n    if (benchmark) {\r\n      console.log('Check URL range:', stopCounter(), 'ms.');\r\n    }\r\n\r\n    // Start the export process\r\n    await startExport(options, (info, error) => {\r\n      // Remove the close event from the socket\r\n      request.socket.removeAllListeners('close');\r\n\r\n      // After Puppeteer exporting\r\n      if (benchmark) {\r\n        console.log('After Puppeteer exporting:', stopCounter(), 'ms.', '\\n');\r\n      }\r\n\r\n      // If the connection was closed, do nothing\r\n      if (connectionAborted) {\r\n        return log(\r\n          3,\r\n          `[export] The client closed the connection before the chart was done processing.`\r\n        );\r\n      }\r\n\r\n      // If error, log it and send it to the error middleware\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // If data is missing, log the message and send it to the error middleware\r\n      if (!info || !info.result) {\r\n        throw new BadRequestError(\r\n          `[export] Unexpected return from chart generation, please check your request data: ${uniqueId} is ${info.result}.`\r\n        ).setStatus(400);\r\n      }\r\n\r\n      // Get the type from options\r\n      type = info.options.export.type;\r\n\r\n      // The after request callbacks\r\n      doCallbacks(afterRequest, request, response, { id, body: info.result });\r\n\r\n      if (info.result) {\r\n        // If only base64 is required, return it\r\n        if (body.b64) {\r\n          // SVG Exception for the Highcharts 11.3.0 version\r\n          if (type === 'pdf' || type == 'svg') {\r\n            return response.send(\r\n              Buffer.from(info.result, 'utf8').toString('base64')\r\n            );\r\n          }\r\n\r\n          return response.send(info.result);\r\n        }\r\n\r\n        // Set correct content type\r\n        response.header('Content-Type', reversedMime[type] || 'image/png');\r\n\r\n        // Decide whether to download or not chart file\r\n        if (!body.noDownload) {\r\n          response.attachment(\r\n            `${request.params.filename || request.body.filename || 'chart'}.${\r\n              type || 'png'\r\n            }`\r\n          );\r\n        }\r\n\r\n        // If SVG, return plain content\r\n        return type === 'svg'\r\n          ? response.send(info.result)\r\n          : response.send(Buffer.from(info.result, 'base64'));\r\n      }\r\n    });\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n};\r\n\r\nexport default (app) => {\r\n  app.post('/', exportHandler);\r\n  app.post('/:filename', exportHandler);\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { promises as fsPromises } from 'fs';\r\nimport { posix } from 'path';\r\n\r\nimport bodyParser from 'body-parser';\r\nimport cors from 'cors';\r\nimport express from 'express';\r\nimport http from 'http';\r\nimport https from 'https';\r\nimport multer from 'multer';\r\n\r\nimport errorHandler from './error.js';\r\nimport rateLimit from './rate_limit.js';\r\nimport { log, logWithStack } from '../logger.js';\r\nimport { __dirname } from '../utils.js';\r\n\r\nimport healthRoute from './routes/health.js';\r\nimport exportRoutes from './routes/export.js';\r\nimport vSwitchRoute from './routes/change_hc_version.js';\r\nimport uiRoute from './routes/ui.js';\r\n\r\nimport ExportError from '../errors/ExportError.js';\r\n\r\n// Create express app\r\nconst app = express();\r\n\r\n// Disable the X-Powered-By header\r\napp.disable('x-powered-by');\r\n\r\n// Enable CORS support\r\napp.use(cors());\r\n\r\n// Enable parsing of form data (files) with Multer package\r\nconst storage = multer.memoryStorage();\r\nconst upload = multer({\r\n  storage,\r\n  limits: {\r\n    fieldsSize: '50MB'\r\n  }\r\n});\r\n\r\napp.use(upload.any());\r\n\r\n// Enable body parser\r\napp.use(bodyParser.json({ limit: '50mb' }));\r\napp.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\r\napp.use(bodyParser.urlencoded({ extended: false, limit: '50mb' }));\r\n\r\n////\r\n// /**\r\n//  * Error handler function.\r\n//  *\r\n//  * @param {object} error - An error object.\r\n//  * @return {string} - An error message.\r\n//  */\r\n// const errorHandler = (error) => log(1, `[server] Socket error: ${error}`);\r\n\r\n// /**\r\n//  * Attaches error handlers for a server.\r\n//  *\r\n//  * @param {object} server - The http/https server.\r\n//  */\r\n// const attachErrorHandlers = (server) => {\r\n//   server.on('clientError', errorHandler);\r\n//   server.on('error', errorHandler);\r\n//   server.on('connection', (socket) =>\r\n//     socket.on('error', (error) => errorHandler(error, socket))\r\n//   );\r\n// };\r\n////\r\n\r\nexport const startServer = async (serverConfig) => {\r\n  try {\r\n    // Stop if not enabled\r\n    if (!serverConfig.enable) {\r\n      return false;\r\n    }\r\n\r\n    // Listen HTTP server\r\n    if (!serverConfig.ssl.enable && !serverConfig.ssl.force) {\r\n      // Main server instance (HTTP)\r\n      const httpServer = http.createServer(app);\r\n\r\n      ////\r\n      // // Attach error handlers and listen to the server\r\n      // attachErrorHandlers(httpServer);\r\n      ////\r\n\r\n      // Listen\r\n      httpServer.listen(serverConfig.port, serverConfig.host);\r\n\r\n      log(\r\n        3,\r\n        `[server] Started HTTP server on ${serverConfig.host}:${serverConfig.port}.`\r\n      );\r\n    }\r\n\r\n    // Listen HTTPS server\r\n    if (serverConfig.ssl.enable) {\r\n      // Set up an SSL server also\r\n      let key, cert;\r\n\r\n      try {\r\n        // Get the SSL key\r\n        key = await fsPromises.readFile(\r\n          posix.join(serverConfig.ssl.certPath, 'server.key'),\r\n          'utf8'\r\n        );\r\n\r\n        // Get the SSL certificate\r\n        cert = await fsPromises.readFile(\r\n          posix.join(serverConfig.ssl.certPath, 'server.crt'),\r\n          'utf8'\r\n        );\r\n      } catch (error) {\r\n        logWithStack(\r\n          2,\r\n          error,\r\n          `[server] Unable to load key/certificate from ${serverConfig.ssl.certPath}.`\r\n        );\r\n      }\r\n\r\n      if (key && cert) {\r\n        // Main server instance (HTTPS)\r\n        const httpsServer = https.createServer(app);\r\n\r\n        ////\r\n        // // Attach error handlers and listen to the server\r\n        // attachErrorHandlers(httpsServer);\r\n        ////\r\n\r\n        // Listen\r\n        httpsServer.listen(serverConfig.ssl.port, serverConfig.host);\r\n\r\n        log(\r\n          3,\r\n          `[server] Started HTTPS server on ${serverConfig.host}:${serverConfig.ssl.port}.`\r\n        );\r\n      }\r\n    }\r\n\r\n    // Enable the rate limiter if config says so\r\n    if (\r\n      serverConfig.rateLimiting &&\r\n      serverConfig.rateLimiting.enable &&\r\n      ![0, NaN].includes(serverConfig.rateLimiting.maxRequests)\r\n    ) {\r\n      rateLimit(app, serverConfig.rateLimiting);\r\n    }\r\n\r\n    // Set up static folder's route\r\n    app.use(express.static(posix.join(__dirname, 'public')));\r\n\r\n    // Set up routes\r\n    healthRoute(app);\r\n    exportRoutes(app);\r\n    uiRoute(app);\r\n    vSwitchRoute(app);\r\n\r\n    // Set up centralized error handler\r\n    errorHandler(app);\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[server] Could not configure and start the server.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Returns the express instance.\r\n */\r\nexport const getExpress = () => {\r\n  return express;\r\n};\r\n\r\n/**\r\n * Returns the app instance.\r\n */\r\nexport const getApp = () => {\r\n  return app;\r\n};\r\n\r\n/**\r\n * Adds a middleware to the server.\r\n *\r\n * @param {object} path - An endpoint path to add middlewares to.\r\n * @param {Array} middlewares - An unlimited number of middlewares to use\r\n * against the specific endpoint.\r\n */\r\nexport const use = (path, ...middlewares) => {\r\n  app.use(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Adds a get route to the server.\r\n *\r\n * @param {object} path - An endpoint path to add middlewares to.\r\n * @param {Array} middlewares - An unlimited number of middlewares to use\r\n * against the specific endpoint for GET method.\r\n */\r\nexport const get = (path, ...middlewares) => {\r\n  app.get(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Adds a post route to the server.\r\n *\r\n * @param {object} path - An endpoint path to add middlewares to.\r\n * @param {Array} middlewares - An unlimited number of middlewares to use\r\n * against the specific endpoint for POST method.\r\n */\r\nexport const post = (path, ...middlewares) => {\r\n  app.post(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Forcefully enables rate limiting.\r\n *\r\n * @param {object} limitConfig - The options object for the rate limiter\r\n * configuration.\r\n */\r\nexport const enableRateLimiting = (limitConfig) => {\r\n  return rateLimit(app, limitConfig);\r\n};\r\n\r\nexport default {\r\n  startServer,\r\n  getExpress,\r\n  getApp,\r\n  use,\r\n  get,\r\n  post,\r\n  enableRateLimiting\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { join } from 'path';\r\n\r\nimport { __dirname } from '../../utils.js';\r\n/**\r\n * Adds the / route for a UI when enabled for the export server\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.get('/', (request, response) => {\r\n        response.sendFile(join(__dirname, 'public', 'index.html'));\r\n      });\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport cache from '../../cache.js';\r\n\r\n/**\r\n * Adds a route that can be used to change the HC version on the server\r\n * TODO: Add auth token and connect to API\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.post('/change_hc_version/:newVersion', async (request, response) => {\r\n        const ctoken = process.env.HIGHCHARTS_ADMIN_TOKEN;\r\n\r\n        if (!ctoken || !ctoken.length) {\r\n          return response.send({\r\n            error: true,\r\n            message:\r\n              'Server not configured to do run-time version changes: HIGHCHARTS_ADMIN_TOKEN not set.'\r\n          });\r\n        }\r\n\r\n        const token = request.get('hc-auth');\r\n        if (!token || token !== ctoken) {\r\n          return response.send({\r\n            error: true,\r\n            message:\r\n              'Invalid or missing token: set token in the hc-auth header.'\r\n          });\r\n        }\r\n\r\n        const newVersion = request.params.newVersion;\r\n        if (newVersion) {\r\n          try {\r\n            // eslint-disable-next-line import/no-named-as-default-member\r\n            await cache.updateVersion(newVersion);\r\n          } catch (error) {\r\n            response.send({\r\n              error: true,\r\n              message: error\r\n            });\r\n          }\r\n\r\n          response.send({\r\n            version: cache.version()\r\n          });\r\n        } else {\r\n          response.send({\r\n            error: true,\r\n            message: 'No new version supplied.'\r\n          });\r\n        }\r\n      });\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// Add the main directory in the global object\r\nimport 'colors';\r\n\r\nimport server, { startServer } from './server/server.js';\r\nimport {\r\n  setAllowCodeExecution,\r\n  batchExport,\r\n  singleExport,\r\n  startExport\r\n} from './chart.js';\r\nimport { mapToNewConfig, setOptions } from './config.js';\r\nimport { log, logWithStack, setLogLevel, enableFileLogging } from './logger.js';\r\nimport { killPool, init } from './pool.js';\r\nimport { checkCache } from './cache.js';\r\n\r\nexport default {\r\n  log,\r\n  logWithStack,\r\n  mapToNewConfig,\r\n  setOptions,\r\n  singleExport,\r\n  startExport,\r\n  batchExport,\r\n  server,\r\n  startServer,\r\n  killPool,\r\n  initPool: async (options = {}) => {\r\n    // Set the allowCodeExecution per export module scope\r\n    setAllowCodeExecution(\r\n      options.customCode && options.customCode.allowCodeExecution\r\n    );\r\n\r\n    // Set the log level\r\n    setLogLevel(options.logging && parseInt(options.logging.level));\r\n\r\n    // Set the log file path and name\r\n    if (options.logging && options.logging.dest) {\r\n      enableFileLogging(\r\n        options.logging.dest,\r\n        options.logging.file || 'highcharts-export-server.log'\r\n      );\r\n    }\r\n\r\n    // Check if cache needs to be updated\r\n    await checkCache(options.highcharts || { version: 'latest' });\r\n\r\n    // Init the pool\r\n    await init({\r\n      pool: options.pool || {\r\n        minWorkers: 1,\r\n        maxWorkers: 1\r\n      },\r\n      puppeteerArgs: options.puppeteer?.args || []\r\n    });\r\n\r\n    // Return updated options\r\n    return options;\r\n  }\r\n};\r\n"],"names":["dotenv","config","defaultConfig","puppeteer","args","value","type","description","highcharts","version","envLink","cdnURL","coreScripts","modules","indicators","scripts","forceFetch","export","infile","instr","options","outfile","constr","defaultHeight","defaultWidth","defaultScale","height","width","scale","globalOptions","themeOptions","batch","rasterizationTimeout","customCode","allowCodeExecution","allowFileResources","callback","resources","loadConfig","createConfig","server","enable","cliName","host","port","ssl","force","certPath","rateLimiting","maxRequests","window","delay","trustProxy","skipKey","skipToken","pool","minWorkers","maxWorkers","workLimit","acquireTimeout","createTimeout","destroyTimeout","idleTimeout","createRetryInterval","reaperInterval","benchmarking","listenToProcessExits","logging","level","file","dest","ui","route","other","noLogo","payload","join","absoluteProps","nestedArgs","createNestedArgs","obj","propChain","Object","keys","forEach","k","includes","entry","substring","colors","toConsole","toFile","pathCreated","levelsDesc","title","color","listeners","key","option","entries","logToFile","texts","prefix","existsSync","mkdirSync","appendFile","concat","error","console","log","newLevel","length","Date","toString","split","trim","fn","apply","undefined","logWithStack","customMessage","name","message","stackMessage","stack","logErrorMiddleware","req","res","next","process","env","NODE_ENV","returnErrorMiddleware","statusCode","stCode","status","json","rateLimit","app","limitConfig","msg","rateOptions","max","limiter","windowMs","delayMs","handler","request","response","format","send","default","skip","query","access_token","use","__dirname","fileURLToPath","URL","url","fixType","formats","outType","pop","find","t","handleResources","allowedProps","handledResources","correctResources","endsWith","isCorrectJSON","readFileSync","notice","files","propName","map","item","data","parsedData","JSON","parse","stringify","deepCopy","copy","Array","isArray","prototype","hasOwnProperty","call","optionsStringify","allowFunctions","startsWith","replaceAll","printUsage","bold","yellow","cycleCategories","descName","green","i","blue","category","toUpperCase","red","toBoolean","wrapAround","replace","async","fetch","requestOptions","Promise","resolve","reject","protocol","https","http","getProtocol","get","on","chunk","text","ExportError","Error","constructor","super","this","setError","cachePath","cache","activeManifest","sources","hcVersion","appliedConfig","extractVersion","substr","indexOf","fetchScript","script","proxyAgent","agent","timeout","updateCache","sourcePath","customScripts","allScripts","c","m","proxyHost","proxyPort","HttpsProxyAgent","fetchedModules","all","writeFileSync","checkCache","manifestPath","requestUpdate","manifest","moduleMap","numberOfModules","some","moduleName","newManifest","saveConfigToManifest","cache$1","newVersion","assign","RANDOM_PID","randomBytes","PUPPETEER_DIR","path","minimalArgs","template","fs","browser","setPageContent","page","setContent","addScriptTag","evaluate","setupHighcharts","err","$eval","element","errorMessage","_displayErrors","innerHTML","newPage","setCacheEnabled","clearPage","hardReset","goto","body","close","connected","__basedir","setAsConfig","chart","triggerExport","puppeteerExport","injectedResources","clearInjected","dispose","scriptsToRemove","document","getElementsByTagName","stylesToRemove","linksToRemove","remove","exportBench","exportOptions","requestAnimationFrame","displayErrors","debugger","d","svgBench","isSVG","setPageBench","svgTemplate","strInj","setContentBench","resBench","js","push","content","isLocal","cssBench","css","cssImports","match","cssImportPath","addStyleTag","size","chartHeight","baseVal","chartWidth","parseFloat","Highcharts","charts","vpBench","viewportHeight","Math","ceil","viewportWidth","setViewport","deviceScaleFactor","zoomCallback","style","zoom","margin","x","y","getBoundingClientRect","trunc","getClipRegion","round","expBenchmark","outerHTML","createSVG","encoding","clip","race","screenshot","omitBackground","_resolve","setTimeout","createImage","pdf","createPDF","oldCharts","oldChart","destroy","shift","puppeteerArgs","performedExports","exportAttempts","timeSpent","droppedExports","spentAverage","poolConfig","factory","create","id","uuid","s","getTime","browserNewPage","isClosed","workCount","random","validate","workerHandle","logLevel","init","allArgs","tryCount","open","launch","headless","userDataDir","createBrowser","killPool","code","exit","parseInt","Pool","min","acquireTimeoutMillis","createTimeoutMillis","destroyTimeoutMillis","idleTimeoutMillis","createRetryIntervalMillis","reapIntervalMillis","propagateCreateError","eventId","resource","initialResources","acquire","promise","release","destroyed","postWork","getPoolInfo","workStart","result","exportTime","available","borrowed","pending","spareResourceCapacity","pool$1","pkgFile","pather","serverStartTime","generalOptions","getOptions","mergeConfigOptions","newOptions","mergedOptions","updateDefaultConfig","configObj","customObj","customValue","numEnvVal","el","initOptions","items","startExport","settings","endCallback","svg","initExportSettings","exportAsString","doStraightInject","doExport","findChartSize","exporting","precision","multiplier","pow","roundNumber","sourceHeight","sourceWidth","param","chartJson","customCodeOptions","allowCodeExecutionScoped","enabled","optionsName","requestId","stringToExport","chartJSON","HttpError","setStatus","BadRequestError","reversedMime","png","jpeg","gif","requestsCounter","benchmark","beforeRequest","afterRequest","doCallbacks","callbacks","uniqueId","callResponse","exportHandler","start","hrtime","bigint","measureTime","defaultOptions","headers","connection","remoteAddress","connectionAborted","socket","toLowerCase","b64","dataOptions","noDownload","ipRegEx","isPrivateRangeUrlFound","info","removeAllListeners","Buffer","from","header","attachment","params","filename","express","disable","cors","storage","multer","memoryStorage","upload","limits","fieldsSize","any","bodyParser","limit","urlencoded","extended","startServer","serverConfig","createServer","listen","cert","fsPromises","readFile","posix","NaN","static","bootTime","uptime","floor","highchartsVersion","averageProcessingTime","failedExports","sucessRatio","healthRoute","post","exportRoutes","sendFile","uiRoute","ctoken","HIGHCHARTS_ADMIN_TOKEN","token","vSwitchRoute","errorHandler","getExpress","getApp","middlewares","enableRateLimiting","index","mapToNewConfig","oldOptions","propertiesChain","reduce","prop","setOptions","userOptions","configIndex","findIndex","arg","fileName","loadConfigFile","pairArgumentValue","singleExport","batchExport","batchFunctions","pair","then","catch","initPool","logDest","logFile","enableFileLogging"],"mappings":"wmBAiBAA,EAAOC,SAIA,MAAMC,EAAgB,CAC3BC,UAAW,CACTC,KAAM,CACJC,MAAO,GACPC,KAAM,WACNC,YAAa,6CAGjBC,WAAY,CACVC,QAAS,CACPJ,MAAO,SACPK,QAAS,qBACTJ,KAAM,SACNC,YAAa,8BAEfI,OAAQ,CACNN,MAAO,+BACPK,QAAS,iBACTJ,KAAM,SACNC,YAAa,6CAEfK,YAAa,CACXF,QAAS,0BACTL,MAAO,CAAC,aAAc,kBAAmB,iBACzCC,KAAM,WACNC,YAAa,qCAEfM,QAAS,CACPH,QAAS,qBACTL,MAAO,CACL,QACA,MACA,QACA,YACA,cACA,uBACA,gBACA,uBACA,eACA,QACA,OACA,mBACA,eACA,cACA,UACA,UACA,WACA,UACA,YACA,cACA,YACA,sBACA,SACA,SACA,WACA,YACA,eACA,SACA,eACA,YACA,kBACA,SACA,cACA,mBACA,eACA,cACA,eACA,cACA,cACA,WACA,eACA,WACA,SACA,OACA,WACA,YACA,SACA,qBACA,aACA,WACA,WACA,WACA,WACA,eACA,UACA,kBACA,oBACA,cAEFC,KAAM,WACNC,YAAa,gCAEfO,WAAY,CACVJ,QAAS,wBACTL,MAAO,CAAC,kBACRC,KAAM,WACNC,YAAa,mCAEfQ,QAAS,CACPV,MAAO,CACL,wEACA,kGAEFC,KAAM,WACNC,YACE,qEAEJS,WAAY,CACVN,QAAS,yBACTL,OAAO,EACPC,KAAM,UACNC,YACE,oEAGNU,OAAQ,CACNC,OAAQ,CACNb,OAAO,EACPC,KAAM,SACNC,YACE,8FAEJY,MAAO,CACLd,OAAO,EACPC,KAAM,SACNC,YACE,iFAEJa,QAAS,CACPf,OAAO,EACPC,KAAM,SACNC,YAAa,oCAEfc,QAAS,CACPhB,OAAO,EACPC,KAAM,SACNC,YACE,2FAEJD,KAAM,CACJI,QAAS,sBACTL,MAAO,MACPC,KAAM,SACNC,YACE,sEAEJe,OAAQ,CACNZ,QAAS,wBACTL,MAAO,QACPC,KAAM,SACNC,YACE,6EAEJgB,cAAe,CACbb,QAAS,wBACTL,MAAO,IACPC,KAAM,SACNC,YACE,gFAEJiB,aAA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"}