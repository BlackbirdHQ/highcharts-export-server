{"version":3,"file":"index.esm.js","sources":["../lib/fetch.js","../lib/schemas/config.js","../lib/logger.js","../lib/utils.js","../lib/errors/ExportError.js","../lib/cache.js","../lib/config.js","../lib/browser.js","../lib/export.js","../templates/svg_export/svg_export.js","../lib/pool.js","../lib/chart.js","../lib/server/error.js","../lib/server/rate_limit.js","../lib/errors/HttpError.js","../lib/errors/BadRequestError.js","../lib/server/routes/export.js","../lib/server/routes/health.js","../lib/server/server.js","../lib/server/routes/ui.js","../lib/server/routes/change_hc_version.js","../lib/index.js"],"sourcesContent":["/**\r\n * This module exports two functions: fetch (for GET requests) and post (for POST requests).\r\n */\r\n\r\nimport http from 'http';\r\nimport https from 'https';\r\n\r\n/**\r\n * Returns the HTTP or HTTPS protocol module based on the provided URL.\r\n *\r\n * @param {string} url - The URL to determine the protocol.\r\n *\r\n * @returns {Object} The HTTP or HTTPS protocol module (http or https).\r\n */\r\nconst getProtocol = (url) => (url.startsWith('https') ? https : http);\r\n\r\n/**\r\n * Fetches data from the specified URL using either HTTP or HTTPS protocol.\r\n *\r\n * @param {string} url - The URL to fetch data from.\r\n * @param {Object} requestOptions - Options for the HTTP request (optional).\r\n *\r\n * @returns {Promise<Object>} Promise resolving to the HTTP response object\r\n * with added 'text' property or rejecting with an error.\r\n */\r\nasync function fetch(url, requestOptions = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const protocol = getProtocol(url);\r\n\r\n    protocol\r\n      .get(url, requestOptions, (res) => {\r\n        let data = '';\r\n\r\n        // A chunk of data has been received.\r\n        res.on('data', (chunk) => {\r\n          data += chunk;\r\n        });\r\n\r\n        // The whole response has been received.\r\n        res.on('end', () => {\r\n          if (!data) {\r\n            reject('Nothing was fetched from the URL.');\r\n          }\r\n\r\n          res.text = data;\r\n          resolve(res);\r\n        });\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\n/**\r\n * Sends a POST request to the specified URL with the provided JSON body using\r\n * either HTTP or HTTPS protocol.\r\n *\r\n * @param {string} url - The URL to send the POST request to.\r\n * @param {Object} body - The JSON body to include in the POST request\r\n * (optional, default is an empty object).\r\n * @param {Object} requestOptions - Options for the HTTP request (optional).\r\n *\r\n * @returns {Promise<Object>} Promise resolving to the HTTP response object with\r\n * added 'text' property or rejecting with an error.\r\n */\r\nasync function post(url, body = {}, requestOptions = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const protocol = getProtocol(url);\r\n    const data = JSON.stringify(body);\r\n\r\n    // Set default headers and merge with requestOptions\r\n    const options = Object.assign(\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Content-Length': data.length\r\n        }\r\n      },\r\n      requestOptions\r\n    );\r\n\r\n    const req = protocol\r\n      .request(url, options, (res) => {\r\n        let responseData = '';\r\n\r\n        // A chunk of data has been received.\r\n        res.on('data', (chunk) => {\r\n          responseData += chunk;\r\n        });\r\n\r\n        // The whole response has been received.\r\n        res.on('end', () => {\r\n          try {\r\n            res.text = responseData;\r\n            resolve(res);\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        });\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error);\r\n      });\r\n\r\n    // Write the request body and end the request.\r\n    req.write(data);\r\n    req.end();\r\n  });\r\n}\r\n\r\nexport default fetch;\r\nexport { fetch, post };\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// Load .env into environment variables\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\n// This is the configuration object with all options and their default values,\r\n// also from the .env file if one exists\r\nexport const defaultConfig = {\r\n  puppeteer: {\r\n    args: {\r\n      value: [],\r\n      type: 'string[]',\r\n      description: 'Array of arguments to send to puppeteer.'\r\n    }\r\n  },\r\n  highcharts: {\r\n    version: {\r\n      value: 'latest',\r\n      envLink: 'HIGHCHARTS_VERSION',\r\n      type: 'string',\r\n      description: 'Highcharts version to use.'\r\n    },\r\n    cdnURL: {\r\n      value: 'https://code.highcharts.com/',\r\n      envLink: 'HIGHCHARTS_CDN_URL',\r\n      type: 'string',\r\n      description: 'Highcharts CDN URL of scripts to be used'\r\n    },\r\n    coreScripts: {\r\n      envLink: 'HIGHCHARTS_CORE_SCRIPTS',\r\n      value: ['highcharts', 'highcharts-more', 'highcharts-3d'],\r\n      type: 'string[]',\r\n      description: 'Highcharts core scripts to fetch.'\r\n    },\r\n    modules: {\r\n      envLink: 'HIGHCHARTS_MODULES',\r\n      value: [\r\n        'stock',\r\n        'map',\r\n        'gantt',\r\n        'exporting',\r\n        'export-data',\r\n        'parallel-coordinates',\r\n        'accessibility',\r\n        'annotations-advanced',\r\n        'boost-canvas',\r\n        'boost',\r\n        'data',\r\n        'data-tools',\r\n        'draggable-points',\r\n        'static-scale',\r\n        'broken-axis',\r\n        'heatmap',\r\n        'tilemap',\r\n        'tiledwebmap',\r\n        'timeline',\r\n        'treemap',\r\n        'treegraph',\r\n        'item-series',\r\n        'drilldown',\r\n        'histogram-bellcurve',\r\n        'bullet',\r\n        'funnel',\r\n        'funnel3d',\r\n        'geoheatmap',\r\n        'pyramid3d',\r\n        'networkgraph',\r\n        'overlapping-datalabels',\r\n        'pareto',\r\n        'pattern-fill',\r\n        'pictorial',\r\n        'price-indicator',\r\n        'sankey',\r\n        'arc-diagram',\r\n        'dependency-wheel',\r\n        'series-label',\r\n        'solid-gauge',\r\n        'sonification',\r\n        'stock-tools',\r\n        'streamgraph',\r\n        'sunburst',\r\n        'variable-pie',\r\n        'variwide',\r\n        'vector',\r\n        'venn',\r\n        'windbarb',\r\n        'wordcloud',\r\n        'xrange',\r\n        'no-data-to-display',\r\n        'drag-panes',\r\n        'debugger',\r\n        'dumbbell',\r\n        'lollipop',\r\n        'cylinder',\r\n        'organization',\r\n        'dotplot',\r\n        'marker-clusters',\r\n        'hollowcandlestick',\r\n        'heikinashi',\r\n        'flowmap'\r\n      ],\r\n      type: 'string[]',\r\n      description: 'Highcharts modules to fetch.'\r\n    },\r\n    indicators: {\r\n      envLink: 'HIGHCHARTS_INDICATORS',\r\n      value: ['indicators-all'],\r\n      type: 'string[]',\r\n      description: 'Highcharts indicators to fetch.'\r\n    },\r\n    scripts: {\r\n      value: [\r\n        'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js',\r\n        'https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js'\r\n      ],\r\n      type: 'string[]',\r\n      description:\r\n        'Additional direct scripts/optional dependencies (e.g. moment.js).'\r\n    },\r\n    forceFetch: {\r\n      envLink: 'HIGHCHARTS_FORCE_FETCH',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'The flag that determines whether to refetch all scripts after each server rerun.'\r\n    }\r\n  },\r\n  export: {\r\n    infile: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'The input file should include a name and a type (json or svg) and must be a correctly formatted JSON or SVG file.'\r\n    },\r\n    instr: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'An input in a form of a stringified JSON or SVG file. Overrides the --infile.'\r\n    },\r\n    options: {\r\n      value: false,\r\n      type: 'string',\r\n      description: 'An alias for the --instr option.'\r\n    },\r\n    outfile: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'The output filename, accompanied by a type (jpeg, png, pdf, or svg). Ignores the --type flag.'\r\n    },\r\n    type: {\r\n      envLink: 'EXPORT_TYPE',\r\n      value: 'png',\r\n      type: 'string',\r\n      description:\r\n        'The format of the file to export to. Can be jpeg, png, pdf or svg.'\r\n    },\r\n    constr: {\r\n      envLink: 'EXPORT_CONSTR',\r\n      value: 'chart',\r\n      type: 'string',\r\n      description:\r\n        'The constructor to use. Can be chart, stockChart, mapChart or ganttChart.'\r\n    },\r\n    defaultHeight: {\r\n      envLink: 'EXPORT_DEFAULT_HEIGHT',\r\n      value: 400,\r\n      type: 'number',\r\n      description:\r\n        'The default height of the exported chart. Used when not found any value set.'\r\n    },\r\n    defaultWidth: {\r\n      envLink: 'EXPORT_DEFAULT_WIDTH',\r\n      value: 600,\r\n      type: 'number',\r\n      description:\r\n        'The default width of the exported chart. Used when not found any value set.'\r\n    },\r\n    defaultScale: {\r\n      envLink: 'EXPORT_DEFAULT_SCALE',\r\n      value: 1,\r\n      type: 'number',\r\n      description:\r\n        'The default scale of the exported chart. Ranges between 0.1 and 5.'\r\n    },\r\n    height: {\r\n      type: 'number',\r\n      value: false,\r\n      description:\r\n        'The height of the exported chart. Overrides the option in the chart settings.'\r\n    },\r\n    width: {\r\n      type: 'number',\r\n      value: false,\r\n      description:\r\n        'The width of the exported chart. Overrides the option in the chart settings.'\r\n    },\r\n    scale: {\r\n      value: false,\r\n      type: 'number',\r\n      description:\r\n        'The scale of the exported chart. Ranges between 0.1 and 5.0.'\r\n    },\r\n    globalOptions: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Either a stringified JSON or a filename containing options to be passed into the Highcharts.setOptions.'\r\n    },\r\n    themeOptions: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Either a stringified JSON or a filename containing theme options to be passed into the Highcharts.setOptions.'\r\n    },\r\n    batch: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Initiates a batch job with a string containing input/output pairs: \"in=out;in=out;..\".'\r\n    },\r\n    rasterizationTimeout: {\r\n      envLink: 'EXPORT_RASTERIZATION_TIMEOUT',\r\n      value: 1500,\r\n      type: 'number',\r\n      description:\r\n        'The specified duration, in milliseconds, to wait for rendering a webpage.'\r\n    }\r\n  },\r\n  customCode: {\r\n    allowCodeExecution: {\r\n      envLink: 'CUSTOM_CODE_ALLOW_CODE_EXECUTION',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'Controls whether the execution of arbitrary code is allowed during the exporting process.'\r\n    },\r\n    allowFileResources: {\r\n      envLink: 'CUSTOM_CODE_ALLOW_FILE_RESOURCES',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'Controls the ability to inject resources from the filesystem. This setting has no effect when running as a server.'\r\n    },\r\n    customCode: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Custom code to execute before chart initialization. It can be a function, code wrapped within a function, or a filename with the .js extension.'\r\n    },\r\n    callback: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'JavaScript code to run during construction. It can be a function or a filename with the .js extension.'\r\n    },\r\n    resources: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'An additional resource in the form of a stringified JSON. It may contain files, js, and css sections.'\r\n    },\r\n    loadConfig: {\r\n      value: false,\r\n      type: 'string',\r\n      legacyName: 'fromFile',\r\n      description: 'A file containing a pre-defined configuration to use.'\r\n    },\r\n    createConfig: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Enables setting options through a prompt and saving them in a provided config file.'\r\n    }\r\n  },\r\n  server: {\r\n    enable: {\r\n      envLink: 'SERVER_ENABLE',\r\n      value: false,\r\n      type: 'boolean',\r\n      cliName: 'enableServer',\r\n      description: 'If set to true, the server starts on 0.0.0.0.'\r\n    },\r\n    host: {\r\n      envLink: 'SERVER_HOST',\r\n      value: '0.0.0.0',\r\n      type: 'string',\r\n      description:\r\n        'The hostname of the server. Additionally, it starts a server listening on the provided hostname.'\r\n    },\r\n    port: {\r\n      envLink: 'SERVER_PORT',\r\n      value: 7801,\r\n      type: 'number',\r\n      description: 'The port to be used for the server when enabled.'\r\n    },\r\n    ssl: {\r\n      enable: {\r\n        envLink: 'SERVER_SSL_ENABLE',\r\n        value: false,\r\n        type: 'boolean',\r\n        cliName: 'enableSsl',\r\n        description: 'Enables or disables the SSL protocol.'\r\n      },\r\n      force: {\r\n        envLink: 'SERVER_SSL_FORCE',\r\n        value: false,\r\n        type: 'boolean',\r\n        cliName: 'sslForced',\r\n        legacyName: 'sslOnly',\r\n        description:\r\n          'If set to true, the server is forced to serve only over HTTPS.'\r\n      },\r\n      port: {\r\n        envLink: 'SERVER_SSL_PORT',\r\n        value: 443,\r\n        type: 'number',\r\n        cliName: 'sslPort',\r\n        description: 'The port on which to run the SSL server.'\r\n      },\r\n      certPath: {\r\n        envLink: 'SERVER_SSL_CERT_PATH',\r\n        value: '',\r\n        type: 'string',\r\n        legacyName: 'sslPath',\r\n        description: 'The path to the SSL certificate/key file.'\r\n      }\r\n    },\r\n    rateLimiting: {\r\n      enable: {\r\n        envLink: 'SERVER_RATE_LIMITING_ENABLE',\r\n        value: false,\r\n        type: 'boolean',\r\n        cliName: 'enableRateLimiting',\r\n        description: 'Enables rate limiting for the server.'\r\n      },\r\n      maxRequests: {\r\n        envLink: 'SERVER_RATE_LIMITING_MAX_REQUESTS',\r\n        value: 10,\r\n        type: 'number',\r\n        legacyName: 'rateLimit',\r\n        description: 'The maximum number of requests allowed in one minute.'\r\n      },\r\n      window: {\r\n        envLink: 'SERVER_RATE_LIMITING_WINDOW',\r\n        value: 1,\r\n        type: 'number',\r\n        description: 'The time window, in minutes, for the rate limiting.'\r\n      },\r\n      delay: {\r\n        envLink: 'SERVER_RATE_LIMITING_DELAY',\r\n        value: 0,\r\n        type: 'number',\r\n        description:\r\n          'The delay duration for each successive request before reaching the maximum limit.'\r\n      },\r\n      trustProxy: {\r\n        envLink: 'SERVER_RATE_LIMITING_TRUST_PROXY',\r\n        value: false,\r\n        type: 'boolean',\r\n        description: 'Set this to true if the server is behind a load balancer.'\r\n      },\r\n      skipKey: {\r\n        envLink: 'SERVER_RATE_LIMITING_SKIP_KEY',\r\n        value: '',\r\n        type: 'number|string',\r\n        description:\r\n          'Allows bypassing the rate limiter and should be provided with the skipToken argument.'\r\n      },\r\n      skipToken: {\r\n        envLink: 'SERVER_RATE_LIMITING_SKIP_TOKEN',\r\n        value: '',\r\n        type: 'number|string',\r\n        description:\r\n          'Allows bypassing the rate limiter and should be provided with the skipKey argument.'\r\n      }\r\n    }\r\n  },\r\n  pool: {\r\n    minWorkers: {\r\n      envLink: 'POOL_MIN_WORKERS',\r\n      value: 4,\r\n      type: 'number',\r\n      description: 'The number of minimum and initial pool workers to spawn.'\r\n    },\r\n    maxWorkers: {\r\n      envLink: 'POOL_MAX_WORKERS',\r\n      value: 8,\r\n      type: 'number',\r\n      legacyName: 'workers',\r\n      description: 'The number of maximum pool workers to spawn.'\r\n    },\r\n    workLimit: {\r\n      envLink: 'POOL_WORK_LIMIT',\r\n      value: 40,\r\n      type: 'number',\r\n      description:\r\n        'The number of work pieces that can be performed before restarting the worker process.'\r\n    },\r\n    acquireTimeout: {\r\n      envLink: 'POOL_ACQUIRE_TIMEOUT',\r\n      value: 5000,\r\n      type: 'number',\r\n      description:\r\n        'The duration, in milliseconds, to wait for acquiring a resource.'\r\n    },\r\n    createTimeout: {\r\n      envLink: 'POOL_CREATE_TIMEOUT',\r\n      value: 5000,\r\n      type: 'number',\r\n      description:\r\n        'The duration, in milliseconds, to wait for creating a resource.'\r\n    },\r\n    destroyTimeout: {\r\n      envLink: 'POOL_DESTROY_TIMEOUT',\r\n      value: 5000,\r\n      type: 'number',\r\n      description:\r\n        'The duration, in milliseconds, to wait for destroying a resource.'\r\n    },\r\n    idleTimeout: {\r\n      envLink: 'POOL_IDLE_TIMEOUT',\r\n      value: 30000,\r\n      type: 'number',\r\n      description:\r\n        'The duration, in milliseconds, after which an idle resource is destroyed.'\r\n    },\r\n    createRetryInterval: {\r\n      envLink: 'POOL_CREATE_RETRY_INTERVAL',\r\n      value: 200,\r\n      type: 'number',\r\n      description:\r\n        'The duration, in milliseconds, to wait before retrying the create process in case of a failure.'\r\n    },\r\n    reaperInterval: {\r\n      envLink: 'POOL_REAPER_INTERVAL',\r\n      value: 1000,\r\n      type: 'number',\r\n      description:\r\n        'The duration, in milliseconds, after which the check for idle resources to destroy is triggered.'\r\n    },\r\n    benchmarking: {\r\n      envLink: 'POOL_BENCHMARKING',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'Indicate whether to show statistics for the pool of resources or not.'\r\n    },\r\n    listenToProcessExits: {\r\n      envLink: 'POOL_LISTEN_TO_PROCESS_EXITS',\r\n      value: true,\r\n      type: 'boolean',\r\n      description: 'Decides whether or not to attach process.exit handlers.'\r\n    }\r\n  },\r\n  logging: {\r\n    level: {\r\n      envLink: 'LOGGING_LEVEL',\r\n      value: 4,\r\n      type: 'number',\r\n      cliName: 'logLevel',\r\n      description: 'The logging level to be used.'\r\n    },\r\n    file: {\r\n      envLink: 'LOGGING_FILE',\r\n      value: 'highcharts-export-server.log',\r\n      type: 'string',\r\n      cliName: 'logFile',\r\n      description:\r\n        'The name of a log file. The logDest option also needs to be set to enable file logging.'\r\n    },\r\n    dest: {\r\n      envLink: 'LOGGING_DEST',\r\n      value: 'log/',\r\n      type: 'string',\r\n      cliName: 'logDest',\r\n      description:\r\n        'The path to store log files. This also enables file logging.'\r\n    }\r\n  },\r\n  ui: {\r\n    enable: {\r\n      envLink: 'UI_ENABLE',\r\n      value: false,\r\n      type: 'boolean',\r\n      cliName: 'enableUi',\r\n      description:\r\n        'Enables or disables the user interface (UI) for the export server.'\r\n    },\r\n    route: {\r\n      envLink: 'UI_ROUTE',\r\n      value: '/',\r\n      type: 'string',\r\n      cliName: 'uiRoute',\r\n      description:\r\n        'The endpoint route to which the user interface (UI) should be attached.'\r\n    }\r\n  },\r\n  other: {\r\n    noLogo: {\r\n      envLink: 'OTHER_NO_LOGO',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'Skip printing the logo on a startup. Will be replaced by a simple text.'\r\n    }\r\n  },\r\n  payload: {}\r\n};\r\n\r\n// The config descriptions object for the prompts functionality. It contains\r\n// information like:\r\n// * Type of a prompt\r\n// * Name of an option\r\n// * Short description of a chosen option\r\n// * Initial value\r\nexport const promptsConfig = {\r\n  puppeteer: [\r\n    {\r\n      type: 'list',\r\n      name: 'args',\r\n      message: 'Puppeteer arguments',\r\n      initial: defaultConfig.puppeteer.args.value.join(','),\r\n      separator: ','\r\n    }\r\n  ],\r\n  highcharts: [\r\n    {\r\n      type: 'text',\r\n      name: 'version',\r\n      message: 'Highcharts version',\r\n      initial: defaultConfig.highcharts.version.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'cdnURL',\r\n      message: 'The url of CDN',\r\n      initial: defaultConfig.highcharts.cdnURL.value\r\n    },\r\n    {\r\n      type: 'multiselect',\r\n      name: 'modules',\r\n      message: 'Available modules',\r\n      instructions: 'Space: Select specific, A: Select all, Enter: Confirm.',\r\n      choices: defaultConfig.highcharts.modules.value\r\n    },\r\n    {\r\n      type: 'list',\r\n      name: 'scripts',\r\n      message: 'Custom scripts',\r\n      initial: defaultConfig.highcharts.scripts.value.join(','),\r\n      separator: ','\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'forceFetch',\r\n      message: 'Should refetch all the scripts after each server rerun',\r\n      initial: defaultConfig.highcharts.forceFetch.value\r\n    }\r\n  ],\r\n  export: [\r\n    {\r\n      type: 'select',\r\n      name: 'type',\r\n      message: 'The default type of a file to export to',\r\n      hint: `Default: ${defaultConfig.export.type.value}`,\r\n      initial: 0,\r\n      choices: ['png', 'jpeg', 'pdf', 'svg']\r\n    },\r\n    {\r\n      type: 'select',\r\n      name: 'constr',\r\n      message: 'The default constructor for Highcharts to use',\r\n      hint: `Default: ${defaultConfig.export.constr.value}`,\r\n      initial: 0,\r\n      choices: ['chart', 'stockChart', 'mapChart', 'ganttChart']\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultHeight',\r\n      message: 'The default fallback height of the exported chart',\r\n      initial: defaultConfig.export.defaultHeight.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultWidth',\r\n      message: 'The default fallback width of the exported chart',\r\n      initial: defaultConfig.export.defaultWidth.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultScale',\r\n      message: 'The default fallback scale of the exported chart',\r\n      initial: defaultConfig.export.defaultScale.value,\r\n      min: 0.1,\r\n      max: 5\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rasterizationTimeout',\r\n      message: 'The number of milliseconds to wait for rendering a webpage',\r\n      initial: defaultConfig.export.rasterizationTimeout.value\r\n    }\r\n  ],\r\n  customCode: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'allowCodeExecution',\r\n      message: 'Allow to execute custom code',\r\n      initial: defaultConfig.customCode.allowCodeExecution.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'allowFileResources',\r\n      message: 'Allow file resources',\r\n      initial: defaultConfig.customCode.allowFileResources.value\r\n    }\r\n  ],\r\n  server: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'enable',\r\n      message: 'Starts a server on 0.0.0.0',\r\n      initial: defaultConfig.server.enable.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'host',\r\n      message: 'A hostname of a server',\r\n      initial: defaultConfig.server.host.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'port',\r\n      message: 'A port of a server',\r\n      initial: defaultConfig.server.port.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'ssl.enable',\r\n      message: 'Enable SSL protocol',\r\n      initial: defaultConfig.server.ssl.enable.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'ssl.force',\r\n      message: 'Force to only serve over HTTPS',\r\n      initial: defaultConfig.server.ssl.force.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'ssl.port',\r\n      message: 'Port on which to run the SSL server',\r\n      initial: defaultConfig.server.ssl.port.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'ssl.certPath',\r\n      message: 'A path where to find the SSL certificate/key',\r\n      initial: defaultConfig.server.ssl.certPath.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'rateLimiting.enable',\r\n      message: 'Enable rate limiting',\r\n      initial: defaultConfig.server.rateLimiting.enable.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.maxRequests',\r\n      message: 'Max requests allowed in a one minute',\r\n      initial: defaultConfig.server.rateLimiting.maxRequests.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.window',\r\n      message: 'The time window in minutes for rate limiting',\r\n      initial: defaultConfig.server.rateLimiting.window.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.delay',\r\n      message:\r\n        'The amount to delay each successive request before hitting the max',\r\n      initial: defaultConfig.server.rateLimiting.delay.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'rateLimiting.trustProxy',\r\n      message: 'Set this to true if behind a load balancer',\r\n      initial: defaultConfig.server.rateLimiting.trustProxy.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'rateLimiting.skipKey',\r\n      message:\r\n        'Allows bypassing the rate limiter and should be provided with skipToken argument',\r\n      initial: defaultConfig.server.rateLimiting.skipKey.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'rateLimiting.skipToken',\r\n      message:\r\n        'Allows bypassing the rate limiter and should be provided with skipKey argument',\r\n      initial: defaultConfig.server.rateLimiting.skipToken.value\r\n    }\r\n  ],\r\n  pool: [\r\n    {\r\n      type: 'number',\r\n      name: 'minWorkers',\r\n      message: 'The number of initial workers to spawn',\r\n      initial: defaultConfig.pool.minWorkers.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'maxWorkers',\r\n      message: 'The number of max workers to spawn',\r\n      initial: defaultConfig.pool.maxWorkers.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'workLimit',\r\n      message:\r\n        'The pieces of work that can be performed before restarting a puppeteer process',\r\n      initial: defaultConfig.pool.workLimit.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'acquireTimeout',\r\n      message: 'The number of milliseconds to wait for acquiring a resource',\r\n      initial: defaultConfig.pool.acquireTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'createTimeout',\r\n      message: 'The number of milliseconds to wait for creating a resource',\r\n      initial: defaultConfig.pool.createTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'destroyTimeout',\r\n      message: 'The number of milliseconds to wait for destroying a resource',\r\n      initial: defaultConfig.pool.destroyTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'idleTimeout',\r\n      message: 'The number of milliseconds after an idle resource is destroyed',\r\n      initial: defaultConfig.pool.idleTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'createRetryInterval',\r\n      message:\r\n        'The number of milliseconds after the create process is retried in case of fail',\r\n      initial: defaultConfig.pool.createRetryInterval.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'reaperInterval',\r\n      message:\r\n        'The number of milliseconds after the check for idle resources to destroy is triggered',\r\n      initial: defaultConfig.pool.reaperInterval.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'benchmarking',\r\n      message: 'Set benchmarking',\r\n      initial: defaultConfig.pool.benchmarking.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'listenToProcessExits',\r\n      message: 'Set to false in order to skip attaching process.exit handlers',\r\n      initial: defaultConfig.pool.listenToProcessExits.value\r\n    }\r\n  ],\r\n  logging: [\r\n    {\r\n      type: 'number',\r\n      name: 'level',\r\n      message:\r\n        'The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose)',\r\n      initial: defaultConfig.logging.level.value,\r\n      round: 0,\r\n      min: 0,\r\n      max: 4\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'file',\r\n      message:\r\n        'A name of a log file. The --logDest also needs to be set to enable file logging',\r\n      initial: defaultConfig.logging.file.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'dest',\r\n      message: 'A path to log files. It enables file logging',\r\n      initial: defaultConfig.logging.dest.value\r\n    }\r\n  ],\r\n  ui: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'enable',\r\n      message: 'Enable UI for the export server',\r\n      initial: defaultConfig.ui.enable.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'route',\r\n      message: 'A route to attach the UI to',\r\n      initial: defaultConfig.ui.route.value\r\n    }\r\n  ],\r\n  other: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'noLogo',\r\n      message:\r\n        'Skip printing the logo on a startup. Will be replaced by a simple text',\r\n      initial: defaultConfig.other.noLogo.value\r\n    }\r\n  ]\r\n};\r\n\r\n// Absolute props that, in case of merging recursively, need to be force merged\r\nexport const absoluteProps = [\r\n  'options',\r\n  'globalOptions',\r\n  'themeOptions',\r\n  'resources',\r\n  'payload'\r\n];\r\n\r\n// Argument nesting level of all export server options\r\nexport const nestedArgs = {};\r\n\r\n/**\r\n * Recursively creates a chain of nested arguments from an object.\r\n *\r\n * @param {Object} obj - The object containing nested arguments.\r\n * @param {string} propChain - The current chain of nested properties\r\n * (used internally during recursion).\r\n */\r\nconst createNestedArgs = (obj, propChain = '') => {\r\n  Object.keys(obj).forEach((k) => {\r\n    if (!['puppeteer', 'highcharts'].includes(k)) {\r\n      const entry = obj[k];\r\n      if (typeof entry.value === 'undefined') {\r\n        // Go deeper in the nested arguments\r\n        createNestedArgs(entry, `${propChain}.${k}`);\r\n      } else {\r\n        // Create the chain of nested arguments\r\n        nestedArgs[entry.cliName || k] = `${propChain}.${k}`.substring(1);\r\n\r\n        // Support for the legacy, PhantomJS properties names\r\n        if (entry.legacyName !== undefined) {\r\n          nestedArgs[entry.legacyName] = `${propChain}.${k}`.substring(1);\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\ncreateNestedArgs(defaultConfig);\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { appendFile, existsSync, mkdirSync } from 'fs';\r\n\r\nimport { defaultConfig } from './schemas/config.js';\r\n\r\n// The available colors\r\nconst colors = ['red', 'yellow', 'blue', 'gray'];\r\n\r\n// The default logging config\r\nlet logging = {\r\n  // Flags for logging status\r\n  toConsole: true,\r\n  toFile: false,\r\n  pathCreated: false,\r\n  // Log levels\r\n  levelsDesc: [\r\n    {\r\n      title: 'error',\r\n      color: colors[0]\r\n    },\r\n    {\r\n      title: 'warning',\r\n      color: colors[1]\r\n    },\r\n    {\r\n      title: 'notice',\r\n      color: colors[2]\r\n    },\r\n    {\r\n      title: 'verbose',\r\n      color: colors[3]\r\n    }\r\n  ],\r\n  // Log listeners\r\n  listeners: []\r\n};\r\n\r\n// Gather init logging options\r\nfor (const [key, option] of Object.entries(defaultConfig.logging)) {\r\n  logging[key] = option.value;\r\n}\r\n\r\n/**\r\n * Logs the provided texts to a file, if file logging is enabled. It creates\r\n * the necessary directory structure if not already created and appends the\r\n * content, including an optional prefix, to the specified log file.\r\n *\r\n * @param {string[]} texts - An array of texts to be logged.\r\n * @param {string} prefix - An optional prefix to be added to each log entry.\r\n */\r\nconst logToFile = (texts, prefix) => {\r\n  if (logging.toFile) {\r\n    if (!logging.pathCreated) {\r\n      // Create if does not exist\r\n      !existsSync(logging.dest) && mkdirSync(logging.dest);\r\n\r\n      // We now assume the path is available, e.g. it's the responsibility\r\n      // of the user to create the path with the correct access rights.\r\n      logging.pathCreated = true;\r\n    }\r\n\r\n    // Add the content to a file\r\n    appendFile(\r\n      `${logging.dest}${logging.file}`,\r\n      [prefix].concat(texts).join(' ') + '\\n',\r\n      (error) => {\r\n        if (error) {\r\n          console.log(`[logger] Unable to write to log file: ${error}`);\r\n          logging.toFile = false;\r\n        }\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Logs a message. Accepts a variable amount of arguments. Arguments after\r\n * `level` will be passed directly to console.log, and/or will be joined\r\n * and appended to the log file.\r\n *\r\n * @param {any} args - An array of arguments where the first is the log level\r\n * and the rest are strings to build a message with.\r\n */\r\nexport const log = (...args) => {\r\n  const [newLevel, ...texts] = args;\r\n\r\n  // Current logging options\r\n  const { level, levelsDesc } = logging;\r\n\r\n  // Check if log level is within a correct range\r\n  if (newLevel === 0 || newLevel > level || level > levelsDesc.length) {\r\n    return;\r\n  }\r\n\r\n  // Get rid of the GMT text information\r\n  const newDate = new Date().toString().split('(')[0].trim();\r\n\r\n  // Create a message's prefix\r\n  const prefix = `${newDate} [${levelsDesc[newLevel - 1].title}] -`;\r\n\r\n  // Call available log listeners\r\n  logging.listeners.forEach((fn) => {\r\n    fn(prefix, texts.join(' '));\r\n  });\r\n\r\n  // Log to file\r\n  logToFile(texts, prefix);\r\n\r\n  // Log to console\r\n  if (logging.toConsole) {\r\n    console.log.apply(\r\n      undefined,\r\n      [prefix.toString()[logging.levelsDesc[newLevel - 1].color]].concat(texts)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Logs an error message with its stack trace. Optionally, a custom message\r\n * can be provided.\r\n *\r\n * @param {number} level - The log level.\r\n * @param {Error} error - The error object.\r\n * @param {string} customMessage - An optional custom message to be logged along\r\n * with the error.\r\n */\r\nexport const logWithStack = (level, error, customMessage) => {\r\n  // Log either custom or error's message\r\n  log(level, (customMessage || error.message)[colors[level - 1]]);\r\n\r\n  // If the customMessage exists, we want to display the whole stack message\r\n  const stackMessage =\r\n    error.message !== error.stackMessage || error.stackMessage === undefined\r\n      ? error.stack\r\n      : error.stack.split('\\n').slice(1).join('\\n');\r\n\r\n  // Log to console\r\n  if (level > 0 && level <= logging.level && logging.toConsole) {\r\n    console.log(stackMessage);\r\n  }\r\n\r\n  // Log to file\r\n  logToFile([stackMessage]);\r\n};\r\n\r\n/**\r\n * Sets the log level to the specified value. Log levels are (0 = no logging,\r\n * 1 = error, 2 = warning, 3 = notice, 4 = verbose)\r\n *\r\n * @param {number} newLevel - The new log level to be set.\r\n */\r\nexport const setLogLevel = (newLevel) => {\r\n  if (newLevel >= 0 && newLevel <= logging.levelsDesc.length) {\r\n    logging.level = newLevel;\r\n  }\r\n};\r\n\r\n/**\r\n * Enables file logging with the specified destination and log file.\r\n *\r\n * @param {string} logDest - The destination path for log files.\r\n * @param {string} logFile - The log file name.\r\n */\r\nexport const enableFileLogging = (logDest, logFile) => {\r\n  // Update logging options\r\n  logging = {\r\n    ...logging,\r\n    dest: logDest || logging.dest,\r\n    file: logFile || logging.file,\r\n    toFile: true\r\n  };\r\n\r\n  if (logging.dest.length === 0) {\r\n    return log(1, '[logger] File logging initialization: no path supplied.');\r\n  }\r\n\r\n  if (!logging.dest.endsWith('/')) {\r\n    logging.dest += '/';\r\n  }\r\n};\r\n\r\n/**\r\n * Initializes logging with the specified logging configuration.\r\n *\r\n * @param {Object} logging - The logging configuration object.\r\n */\r\nexport const initLogging = (logging) => {\r\n  // Set the log level\r\n  setLogLevel(logging && parseInt(logging.level));\r\n\r\n  // Set the log file path and name\r\n  if (logging && logging.dest) {\r\n    enableFileLogging(\r\n      logging.dest,\r\n      logging.file || 'highcharts-export-server.log'\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Adds a listener function to the logging system.\r\n *\r\n * @param {function} fn - The listener function to be added.\r\n */\r\nexport const listen = (fn) => {\r\n  logging.listeners.push(fn);\r\n};\r\n\r\n/**\r\n * Toggles the standard output (console) logging.\r\n *\r\n * @param {boolean} enabled - If true, enables console logging; if false,\r\n * disables it.\r\n */\r\nexport const toggleSTDOut = (enabled) => {\r\n  logging.toConsole = enabled;\r\n};\r\n\r\nexport default {\r\n  log,\r\n  logWithStack,\r\n  setLogLevel,\r\n  enableFileLogging,\r\n  initLogging,\r\n  listen,\r\n  toggleSTDOut\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { join } from 'path';\r\nimport { fileURLToPath } from 'url';\r\n\r\nimport { defaultConfig } from '../lib/schemas/config.js';\r\nimport { log, logWithStack } from './logger.js';\r\n\r\nconst MAX_BACKOFF_ATTEMPTS = 6;\r\n\r\nexport const __dirname = fileURLToPath(new URL('../.', import.meta.url));\r\n\r\n/**\r\n * Clears and standardizes text by replacing multiple consecutive whitespace\r\n * characters with a single space and trimming any leading or trailing\r\n * whitespace.\r\n *\r\n * @param {string} text - The input text to be cleared.\r\n * @param {RegExp} [rule=/\\s\\s+/g] - The regular expression rule to match\r\n * multiple consecutive whitespace characters.\r\n * @param {string} [replacer=' '] - The string used to replace multiple\r\n * consecutive whitespace characters.\r\n *\r\n * @returns {string} - The cleared and standardized text.\r\n */\r\nexport const clearText = (text, rule = /\\s\\s+/g, replacer = ' ') =>\r\n  text.replaceAll(rule, replacer).trim();\r\n\r\n/**\r\n * Implements an exponential backoff strategy for retrying a function until\r\n * a certain number of attempts are reached.\r\n *\r\n * @param {Function} fn - The function to be retried.\r\n * @param {number} [attempt=0] - The current attempt number.\r\n * @param {...any} args - Arguments to be passed to the function.\r\n *\r\n * @returns {Promise} - A promise that resolves to the result of the function\r\n * if successful.\r\n *\r\n * @throws {Error} - Throws an error if the maximum number of attempts\r\n * is reached.\r\n */\r\nexport const expBackoff = async (fn, attempt = 0, ...args) => {\r\n  try {\r\n    // Try to call the function\r\n    return await fn(...args);\r\n  } catch (error) {\r\n    // Calculate delay in ms\r\n    const delayInMs = 2 ** attempt * 1000;\r\n\r\n    // If the attempt exceeds the maximum attempts of reapeat, throw an error\r\n    if (++attempt >= MAX_BACKOFF_ATTEMPTS) {\r\n      throw error;\r\n    }\r\n\r\n    // Wait given amount of time\r\n    await new Promise((response) => setTimeout(response, delayInMs));\r\n    log(\r\n      3,\r\n      `[pool] Waited ${delayInMs}ms until next call for the resource id: ${args[0]}.`\r\n    );\r\n\r\n    // Try again\r\n    return expBackoff(fn, attempt, ...args);\r\n  }\r\n};\r\n\r\n/**\r\n * Fixes the export type based on MIME types and file extensions.\r\n *\r\n * @param {string} type - The original export type.\r\n * @param {string} outfile - The file path or name.\r\n *\r\n * @returns {string} - The corrected export type.\r\n */\r\nexport const fixType = (type, outfile) => {\r\n  // MIME types\r\n  const mimeTypes = {\r\n    'image/png': 'png',\r\n    'image/jpeg': 'jpeg',\r\n    'application/pdf': 'pdf',\r\n    'image/svg+xml': 'svg'\r\n  };\r\n\r\n  // Formats\r\n  const formats = ['png', 'jpeg', 'pdf', 'svg'];\r\n\r\n  // Check if type and outfile's extensions are the same\r\n  if (outfile) {\r\n    const outType = outfile.split('.').pop();\r\n\r\n    // Check if extension has a correct type\r\n    if (formats.includes(outType) && type !== outType) {\r\n      type = outType;\r\n    }\r\n  }\r\n\r\n  // Return a correct type\r\n  return mimeTypes[type] || formats.find((t) => t === type) || 'png';\r\n};\r\n\r\n/**\r\n * Handles and validates resources for export.\r\n *\r\n * @param {Object|string} resources - The resources to be handled. Can be either\r\n * a JSON object, stringified JSON or a path to a JSON file.\r\n * @param {boolean} allowFileResources - Whether to allow loading resources from\r\n * files.\r\n *\r\n * @returns {Object|undefined} - The handled resources or undefined if no valid\r\n * resources are found.\r\n */\r\nexport const handleResources = (resources = false, allowFileResources) => {\r\n  const allowedProps = ['js', 'css', 'files'];\r\n\r\n  let handledResources = resources;\r\n  let correctResources = false;\r\n\r\n  // Try to load resources from a file\r\n  if (allowFileResources && resources.endsWith('.json')) {\r\n    try {\r\n      if (!resources) {\r\n        handledResources = isCorrectJSON(\r\n          readFileSync('resources.json', 'utf8')\r\n        );\r\n      } else if (resources && resources.endsWith('.json')) {\r\n        handledResources = isCorrectJSON(readFileSync(resources, 'utf8'));\r\n      } else {\r\n        handledResources = isCorrectJSON(resources);\r\n        if (handledResources === true) {\r\n          handledResources = isCorrectJSON(\r\n            readFileSync('resources.json', 'utf8')\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      return logWithStack(3, error, `[cli] No resources found.`);\r\n    }\r\n  } else {\r\n    // Try to get JSON\r\n    handledResources = isCorrectJSON(resources);\r\n\r\n    // Get rid of the files section\r\n    if (!allowFileResources) {\r\n      delete handledResources.files;\r\n    }\r\n  }\r\n\r\n  // Filter from unnecessary properties\r\n  for (const propName in handledResources) {\r\n    if (!allowedProps.includes(propName)) {\r\n      delete handledResources[propName];\r\n    } else if (!correctResources) {\r\n      correctResources = true;\r\n    }\r\n  }\r\n\r\n  // Check if at least one of allowed properties is present\r\n  if (!correctResources) {\r\n    return log(3, `[cli] No resources found.`);\r\n  }\r\n\r\n  // Handle files section\r\n  if (handledResources.files) {\r\n    handledResources.files = handledResources.files.map((item) => item.trim());\r\n    if (!handledResources.files || handledResources.files.length <= 0) {\r\n      delete handledResources.files;\r\n    }\r\n  }\r\n\r\n  // Return resources\r\n  return handledResources;\r\n};\r\n\r\n/**\r\n * Validates and parses JSON data. Checks if provided data is or can\r\n * be a correct JSON.\r\n *\r\n * @param {Object|string} data - The JSON data to be validated and parsed.\r\n * @param {boolean} toString - Whether to return a stringified representation\r\n * of the parsed JSON.\r\n *\r\n * @returns {Object|string|boolean} - The parsed JSON object, stringified JSON,\r\n * or false if validation fails.\r\n */\r\nexport function isCorrectJSON(data, toString) {\r\n  try {\r\n    // Get the string representation if not already before parsing\r\n    const parsedData = JSON.parse(\r\n      typeof data !== 'string' ? JSON.stringify(data) : data\r\n    );\r\n\r\n    // Return a stringified representation of a JSON if required\r\n    if (typeof parsedData !== 'string' && toString) {\r\n      return JSON.stringify(parsedData);\r\n    }\r\n\r\n    // Return a JSON\r\n    return parsedData;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if the given item is an object.\r\n *\r\n * @param {any} item - The item to be checked.\r\n *\r\n * @returns {boolean} - True if the item is an object, false otherwise.\r\n */\r\nexport const isObject = (item) =>\r\n  typeof item === 'object' && !Array.isArray(item) && item !== null;\r\n\r\n/**\r\n * Checks if the given object is empty.\r\n *\r\n * @param {Object} item - The object to be checked.\r\n *\r\n * @returns {boolean} - True if the object is empty, false otherwise.\r\n */\r\nexport const isObjectEmpty = (item) =>\r\n  typeof item === 'object' && item !== null && Object.keys(item).length === 0;\r\n\r\n/**\r\n * Checks if a private IP range URL is found in the given string.\r\n *\r\n * @param {string} item - The string to be checked for a private IP range URL.\r\n *\r\n * @returns {boolean} - True if a private IP range URL is found, false\r\n * otherwise.\r\n */\r\nexport const isPrivateRangeUrlFound = (item) => {\r\n  return [\r\n    'localhost',\r\n    '(10).(.*).(.*).(.*)',\r\n    '(127).(.*).(.*).(.*)',\r\n    '(172).(1[6-9]|2[0-9]|3[0-1]).(.*).(.*)',\r\n    '(192).(168).(.*).(.*)'\r\n  ].some((ipRegEx) =>\r\n    item.match(`xlink:href=\"(?:(http://|https://))?${ipRegEx}`)\r\n  );\r\n};\r\n\r\n/**\r\n * Creates a deep copy of the given object or array.\r\n *\r\n * @param {Object|Array} obj - The object or array to be deeply copied.\r\n *\r\n * @returns {Object|Array} - The deep copy of the provided object or array.\r\n */\r\nexport const deepCopy = (obj) => {\r\n  if (obj === null || typeof obj !== 'object') {\r\n    return obj;\r\n  }\r\n\r\n  const copy = Array.isArray(obj) ? [] : {};\r\n\r\n  for (const key in obj) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n      copy[key] = deepCopy(obj[key]);\r\n    }\r\n  }\r\n\r\n  return copy;\r\n};\r\n\r\n/**\r\n * Converts the provided options object to a JSON-formatted string with the\r\n * option to preserve functions.\r\n *\r\n * @param {Object} options - The options object to be converted to a string.\r\n * @param {boolean} allowFunctions - If set to true, functions are preserved\r\n * in the output.\r\n *\r\n * @returns {string} - The JSON-formatted string representing the options.\r\n */\r\nexport const optionsStringify = (options, allowFunctions) => {\r\n  const replacerCallback = (name, value) => {\r\n    if (typeof value === 'string') {\r\n      value = value.trim();\r\n\r\n      // If allowFunctions is set to true, preserve functions\r\n      if (\r\n        (value.startsWith('function(') || value.startsWith('function (')) &&\r\n        value.endsWith('}')\r\n      ) {\r\n        value = allowFunctions\r\n          ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\r\n          : undefined;\r\n      }\r\n    }\r\n\r\n    return typeof value === 'function'\r\n      ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\r\n      : value;\r\n  };\r\n\r\n  // Stringify options and if required, replace special functions marks\r\n  return JSON.stringify(options, replacerCallback).replaceAll(\r\n    /\"EXP_FUN|EXP_FUN\"/g,\r\n    ''\r\n  );\r\n};\r\n\r\n/**\r\n * Prints the Highcharts Export Server logo and version information.\r\n *\r\n * @param {boolean} noLogo - If true, only prints version information without\r\n * the logo.\r\n */\r\nexport const printLogo = (noLogo) => {\r\n  // Get package version either from env or from package.json\r\n  const packageVersion = JSON.parse(\r\n    readFileSync(join(__dirname, 'package.json'))\r\n  ).version;\r\n\r\n  // Print text only\r\n  if (noLogo) {\r\n    console.log(`Starting Highcharts Export Server v${packageVersion}...`);\r\n    return;\r\n  }\r\n\r\n  // Print the logo\r\n  console.log(\r\n    readFileSync(__dirname + '/msg/startup.msg').toString().bold.yellow,\r\n    `v${packageVersion}`\r\n  );\r\n};\r\n\r\n/**\r\n * Prints the usage information for CLI arguments. If required, it can list\r\n * properties recursively\r\n */\r\nexport function printUsage() {\r\n  const pad = 48;\r\n  const readme = 'https://github.com/highcharts/node-export-server#readme';\r\n\r\n  // Display readme information\r\n  console.log(\r\n    '\\nUsage of CLI arguments:'.bold,\r\n    '\\n------',\r\n    `\\nFor more detailed information, visit the readme at: ${readme.bold.yellow}.`\r\n  );\r\n\r\n  const cycleCategories = (options) => {\r\n    for (const [name, option] of Object.entries(options)) {\r\n      // If category has more levels, go further\r\n      if (!Object.prototype.hasOwnProperty.call(option, 'value')) {\r\n        cycleCategories(option);\r\n      } else {\r\n        let descName = `  --${option.cliName || name} ${\r\n          ('<' + option.type + '>').green\r\n        } `;\r\n        if (descName.length < pad) {\r\n          for (let i = descName.length; i < pad; i++) {\r\n            descName += '.';\r\n          }\r\n        }\r\n\r\n        // Display correctly aligned messages\r\n        console.log(\r\n          descName,\r\n          option.description,\r\n          `[Default: ${option.value.toString().bold}]`.blue\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  // Cycle through options of each categories and display the usage info\r\n  Object.keys(defaultConfig).forEach((category) => {\r\n    // Only puppeteer and highcharts categories cannot be configured through CLI\r\n    if (!['puppeteer', 'highcharts', 'payload'].includes(category)) {\r\n      console.log(`\\n${category.toUpperCase()}`.red);\r\n      cycleCategories(defaultConfig[category]);\r\n    }\r\n  });\r\n  console.log('\\n');\r\n}\r\n\r\n/**\r\n * Rounds a number to the specified precision.\r\n *\r\n * @param {number} value - The number to be rounded.\r\n * @param {number} precision - The number of decimal places to round to.\r\n *\r\n * @returns {number} - The rounded number.\r\n */\r\nexport const roundNumber = (value, precision = 1) => {\r\n  const multiplier = Math.pow(10, precision || 0);\r\n  return Math.round(+value * multiplier) / multiplier;\r\n};\r\n\r\n/**\r\n * Converts a value to a boolean.\r\n *\r\n * @param {any} item - The value to be converted to a boolean.\r\n *\r\n * @returns {boolean} - The boolean representation of the input value.\r\n */\r\nexport const toBoolean = (item) =>\r\n  ['false', 'undefined', 'null', 'NaN', '0', ''].includes(item)\r\n    ? false\r\n    : !!item;\r\n\r\n/**\r\n * Wraps custom code to execute it safely.\r\n *\r\n * @param {string} customCode - The custom code to be wrapped.\r\n * @param {boolean} allowFileResources - Flag to allow loading code from a file.\r\n *\r\n * @returns {string|boolean} - The wrapped custom code or false if wrapping\r\n * fails.\r\n */\r\nexport const wrapAround = (customCode, allowFileResources) => {\r\n  if (customCode && typeof customCode === 'string') {\r\n    customCode = customCode.trim();\r\n\r\n    if (customCode.endsWith('.js')) {\r\n      return allowFileResources\r\n        ? wrapAround(readFileSync(customCode, 'utf8'))\r\n        : false;\r\n    } else if (\r\n      customCode.startsWith('function()') ||\r\n      customCode.startsWith('function ()') ||\r\n      customCode.startsWith('()=>') ||\r\n      customCode.startsWith('() =>')\r\n    ) {\r\n      return `(${customCode})()`;\r\n    }\r\n    return customCode.replace(/;$/, '');\r\n  }\r\n};\r\n\r\n/**\r\n * Utility to measure elapsed time using the Node.js process.hrtime() method.\r\n *\r\n * @returns {function(): number} - A function to calculate the elapsed time\r\n * in milliseconds.\r\n */\r\nexport const measureTime = () => {\r\n  const start = process.hrtime.bigint();\r\n  return () => Number(process.hrtime.bigint() - start) / 1000000;\r\n};\r\n\r\nexport default {\r\n  __dirname,\r\n  clearText,\r\n  expBackoff,\r\n  fixType,\r\n  handleResources,\r\n  isCorrectJSON,\r\n  isObject,\r\n  isObjectEmpty,\r\n  isPrivateRangeUrlFound,\r\n  optionsStringify,\r\n  printLogo,\r\n  printUsage,\r\n  roundNumber,\r\n  toBoolean,\r\n  wrapAround,\r\n  measureTime\r\n};\r\n","class ExportError extends Error {\r\n  constructor(message) {\r\n    super();\r\n    this.message = message;\r\n    this.stackMessage = message;\r\n  }\r\n\r\n  setError(error) {\r\n    this.error = error;\r\n    if (error.name) {\r\n      this.name = error.name;\r\n    }\r\n    if (error.stack) {\r\n      this.stackMessage = error.message;\r\n      this.stack = error.stack;\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default ExportError;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// The cache manager manages the Highcharts library and its dependencies.\r\n// The cache itself is stored in .cache, and is checked by the config system\r\n// before starting the service\r\n\r\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';\r\nimport { join } from 'path';\r\n\r\nimport dotenv from 'dotenv';\r\nimport HttpsProxyAgent from 'https-proxy-agent';\r\n\r\nimport { fetch } from './fetch.js';\r\nimport { log } from './logger.js';\r\nimport { __dirname } from './utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\ndotenv.config();\r\n\r\nconst cachePath = join(__dirname, '.cache');\r\n\r\nconst cache = {\r\n  cdnURL: 'https://code.highcharts.com/',\r\n  activeManifest: {},\r\n  sources: '',\r\n  hcVersion: ''\r\n};\r\n\r\n// TODO: The config should be accesssible globally so we don't have to do this sort of thing..\r\nlet appliedConfig = false;\r\n\r\n/**\r\n * Extracts and caches the Highcharts version from the sources string.\r\n *\r\n * @returns {string} The extracted Highcharts version.\r\n */\r\nconst extractVersion = () =>\r\n  (cache.hcVersion = cache.sources\r\n    .substr(0, cache.sources.indexOf('*/'))\r\n    .replace('/*', '')\r\n    .replace('*/', '')\r\n    .replace(/\\n/g, '')\r\n    .trim());\r\n\r\n/**\r\n * Saves the provided configuration and fetched modules to the cache manifest\r\n * file.\r\n *\r\n * @param {Object} config - The configuration object to be saved.\r\n * @param {Object} fetchedModules - The fetched modules to be saved.\r\n *\r\n * @throws {ExportError} Throws an ExportError if an error occurs while writing\r\n * the cache manifest.\r\n */\r\nconst saveConfigToManifest = async (config, fetchedModules) => {\r\n  const newManifest = {\r\n    version: config.version,\r\n    modules: fetchedModules || {}\r\n  };\r\n\r\n  // Update cache object with the current modules\r\n  cache.activeManifest = newManifest;\r\n\r\n  log(3, '[cache] Writing a new manifest.');\r\n  try {\r\n    writeFileSync(\r\n      join(cachePath, 'manifest.json'),\r\n      JSON.stringify(newManifest),\r\n      'utf8'\r\n    );\r\n  } catch (error) {\r\n    throw new ExportError('[cache] Error writing the cache manifest.').setError(\r\n      error\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches a script and returns its text representation.\r\n *\r\n * @param {string} script - The name of the script to fetch.\r\n * @param {Object} proxyAgent - The optional proxy agent for the request.\r\n *\r\n * @returns {Promise<string>} A Promise resolving to the text representation\r\n * of the fetched script.\r\n *\r\n * @throws {ExportError} Throws an ExportError if there is a problem with\r\n * fetching the script.\r\n */\r\nconst fetchScript = async (script, proxyAgent) => {\r\n  // Get rid of the .js from the custom strings\r\n  if (script.endsWith('.js')) {\r\n    script = script.substring(0, script.length - 3);\r\n  }\r\n\r\n  log(4, `[cache] Fetching script - ${script}.js.`);\r\n\r\n  // If exists, add proxy agent to request options\r\n  const requestOptions = proxyAgent\r\n    ? {\r\n        agent: proxyAgent,\r\n        timeout: +process.env['PROXY_SERVER_TIMEOUT'] || 5000\r\n      }\r\n    : {};\r\n\r\n  // Fetch the script\r\n  const response = await fetch(`${script}.js`, requestOptions);\r\n\r\n  // If OK, return its text representation\r\n  if (response.statusCode === 200) {\r\n    return response.text;\r\n  }\r\n\r\n  throw new ExportError(\r\n    `[cache] Problem with fetching script (status code: ${response.statusCode}).`\r\n  );\r\n};\r\n\r\n/**\r\n * Updates the local cache with Highcharts scripts and their versions.\r\n *\r\n * @param {Object} config - The configuration object containing information\r\n * about scripts and modules.\r\n * @param {string} sourcePath - The path to the source file in the cache.\r\n *\r\n * @returns {Promise<object>} A Promise resolving to an object representing\r\n * the fetched modules.\r\n *\r\n * @throws {ExportError} Throws an ExportError if there is an issue updating\r\n * the local Highcharts cache.\r\n */\r\nconst updateCache = async (config, sourcePath) => {\r\n  const { coreScripts, modules, indicators, scripts: customScripts } = config;\r\n  const hcVersion =\r\n    config.version === 'latest' || !config.version ? '' : `${config.version}/`;\r\n\r\n  log(3, `[cache] Updating cache version to Highcharts ${hcVersion}.`);\r\n\r\n  // Gather all scripts to fetch\r\n  const allScripts = [\r\n    ...coreScripts.map((c) => `${hcVersion}${c}`),\r\n    ...modules.map((m) =>\r\n      m === 'map' ? `maps/${hcVersion}modules/${m}` : `${hcVersion}modules/${m}`\r\n    ),\r\n    ...indicators.map((i) => `stock/${hcVersion}indicators/${i}`)\r\n  ];\r\n\r\n  // Configure proxy if exists\r\n  let proxyAgent;\r\n  const proxyHost = process.env['PROXY_SERVER_HOST'];\r\n  const proxyPort = process.env['PROXY_SERVER_PORT'];\r\n\r\n  // Try to create a Proxy Agent\r\n  if (proxyHost && proxyPort) {\r\n    try {\r\n      proxyAgent = new HttpsProxyAgent({\r\n        host: proxyHost,\r\n        port: +proxyPort\r\n      });\r\n    } catch (error) {\r\n      throw new ExportError('[cache] Could not create a Proxy Agent.').setError(\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  const fetchedModules = {};\r\n  try {\r\n    cache.sources = // TODO: convert to for loop\r\n      (\r\n        await Promise.all([\r\n          ...allScripts.map(async (script) => {\r\n            const text = await fetchScript(\r\n              `${config.cdnURL || cache.cdnURL}${script}`,\r\n              proxyAgent\r\n            );\r\n\r\n            // If fetched correctly, set it\r\n            if (typeof text === 'string') {\r\n              fetchedModules[\r\n                script.replace(\r\n                  /(.*)\\/|(.*)modules\\/|stock\\/(.*)indicators\\/|maps\\/(.*)modules\\//gi,\r\n                  ''\r\n                )\r\n              ] = 1;\r\n            }\r\n\r\n            return text;\r\n          }),\r\n          ...customScripts.map((script) => fetchScript(script, proxyAgent))\r\n        ])\r\n      ).join(';\\n');\r\n    extractVersion();\r\n\r\n    // Save the fetched modules into caches' source JSON\r\n    writeFileSync(sourcePath, cache.sources);\r\n    return fetchedModules;\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[cache] Unable to update the local Highcharts cache.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates the Highcharts version in the applied configuration and checks\r\n * the cache for the new version.\r\n *\r\n * @param {string} newVersion - The new Highcharts version to be applied.\r\n *\r\n * @returns {Promise<(object|boolean)>} A Promise resolving to the updated\r\n * configuration with the new version, or false if no applied configuration\r\n * exists.\r\n */\r\nexport const updateVersion = async (newVersion) =>\r\n  appliedConfig\r\n    ? await checkCache(\r\n        Object.assign(appliedConfig, {\r\n          version: newVersion\r\n        })\r\n      )\r\n    : false;\r\n\r\n/**\r\n * Checks the cache for Highcharts dependencies, updates the cache if needed,\r\n * and loads the sources.\r\n *\r\n * @param {Object} config - The configuration object containing information\r\n * about scripts and modules.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the cache is checked\r\n * and updated.\r\n *\r\n * @throws {ExportError} Throws an ExportError if there is an issue updating\r\n * or reading the cache.\r\n */\r\nexport const checkCache = async (config) => {\r\n  let fetchedModules;\r\n  // Prepare paths to manifest and sources from the .cache folder\r\n  const manifestPath = join(cachePath, 'manifest.json');\r\n  const sourcePath = join(cachePath, 'sources.js');\r\n\r\n  // TODO: deal with trying to switch to the running version\r\n  // const activeVersion = appliedConfig ? appliedConfig.version : false;\r\n\r\n  appliedConfig = config;\r\n\r\n  // Create the .cache destination if it doesn't exist already\r\n  !existsSync(cachePath) && mkdirSync(cachePath);\r\n\r\n  // Fetch all the scripts either if manifest.json does not exist\r\n  // or if the forceFetch option is enabled\r\n  if (!existsSync(manifestPath) || config.forceFetch) {\r\n    log(3, '[cache] Fetching and caching Highcharts dependencies.');\r\n    fetchedModules = await updateCache(config, sourcePath);\r\n  } else {\r\n    let requestUpdate = false;\r\n\r\n    // Read the manifest JSON\r\n    const manifest = JSON.parse(readFileSync(manifestPath));\r\n\r\n    // Check if the modules is an array, if so, we rewrite it to a map to make\r\n    // it easier to resolve modules.\r\n    if (manifest.modules && Array.isArray(manifest.modules)) {\r\n      const moduleMap = {};\r\n      manifest.modules.forEach((m) => (moduleMap[m] = 1));\r\n      manifest.modules = moduleMap;\r\n    }\r\n\r\n    const { modules, coreScripts, indicators } = config;\r\n    const numberOfModules =\r\n      modules.length + coreScripts.length + indicators.length;\r\n\r\n    // Compare the loaded config with the contents in .cache.\r\n    // If there are changes, fetch requested modules and products,\r\n    // and bake them into a giant blob. Save the blob.\r\n    if (manifest.version !== config.version) {\r\n      log(\r\n        2,\r\n        '[cache] A Highcharts version mismatch in the cache, need to re-fetch.'\r\n      );\r\n      requestUpdate = true;\r\n    } else if (Object.keys(manifest.modules || {}).length !== numberOfModules) {\r\n      log(\r\n        2,\r\n        '[cache] The cache and the requested modules do not match, need to re-fetch.'\r\n      );\r\n      requestUpdate = true;\r\n    } else {\r\n      // Check each module, if anything is missing refetch everything\r\n      requestUpdate = (config.modules || []).some((moduleName) => {\r\n        if (!manifest.modules[moduleName]) {\r\n          log(\r\n            2,\r\n            `[cache] The ${moduleName} is missing in the cache, need to re-fetch.`\r\n          );\r\n          return true;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (requestUpdate) {\r\n      fetchedModules = await updateCache(config, sourcePath);\r\n    } else {\r\n      log(3, '[cache] Dependency cache is up to date, proceeding.');\r\n\r\n      // Load the sources\r\n      cache.sources = readFileSync(sourcePath, 'utf8');\r\n\r\n      // Get current modules map\r\n      fetchedModules = manifest.modules;\r\n      extractVersion();\r\n    }\r\n  }\r\n\r\n  // Finally, save the new manifest, which is basically our current config\r\n  // in a slightly different format\r\n  await saveConfigToManifest(config, fetchedModules);\r\n};\r\n\r\nexport default {\r\n  checkCache,\r\n  updateVersion,\r\n  getCache: () => cache,\r\n  highcharts: () => cache.sources,\r\n  version: () => cache.hcVersion\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { existsSync, readFileSync, promises as fsPromises } from 'fs';\r\n\r\nimport prompts from 'prompts';\r\n\r\nimport {\r\n  absoluteProps,\r\n  defaultConfig,\r\n  nestedArgs,\r\n  promptsConfig\r\n} from './schemas/config.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport { deepCopy, isObject, printUsage, toBoolean } from './utils.js';\r\n\r\nlet generalOptions = {};\r\n\r\n/**\r\n * Retrieves and returns the general options for the export process.\r\n *\r\n * @returns {Object} The general options object.\r\n */\r\nexport const getOptions = () => generalOptions;\r\n\r\n/**\r\n * Initializes and sets the general options for the server instace, keeping\r\n * the principle of the options load priority. It accepts optional userOptions\r\n * and args from the CLI.\r\n *\r\n * @param {Object} userOptions - User-provided options for customization.\r\n * @param {Array} args - Command-line arguments for additional configuration\r\n * (CLI usage).\r\n *\r\n * @returns {Object} The updated general options object.\r\n */\r\nexport const setOptions = (userOptions, args) => {\r\n  // Only for the CLI usage\r\n  if (args?.length) {\r\n    // Get the additional options from the custom JSON file\r\n    generalOptions = loadConfigFile(args);\r\n  }\r\n\r\n  // Update the default config with a correct option values\r\n  updateDefaultConfig(defaultConfig, generalOptions);\r\n\r\n  // Set values for server's options and returns them\r\n  generalOptions = initOptions(defaultConfig);\r\n\r\n  // Apply user options if there are any\r\n  if (userOptions) {\r\n    // Merge user options\r\n    generalOptions = mergeConfigOptions(\r\n      generalOptions,\r\n      userOptions,\r\n      absoluteProps\r\n    );\r\n  }\r\n\r\n  // Only for the CLI usage\r\n  if (args?.length) {\r\n    // Pair provided arguments\r\n    generalOptions = pairArgumentValue(generalOptions, args, defaultConfig);\r\n  }\r\n\r\n  // Return final general options\r\n  return generalOptions;\r\n};\r\n\r\n/**\r\n * Allows manual configuration based on specified prompts and saves\r\n * the configuration to a file.\r\n *\r\n * @param {string} configFileName - The name of the configuration file.\r\n *\r\n * @returns {Promise<boolean>} A Promise that resolves to true once the manual\r\n * configuration is completed and saved.\r\n */\r\nexport const manualConfig = async (configFileName) => {\r\n  // Prepare a config object\r\n  let configFile = {};\r\n\r\n  // Check if provided config file exists\r\n  if (existsSync(configFileName)) {\r\n    configFile = JSON.parse(readFileSync(configFileName, 'utf8'));\r\n  }\r\n\r\n  // Question about a configuration category\r\n  const onSubmit = async (p, categories) => {\r\n    let questionsCounter = 0;\r\n    let allQuestions = [];\r\n\r\n    // Create a corresponding property in the manualConfig object\r\n    for (const section of categories) {\r\n      // Mark each option with a section\r\n      promptsConfig[section] = promptsConfig[section].map((option) => ({\r\n        ...option,\r\n        section\r\n      }));\r\n\r\n      // Collect the questions\r\n      allQuestions = [...allQuestions, ...promptsConfig[section]];\r\n    }\r\n\r\n    await prompts(allQuestions, {\r\n      onSubmit: async (prompt, answer) => {\r\n        // Get the default modules\r\n        if (prompt.name === 'modules') {\r\n          answer = answer.length\r\n            ? answer.map((module) => prompt.choices[module])\r\n            : prompt.choices;\r\n\r\n          configFile[prompt.section][prompt.name] = answer;\r\n        } else {\r\n          configFile[prompt.section] = recursiveProps(\r\n            Object.assign({}, configFile[prompt.section] || {}),\r\n            prompt.name.split('.'),\r\n            prompt.choices ? prompt.choices[answer] : answer\r\n          );\r\n        }\r\n\r\n        if (++questionsCounter === allQuestions.length) {\r\n          try {\r\n            await fsPromises.writeFile(\r\n              configFileName,\r\n              JSON.stringify(configFile, null, 2),\r\n              'utf8'\r\n            );\r\n          } catch (error) {\r\n            logWithStack(\r\n              1,\r\n              error,\r\n              `[config] An error occurred while creating the ${configFileName} file.`\r\n            );\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return true;\r\n  };\r\n\r\n  // Find the categories\r\n  const choices = Object.keys(promptsConfig).map((choice) => ({\r\n    title: `${choice} options`,\r\n    value: choice\r\n  }));\r\n\r\n  // Category prompt\r\n  return prompts(\r\n    {\r\n      type: 'multiselect',\r\n      name: 'category',\r\n      message: 'Which category do you want to configure?',\r\n      hint: 'Space: Select specific, A: Select all, Enter: Confirm.',\r\n      instructions: '',\r\n      choices\r\n    },\r\n    { onSubmit }\r\n  );\r\n};\r\n\r\n/**\r\n * Maps old-structured (PhantomJS) options to a new configuration format\r\n * (Puppeteer).\r\n *\r\n * @param {Object} oldOptions - Old-structured options to be mapped.\r\n *\r\n * @returns {Object} New options structured based on the defined nestedArgs\r\n * mapping.\r\n */\r\nexport const mapToNewConfig = (oldOptions) => {\r\n  const newOptions = {};\r\n  // Cycle through old-structured options\r\n  for (const [key, value] of Object.entries(oldOptions)) {\r\n    const propertiesChain = nestedArgs[key] ? nestedArgs[key].split('.') : [];\r\n\r\n    // Populate object in correct properties levels\r\n    propertiesChain.reduce(\r\n      (obj, prop, index) =>\r\n        (obj[prop] =\r\n          propertiesChain.length - 1 === index ? value : obj[prop] || {}),\r\n      newOptions\r\n    );\r\n  }\r\n  return newOptions;\r\n};\r\n\r\n/**\r\n * Merges two sets of configuration options, considering absolute properties.\r\n *\r\n * @param {Object} options - Original configuration options.\r\n * @param {Object} newOptions - New configuration options to be merged.\r\n * @param {Array} absoluteProps - List of properties that should\r\n * not be recursively merged.\r\n *\r\n * @returns {Object} Merged configuration options.\r\n */\r\nexport const mergeConfigOptions = (options, newOptions, absoluteProps = []) => {\r\n  const mergedOptions = deepCopy(options);\r\n\r\n  for (const [key, value] of Object.entries(newOptions)) {\r\n    mergedOptions[key] =\r\n      isObject(value) &&\r\n      !absoluteProps.includes(key) &&\r\n      mergedOptions[key] !== undefined\r\n        ? mergeConfigOptions(mergedOptions[key], value, absoluteProps)\r\n        : value !== undefined\r\n          ? value\r\n          : mergedOptions[key];\r\n  }\r\n\r\n  return mergedOptions;\r\n};\r\n\r\n/**\r\n * Initializes export settings based on provided exportOptions\r\n * and generalOptions.\r\n *\r\n * @param {Object} exportOptions - Options specific to the export process.\r\n * @param {Object} generalOptions - General configuration options.\r\n *\r\n * @returns {Object} Initialized export settings.\r\n */\r\nexport const initExportSettings = (exportOptions, generalOptions = {}) => {\r\n  let options = {};\r\n\r\n  if (exportOptions.svg) {\r\n    options = deepCopy(generalOptions);\r\n    options.export.type = exportOptions.type || exportOptions.export.type;\r\n    options.export.scale = exportOptions.scale || exportOptions.export.scale;\r\n    options.export.outfile =\r\n      exportOptions.outfile || exportOptions.export.outfile;\r\n    options.payload = {\r\n      svg: exportOptions.svg\r\n    };\r\n  } else {\r\n    options = mergeConfigOptions(\r\n      generalOptions,\r\n      exportOptions,\r\n      // Omit going down recursively with the belows\r\n      absoluteProps\r\n    );\r\n  }\r\n\r\n  options.export.outfile =\r\n    options.export?.outfile || `chart.${options.export?.type || 'png'}`;\r\n  return options;\r\n};\r\n\r\n/**\r\n * Loads additional configuration from a specified file using\r\n * the --loadConfig option.\r\n *\r\n * @param {Array} args - Command-line arguments to check for\r\n * the --loadConfig option.\r\n *\r\n * @returns {Object} Additional configuration loaded from the specified file,\r\n * or an empty object if not found or invalid.\r\n */\r\nfunction loadConfigFile(args) {\r\n  // Check if the --loadConfig option was used\r\n  const configIndex = args.findIndex(\r\n    (arg) => arg.replace(/-/g, '') === 'loadConfig'\r\n  );\r\n\r\n  // Check if the --loadConfig has a value\r\n  if (configIndex > -1 && args[configIndex + 1]) {\r\n    const fileName = args[configIndex + 1];\r\n    try {\r\n      // Check if an additional config file is a correct JSON file\r\n      if (fileName && fileName.endsWith('.json')) {\r\n        // Load an optional custom JSON config file\r\n        return JSON.parse(readFileSync(fileName));\r\n      }\r\n    } catch (error) {\r\n      logWithStack(\r\n        2,\r\n        error,\r\n        `[config] Unable to load the configuration from the ${fileName} file.`\r\n      );\r\n    }\r\n  }\r\n\r\n  // No additional options to return\r\n  return {};\r\n}\r\n\r\n/**\r\n * Updates the default configuration object with values from a custom object\r\n * and environment variables.\r\n *\r\n * @param {Object} configObj - The default configuration object.\r\n * @param {Object} customObj - Custom configuration object to override defaults.\r\n * @param {string} propChain - Property chain for tracking nested properties\r\n * during recursion.\r\n */\r\nfunction updateDefaultConfig(configObj, customObj = {}, propChain = '') {\r\n  Object.keys(configObj).forEach((key) => {\r\n    const entry = configObj[key];\r\n    const customValue = customObj && customObj[key];\r\n    let numEnvVal;\r\n\r\n    if (typeof entry.value === 'undefined') {\r\n      updateDefaultConfig(entry, customValue, `${propChain}.${key}`);\r\n    } else {\r\n      // If a value from a custom JSON exists, it take precedence\r\n      if (customValue !== undefined) {\r\n        entry.value = customValue;\r\n      }\r\n\r\n      // If a value from an env variable exists, it take precedence\r\n      if (entry.envLink) {\r\n        // Load the env var\r\n        if (entry.type === 'boolean') {\r\n          entry.value = toBoolean(\r\n            [process.env[entry.envLink], entry.value].find(\r\n              (el) => el || el === 'false'\r\n            )\r\n          );\r\n        } else if (entry.type === 'number') {\r\n          numEnvVal = +process.env[entry.envLink];\r\n          entry.value = numEnvVal >= 0 ? numEnvVal : entry.value;\r\n        } else if (entry.type.indexOf(']') >= 0 && process.env[entry.envLink]) {\r\n          entry.value = process.env[entry.envLink].split(',');\r\n        } else {\r\n          entry.value = process.env[entry.envLink] || entry.value;\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Initializes options object based on provided items, setting values from\r\n * nested properties recursively.\r\n *\r\n * @param {Object} items - Configuration items to be used for initializing\r\n * options.\r\n *\r\n * @returns {Object} Initialized options object.\r\n */\r\nfunction initOptions(items) {\r\n  let options = {};\r\n  for (const [name, item] of Object.entries(items)) {\r\n    options[name] = Object.prototype.hasOwnProperty.call(item, 'value')\r\n      ? item.value\r\n      : initOptions(item);\r\n  }\r\n  return options;\r\n}\r\n\r\n/**\r\n * Pairs argument values with corresponding options in the configuration,\r\n * updating the options object.\r\n *\r\n * @param {Object} options - Configuration options object to be updated.\r\n * @param {Array} args - Command-line arguments containing values for specific\r\n * options.\r\n * @param {Object} defaultConfig - Default configuration object for reference.\r\n *\r\n * @returns {Object} Updated options object.\r\n */\r\nfunction pairArgumentValue(options, args, defaultConfig) {\r\n  let showUsage = false;\r\n  for (let i = 0; i < args.length; i++) {\r\n    const option = args[i].replace(/-/g, '');\r\n\r\n    // Find the right place for property's value\r\n    const propertiesChain = nestedArgs[option]\r\n      ? nestedArgs[option].split('.')\r\n      : [];\r\n\r\n    propertiesChain.reduce((obj, prop, index) => {\r\n      if (propertiesChain.length - 1 === index) {\r\n        // Finds an option and set a corresponding value\r\n        if (typeof obj[prop] !== 'undefined') {\r\n          if (args[++i]) {\r\n            obj[prop] = args[i];\r\n          } else {\r\n            log(\r\n              2,\r\n              `[config] Missing value for the '${option}' argument. Using the default value.`\r\n            );\r\n            showUsage = true;\r\n          }\r\n        }\r\n      }\r\n      return obj[prop];\r\n    }, options);\r\n  }\r\n\r\n  // Display the usage for the reference if needed\r\n  if (showUsage) {\r\n    printUsage(defaultConfig);\r\n  }\r\n\r\n  return options;\r\n}\r\n\r\n/**\r\n * Recursively updates properties in an object based on nested names and assigns\r\n * the final value.\r\n *\r\n * @param {Object} objectToUpdate - The object to be updated.\r\n * @param {Array} nestedNames - Array of nested property names.\r\n * @param {any} value - The final value to be assigned.\r\n *\r\n * @returns {Object} Updated object with assigned values.\r\n */\r\nfunction recursiveProps(objectToUpdate, nestedNames, value) {\r\n  while (nestedNames.length > 1) {\r\n    const propName = nestedNames.shift();\r\n\r\n    // Create a property in object if it doesn't exist\r\n    if (!Object.prototype.hasOwnProperty.call(objectToUpdate, propName)) {\r\n      objectToUpdate[propName] = {};\r\n    }\r\n\r\n    // Call function again if there still names to go\r\n    objectToUpdate[propName] = recursiveProps(\r\n      Object.assign({}, objectToUpdate[propName]),\r\n      nestedNames,\r\n      value\r\n    );\r\n\r\n    return objectToUpdate;\r\n  }\r\n\r\n  // Assign the final value\r\n  objectToUpdate[nestedNames[0]] = value;\r\n  return objectToUpdate;\r\n}\r\n\r\nexport default {\r\n  getOptions,\r\n  setOptions,\r\n  manualConfig,\r\n  mapToNewConfig,\r\n  mergeConfigOptions,\r\n  initExportSettings\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport fs from 'fs';\r\nimport path from 'node:path';\r\nimport puppeteer from 'puppeteer';\r\nimport * as url from 'url';\r\n\r\n// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1463328\r\n// Not ideal - leaves trash in the FS\r\nimport { randomBytes } from 'node:crypto';\r\n\r\nimport { log, logWithStack } from './logger.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nconst RANDOM_PID = randomBytes(64).toString('base64url');\r\nconst PUPPETEER_DIR = path.join('tmp', `puppeteer-${RANDOM_PID}`);\r\nconst DATA_DIR = path.join(PUPPETEER_DIR, 'profile');\r\n\r\n// The minimal args to speed up the browser\r\nconst minimalArgs = [\r\n  `--user-data-dir=${DATA_DIR}`,\r\n  '--autoplay-policy=user-gesture-required',\r\n  '--disable-background-networking',\r\n  '--disable-background-timer-throttling',\r\n  '--disable-backgrounding-occluded-windows',\r\n  '--disable-breakpad',\r\n  '--disable-client-side-phishing-detection',\r\n  '--disable-component-update',\r\n  '--disable-default-apps',\r\n  '--disable-dev-shm-usage',\r\n  '--disable-domain-reliability',\r\n  '--disable-extensions',\r\n  '--disable-features=AudioServiceOutOfProcess',\r\n  '--disable-hang-monitor',\r\n  '--disable-ipc-flooding-protection',\r\n  '--disable-notifications',\r\n  '--disable-offer-store-unmasked-wallet-cards',\r\n  '--disable-popup-blocking',\r\n  '--disable-print-preview',\r\n  '--disable-prompt-on-repost',\r\n  '--disable-renderer-backgrounding',\r\n  '--disable-session-crashed-bubble',\r\n  '--disable-setuid-sandbox',\r\n  '--disable-speech-api',\r\n  '--disable-sync',\r\n  '--hide-crash-restore-bubble',\r\n  '--hide-scrollbars',\r\n  '--ignore-gpu-blacklist',\r\n  '--metrics-recording-only',\r\n  '--mute-audio',\r\n  '--no-default-browser-check',\r\n  '--no-first-run',\r\n  '--no-pings',\r\n  '--no-sandbox',\r\n  '--no-zygote',\r\n  '--password-store=basic',\r\n  '--use-mock-keychain'\r\n];\r\n\r\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\r\n\r\nconst template = fs.readFileSync(\r\n  __dirname + '/../templates/template.html',\r\n  'utf8'\r\n);\r\n\r\nlet browser;\r\n\r\n/**\r\n * Sets the content for a Puppeteer Page using a predefined template\r\n * and additional scripts. Also, sets the pageerror in order to catch\r\n * and display errors from the window context.\r\n *\r\n * @param {Object} page - The Puppeteer Page object for which the content\r\n * is being set.\r\n */\r\nconst setPageContent = async (page) => {\r\n  await page.setContent(template);\r\n  await page.addScriptTag({ path: __dirname + '/../.cache/sources.js' });\r\n  // eslint-disable-next-line no-undef\r\n  await page.evaluate(() => window.setupHighcharts());\r\n\r\n  page.on('pageerror', async (error) => {\r\n    // TODO: Consider adding a switch here that turns on log(0) logging\r\n    // on page errors.\r\n    // log(0, '[page error]', err);\r\n    await page.$eval(\r\n      '#container',\r\n      (element, errorMessage) => {\r\n        // eslint-disable-next-line no-undef\r\n        if (window._displayErrors) {\r\n          element.innerHTML = errorMessage;\r\n        }\r\n      },\r\n      `<h1>Chart input data error</h1>${error.toString()}`\r\n    );\r\n  });\r\n};\r\n\r\n/**\r\n * Clears the content of a Puppeteer Page based on the specified mode.\r\n *\r\n * @param {Object} page - The Puppeteer Page object to be cleared.\r\n * @param {boolean} hardReset - A flag indicating the type of clearing\r\n * to be performed. If true, navigates to 'about:blank' and resets content\r\n * and scripts. If false, clears the body content by setting a predefined HTML\r\n * structure.\r\n *\r\n * @throws {Error} Logs thrown error if clearing the page content fails.\r\n */\r\nexport const clearPage = async (page, hardReset = false) => {\r\n  try {\r\n    if (hardReset) {\r\n      // Navigate to about:blank\r\n      await page.goto('about:blank');\r\n\r\n      // Set the content and and scripts again\r\n      await setPageContent(page);\r\n    } else {\r\n      // Clear body content\r\n      await page.evaluate(() => {\r\n        document.body.innerHTML =\r\n          '<div id=\"chart-container\"><div id=\"container\"></div></div>';\r\n      });\r\n    }\r\n  } catch (error) {\r\n    logWithStack(\r\n      2,\r\n      error,\r\n      '[browser] Could not clear the content of the page.'\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Creates a new Puppeteer Page within an existing browser instance.\r\n *\r\n * If the browser instance is not available, returns false.\r\n *\r\n * The function creates a new page, disables caching, sets content using\r\n * setPageContent(), and returns the created Puppeteer Page.\r\n *\r\n * @returns {(boolean|object)} Returns false if the browser instance is not\r\n * available, or a Puppeteer Page object representing the newly created page.\r\n */\r\nexport const newPage = async () => {\r\n  if (!browser) return false;\r\n\r\n  const page = await browser.newPage();\r\n\r\n  // Disable cache\r\n  await page.setCacheEnabled(false);\r\n\r\n  // Set the content\r\n  await setPageContent(page);\r\n  return page;\r\n};\r\n\r\n/**\r\n * Creates a Puppeteer browser instance with the specified arguments.\r\n *\r\n * @param {Array} puppeteerArgs - Additional arguments for Puppeteer launch.\r\n *\r\n * @returns {Promise<object>} A Promise resolving to the Puppeteer browser\r\n * instance.\r\n *\r\n * @throws {ExportError} Throws an ExportError if max retries to open a browser\r\n * instance are reached, or if no browser instance is found after retries.\r\n */\r\nexport const create = async (puppeteerArgs) => {\r\n  const allArgs = [...minimalArgs, ...(puppeteerArgs || [])];\r\n\r\n  // Create a browser\r\n  if (!browser) {\r\n    let tryCount = 0;\r\n\r\n    const open = async () => {\r\n      try {\r\n        log(\r\n          3,\r\n          `[browser] Attempting to get a browser instance (try ${++tryCount}).`\r\n        );\r\n        browser = await puppeteer.launch({\r\n          headless: 'new',\r\n          args: allArgs,\r\n          userDataDir: './tmp/'\r\n        });\r\n      } catch (error) {\r\n        logWithStack(\r\n          1,\r\n          error,\r\n          '[browser] Failed to launch a browser instance.'\r\n        );\r\n\r\n        // Retry to launch browser until reaching max attempts\r\n        if (tryCount < 25) {\r\n          log(3, `[browser] Retry to open a browser (${tryCount} out of 25).`);\r\n          await new Promise((response) => setTimeout(response, 4000));\r\n          await open();\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      await open();\r\n    } catch (error) {\r\n      throw new ExportError(\r\n        '[browser] Maximum retries to open a browser instance reached.'\r\n      ).setError(error);\r\n    }\r\n\r\n    if (!browser) {\r\n      throw new ExportError('[browser] Cannot find a browser to open.');\r\n    }\r\n  }\r\n\r\n  // Return a browser promise\r\n  return browser;\r\n};\r\n\r\n/**\r\n * Retrieves the existing Puppeteer browser instance.\r\n *\r\n * @returns {Promise<object>} A Promise resolving to the Puppeteer browser\r\n * instance.\r\n *\r\n * @throws {ExportError} Throws an ExportError if no valid browser has been\r\n * created.\r\n */\r\nexport const get = async () => {\r\n  if (!browser) {\r\n    throw new ExportError('[browser] No valid browser has been created.');\r\n  }\r\n\r\n  return browser;\r\n};\r\n\r\n/**\r\n * Closes the Puppeteer browser instance if it is connected.\r\n *\r\n * @returns {Promise<boolean>} A Promise resolving to true after the browser\r\n * is closed.\r\n */\r\nexport const close = async () => {\r\n  // Close the browser when connnected\r\n  if (browser?.isConnected()) {\r\n    await browser.close();\r\n    log(4, '[browser] Closed the browser.');\r\n  }\r\n  return true;\r\n};\r\n\r\nexport default {\r\n  newPage,\r\n  clearPage,\r\n  get,\r\n  close\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync } from 'fs';\r\nimport path from 'path';\r\nimport * as url from 'url';\r\n\r\nimport cache from './cache.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport svgTemplate from './../templates/svg_export/svg_export.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nconst __basedir = url.fileURLToPath(new URL('.', import.meta.url));\r\n\r\n/**\r\n * Retrieves the clipping region coordinates of the specified page element with\r\n * the id 'chart-container'.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n *\r\n * @returns {Promise<Object>} Promise resolving to an object containing\r\n * x, y, width, and height properties.\r\n */\r\nconst getClipRegion = (page) =>\r\n  page.$eval('#chart-container', (element) => {\r\n    const { x, y, width, height } = element.getBoundingClientRect();\r\n    return {\r\n      x,\r\n      y,\r\n      width,\r\n      height: Math.trunc(height > 1 ? height : 500)\r\n    };\r\n  });\r\n\r\n/**\r\n * Creates an image using Puppeteer's page screenshot functionality with\r\n * specified options.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {string} type - Image type.\r\n * @param {string} encoding - Image encoding.\r\n * @param {Object} clip - Clipping region coordinates.\r\n * @param {number} rasterizationTimeout - Timeout for rasterization\r\n * in milliseconds.\r\n *\r\n * @returns {Promise<Buffer>} Promise resolving to the image buffer or rejecting\r\n * with an ExportError for timeout.\r\n */\r\nconst createImage = (page, type, encoding, clip, rasterizationTimeout) =>\r\n  Promise.race([\r\n    page.screenshot({\r\n      type,\r\n      encoding,\r\n      clip,\r\n\r\n      // #447, #463 - always render on a transparent page if the expected type\r\n      // format is PNG\r\n      omitBackground: type == 'png'\r\n    }),\r\n    new Promise((_resolve, reject) =>\r\n      setTimeout(\r\n        () => reject(new ExportError('Rasterization timeout')),\r\n        rasterizationTimeout || 1500\r\n      )\r\n    )\r\n  ]);\r\n\r\n/**\r\n * Creates a PDF using Puppeteer's page pdf functionality with specified\r\n * options.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {number} height - PDF height.\r\n * @param {number} width - PDF width.\r\n * @param {string} encoding - PDF encoding.\r\n *\r\n * @returns {Promise<Buffer>} Promise resolving to the PDF buffer.\r\n */\r\nconst createPDF = (page, height, width, encoding) =>\r\n  page.pdf({\r\n    // This will remove an extra empty page in PDF exports\r\n    height: height + 1,\r\n    width,\r\n    encoding\r\n  });\r\n\r\n/**\r\n * Creates an SVG string by evaluating the outerHTML of the first 'svg' element\r\n * inside an element with the id 'container'.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n *\r\n * @returns {Promise<string>} Promise resolving to the SVG string.\r\n */\r\nconst createSVG = (page) =>\r\n  page.$eval('#container svg:first-of-type', (element) => element.outerHTML);\r\n\r\n/**\r\n * Sets the specified chart and options as configuration into the triggerExport\r\n * function within the window context using page.evaluate.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {any} chart - The chart object to be configured.\r\n * @param {Object} options - Configuration options for the chart.\r\n *\r\n * @returns {Promise<void>} Promise resolving after the configuration is set.\r\n */\r\nconst setAsConfig = (page, chart, options) =>\r\n  page.evaluate(\r\n    // eslint-disable-next-line no-undef\r\n    (chart, options) => window.triggerExport(chart, options),\r\n    chart,\r\n    options\r\n  );\r\n\r\n/**\r\n * Exports to a chart from a page using Puppeteer.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {any} chart - The chart object or SVG configuration to be exported.\r\n * @param {Object} options - Export options and configuration.\r\n *\r\n * @returns {Promise<string | Buffer | ExportError>} Promise resolving to\r\n * the exported data or rejecting with an ExportError.\r\n */\r\nexport default async (page, chart, options) => {\r\n  /**\r\n   * Keeps track of all resources added on the page with addXXXTag. etc\r\n   * It's VITAL that all added resources ends up here so we can clear things\r\n   * out when doing a new export in the same page!\r\n   */\r\n  const injectedResources = [];\r\n\r\n  /** Clear out all state set on the page with addScriptTag/addStyleTag. */\r\n  const clearInjected = async (page) => {\r\n    for (const res of injectedResources) {\r\n      await res.dispose();\r\n    }\r\n\r\n    // Reset all CSS and script tags\r\n    await page.evaluate(() => {\r\n      // eslint-disable-next-line no-undef\r\n      const [, ...scriptsToRemove] = document.getElementsByTagName('script');\r\n      // eslint-disable-next-line no-undef\r\n      const [, ...stylesToRemove] = document.getElementsByTagName('style');\r\n      // eslint-disable-next-line no-undef\r\n      const [...linksToRemove] = document.getElementsByTagName('link');\r\n\r\n      // Remove tags\r\n      for (const element of [\r\n        ...scriptsToRemove,\r\n        ...stylesToRemove,\r\n        ...linksToRemove\r\n      ]) {\r\n        element.remove();\r\n      }\r\n    });\r\n  };\r\n\r\n  try {\r\n    log(4, '[export] Determining export path.');\r\n\r\n    const exportOptions = options.export;\r\n\r\n    // Force a rAF\r\n    // See https://github.com/puppeteer/puppeteer/issues/7507\r\n    // eslint-disable-next-line no-undef\r\n    await page.evaluate(() => requestAnimationFrame(() => {}));\r\n\r\n    // Decide whether display error or debbuger wrapper around it\r\n    const displayErrors =\r\n      exportOptions?.options?.chart?.displayErrors &&\r\n      cache.getCache().activeManifest.modules.debugger;\r\n\r\n    // eslint-disable-next-line no-undef\r\n    await page.evaluate((d) => (window._displayErrors = d), displayErrors);\r\n\r\n    let isSVG;\r\n    if (\r\n      chart.indexOf &&\r\n      (chart.indexOf('<svg') >= 0 || chart.indexOf('<?xml') >= 0)\r\n    ) {\r\n      // SVG input handling\r\n      log(4, '[export] Treating as SVG.');\r\n\r\n      // If input is also SVG, just return it\r\n      if (exportOptions.type === 'svg') {\r\n        return chart;\r\n      }\r\n\r\n      isSVG = true;\r\n      await page.setContent(svgTemplate(chart));\r\n    } else {\r\n      // JSON config handling\r\n      log(4, '[export] Treating as config.');\r\n\r\n      // Need to perform straight inject\r\n      if (exportOptions.strInj) {\r\n        // Injection based configuration export\r\n        await setAsConfig(\r\n          page,\r\n          {\r\n            chart: {\r\n              height: exportOptions.height,\r\n              width: exportOptions.width\r\n            }\r\n          },\r\n          options\r\n        );\r\n      } else {\r\n        // Basic configuration export\r\n        chart.chart.height = exportOptions.height;\r\n        chart.chart.width = exportOptions.width;\r\n\r\n        await setAsConfig(page, chart, options);\r\n      }\r\n    }\r\n\r\n    // Use resources\r\n    const resources = options.customCode.resources;\r\n    if (resources) {\r\n      // Load custom JS code\r\n      if (resources.js) {\r\n        injectedResources.push(\r\n          await page.addScriptTag({\r\n            content: resources.js\r\n          })\r\n        );\r\n      }\r\n\r\n      // Load scripts from all custom files\r\n      if (resources.files) {\r\n        for (const file of resources.files) {\r\n          try {\r\n            const isLocal = !file.startsWith('http') ? true : false;\r\n\r\n            // Add each custom script from resources' files\r\n            injectedResources.push(\r\n              await page.addScriptTag(\r\n                isLocal\r\n                  ? {\r\n                      content: readFileSync(file, 'utf8')\r\n                    }\r\n                  : {\r\n                      url: file\r\n                    }\r\n              )\r\n            );\r\n          } catch (error) {\r\n            logWithStack(\r\n              2,\r\n              error,\r\n              `[export] The JS file ${file} cannot be loaded.`\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      // Load CSS\r\n      if (resources.css) {\r\n        let cssImports = resources.css.match(/@import\\s*([^;]*);/g);\r\n        if (cssImports) {\r\n          // Handle css section\r\n          for (let cssImportPath of cssImports) {\r\n            if (cssImportPath) {\r\n              cssImportPath = cssImportPath\r\n                .replace('url(', '')\r\n                .replace('@import', '')\r\n                .replace(/\"/g, '')\r\n                .replace(/'/g, '')\r\n                .replace(/;/, '')\r\n                .replace(/\\)/g, '')\r\n                .trim();\r\n\r\n              // Add each custom css from resources\r\n              if (cssImportPath.startsWith('http')) {\r\n                injectedResources.push(\r\n                  await page.addStyleTag({\r\n                    url: cssImportPath\r\n                  })\r\n                );\r\n              } else if (options.customCode.allowFileResources) {\r\n                injectedResources.push(\r\n                  await page.addStyleTag({\r\n                    path: path.join(__basedir, cssImportPath)\r\n                  })\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // The rest of the CSS section will be content by now\r\n        injectedResources.push(\r\n          await page.addStyleTag({\r\n            content: resources.css.replace(/@import\\s*([^;]*);/g, '') || ' '\r\n          })\r\n        );\r\n      }\r\n    }\r\n\r\n    // Get the real chart size\r\n    const size = isSVG\r\n      ? await page.$eval(\r\n          '#chart-container svg:first-of-type',\r\n          (element, scale) => ({\r\n            chartHeight: element.height.baseVal.value * scale,\r\n            chartWidth: element.width.baseVal.value * scale\r\n          }),\r\n          parseFloat(exportOptions.scale)\r\n        )\r\n      : await page.evaluate(() => {\r\n          // eslint-disable-next-line no-undef\r\n          const { chartHeight, chartWidth } = window.Highcharts.charts[0];\r\n          return {\r\n            chartHeight,\r\n            chartWidth\r\n          };\r\n        });\r\n\r\n    // Set final height and width for viewport\r\n    const viewportHeight = Math.ceil(size?.chartHeight || exportOptions.height);\r\n    const viewportWidth = Math.ceil(size?.chartWidth || exportOptions.width);\r\n\r\n    // Set the viewport for the first time\r\n    // NOTE: the call to setViewport is expensive - can we get away with only\r\n    // calling it once, e.g. moving this one into the isSVG condition below?\r\n    await page.setViewport({\r\n      height: viewportHeight,\r\n      width: viewportWidth,\r\n      deviceScaleFactor: isSVG ? 1 : parseFloat(exportOptions.scale)\r\n    });\r\n\r\n    // Prepare a zoom callback for the next evaluate call\r\n    const zoomCallback = isSVG\r\n      ? // In case of SVG the zoom must be set directly for body\r\n        (scale) => {\r\n          // Set the zoom as scale\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.zoom = scale;\r\n\r\n          // Set the margin to 0px\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.margin = '0px';\r\n        }\r\n      : // No need for such scale manipulation in case of other types of exports\r\n        () => {\r\n          // Reset the zoom for other exports than to SVGs\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.zoom = 1;\r\n        };\r\n\r\n    // Set the zoom accordingly\r\n    await page.evaluate(zoomCallback, parseFloat(exportOptions.scale));\r\n\r\n    // Get the clip region for the page\r\n    const { height, width, x, y } = await getClipRegion(page);\r\n\r\n    if (!isSVG) {\r\n      // Set the final viewport now that we have the real height\r\n      await page.setViewport({\r\n        width: Math.round(width),\r\n        height: Math.round(height),\r\n        deviceScaleFactor: parseFloat(exportOptions.scale)\r\n      });\r\n    }\r\n\r\n    let data;\r\n    // RASTERIZATION\r\n    if (exportOptions.type === 'svg') {\r\n      // SVG\r\n      data = await createSVG(page);\r\n    } else if (exportOptions.type === 'png' || exportOptions.type === 'jpeg') {\r\n      // PNG or JPEG\r\n      data = await createImage(\r\n        page,\r\n        exportOptions.type,\r\n        'base64',\r\n        {\r\n          width: viewportWidth,\r\n          height: viewportHeight,\r\n          x,\r\n          y\r\n        },\r\n        exportOptions.rasterizationTimeout\r\n      );\r\n    } else if (exportOptions.type === 'pdf') {\r\n      // PDF\r\n      data = await createPDF(page, viewportHeight, viewportWidth, 'base64');\r\n    } else {\r\n      throw new ExportError(\r\n        `[export] Unsupported output format ${exportOptions.type}.`\r\n      );\r\n    }\r\n\r\n    // Destroy old charts after the export is done\r\n    await page.evaluate(() => {\r\n      // We are not guaranteed that Highcharts is loaded, e,g, when doing SVG\r\n      // exports\r\n      if (typeof Highcharts !== 'undefined') {\r\n        // eslint-disable-next-line no-undef\r\n        const oldCharts = Highcharts.charts;\r\n\r\n        // Check in any already existing charts\r\n        if (Array.isArray(oldCharts) && oldCharts.length) {\r\n          // Destroy old charts\r\n          for (const oldChart of oldCharts) {\r\n            oldChart && oldChart.destroy();\r\n            // eslint-disable-next-line no-undef\r\n            Highcharts.charts.shift();\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    await clearInjected(page);\r\n    return data;\r\n  } catch (error) {\r\n    await clearInjected(page);\r\n    return error;\r\n  }\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport cssTemplate from './css.js';\r\n\r\nexport default (chart) => `\r\n<!DOCTYPE html>\r\n<html lang='en-US'>\r\n  <head>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n    <title>Highcarts Export</title>\r\n  </head>\r\n  <style>\r\n    ${cssTemplate()}\r\n  </style>\r\n  <body>\r\n    <div id=\"chart-container\">\r\n      ${chart}\r\n    </div>\r\n  </body>\r\n</html>\r\n\r\n`;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { Pool } from 'tarn';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport {\r\n  close as browserClose,\r\n  create as createBrowser,\r\n  newPage as browserNewPage,\r\n  clearPage\r\n} from './browser.js';\r\nimport puppeteerExport from './export.js';\r\nimport { log, logWithStack } from './logger.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nlet performedExports = 0;\r\nlet exportAttempts = 0;\r\nlet timeSpent = 0;\r\nlet droppedExports = 0;\r\nlet spentAverage = 0;\r\nlet poolConfig = {};\r\n\r\n// The pool instance\r\nlet pool = false;\r\n\r\n// Custom puppeteer arguments\r\nlet puppeteerArgs;\r\n\r\nconst factory = {\r\n  /**\r\n   * Creates a new worker page for the export pool.\r\n   *\r\n   * @returns {Object} - An object containing the worker ID, a reference to the\r\n   * browser page, and initial work count.\r\n   *\r\n   * @throws {ExportError} - If there's an error during the creation of the new\r\n   * page.\r\n   */\r\n  create: async () => {\r\n    let page = false;\r\n\r\n    const id = uuid();\r\n    const startDate = new Date().getTime();\r\n\r\n    try {\r\n      page = await browserNewPage();\r\n\r\n      if (!page || page.isClosed()) {\r\n        throw new ExportError('The page is invalid or closed.');\r\n      }\r\n\r\n      log(\r\n        3,\r\n        `[pool] Successfully created a worker ${id} - took ${\r\n          new Date().getTime() - startDate\r\n        } ms.`\r\n      );\r\n    } catch (error) {\r\n      throw new ExportError(\r\n        'Error encountered when creating a new page.'\r\n      ).setError(error);\r\n    }\r\n\r\n    return {\r\n      id,\r\n      page,\r\n      // Try to distribute the initial work count\r\n      workCount: Math.round(Math.random() * (poolConfig.workLimit / 2))\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Validates a worker page in the export pool, checking if it has exceeded\r\n   * the work limit.\r\n   *\r\n   * @param {Object} workerHandle - The handle to the worker, containing the\r\n   * worker's ID, a reference to the browser page, and work count.\r\n   *\r\n   * @returns {boolean} - Returns true if the worker is valid and within\r\n   * the work limit; otherwise, returns false.\r\n   */\r\n  validate: async (workerHandle) => {\r\n    if (\r\n      poolConfig.workLimit &&\r\n      ++workerHandle.workCount > poolConfig.workLimit\r\n    ) {\r\n      log(\r\n        3,\r\n        `[pool] Worker failed validation: exceeded work limit (limit is ${poolConfig.workLimit}).`\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // Clear page\r\n    await clearPage(workerHandle.page, true);\r\n    return true;\r\n  },\r\n\r\n  /**\r\n   * Destroys a worker entry in the export pool, closing its associated page.\r\n   *\r\n   * @param {Object} workerHandle - The handle to the worker, containing\r\n   * the worker's ID and a reference to the browser page.\r\n   */\r\n  destroy: (workerHandle) => {\r\n    log(3, `[pool] Destroying pool entry ${workerHandle.id}.`);\r\n\r\n    if (workerHandle.page) {\r\n      // We don't really need to wait around for this.\r\n      workerHandle.page.close();\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Initializes the export pool with the provided configuration, creating\r\n * a browser instance and setting up worker resources.\r\n *\r\n * @param {Object} config - Configuration options for the export pool along\r\n * with custom puppeteer arguments for the puppeteer.launch function.\r\n */\r\nexport const initPool = async (config) => {\r\n  // For the module scope usage\r\n  poolConfig = config && config.pool ? { ...config.pool } : {};\r\n\r\n  // Attach process' exit listeners\r\n  if (poolConfig.listenToProcessExits) {\r\n    attachProcessExitListeners();\r\n  }\r\n\r\n  // The newest puppeteer arguments for the browser creation\r\n  puppeteerArgs = config.puppeteerArgs;\r\n\r\n  // Create a browser instance\r\n  await createBrowser(puppeteerArgs);\r\n\r\n  log(\r\n    3,\r\n    `[pool] Initializing pool with workers: min ${poolConfig.minWorkers}, max ${poolConfig.maxWorkers}.`\r\n  );\r\n\r\n  if (pool) {\r\n    return log(\r\n      4,\r\n      '[pool] Already initialized, please kill it before creating a new one.'\r\n    );\r\n  }\r\n\r\n  if (parseInt(poolConfig.minWorkers) > parseInt(poolConfig.maxWorkers)) {\r\n    poolConfig.minWorkers = poolConfig.maxWorkers;\r\n  }\r\n\r\n  try {\r\n    // Create a pool along with a minimal number of resources\r\n    pool = new Pool({\r\n      // Get the create/validate/destroy/log functions\r\n      ...factory,\r\n      min: parseInt(poolConfig.minWorkers),\r\n      max: parseInt(poolConfig.maxWorkers),\r\n      acquireTimeoutMillis: poolConfig.acquireTimeout,\r\n      createTimeoutMillis: poolConfig.createTimeout,\r\n      destroyTimeoutMillis: poolConfig.destroyTimeout,\r\n      idleTimeoutMillis: poolConfig.idleTimeout,\r\n      createRetryIntervalMillis: poolConfig.createRetryInterval,\r\n      reapIntervalMillis: poolConfig.reaperInterval,\r\n      propagateCreateError: false\r\n    });\r\n\r\n    // Set events\r\n    pool.on('release', async (resource) => {\r\n      // Clear page\r\n      await clearPage(resource.page, false);\r\n      log(4, `[pool] Releasing a worker with ID ${resource.id}.`);\r\n    });\r\n\r\n    pool.on('destroySuccess', (eventId, resource) => {\r\n      log(4, `[pool] Destroyed a worker with ID ${resource.id}.`);\r\n    });\r\n\r\n    const initialResources = [];\r\n    // Create an initial number of resources\r\n    for (let i = 0; i < poolConfig.minWorkers; i++) {\r\n      try {\r\n        const resource = await pool.acquire().promise;\r\n        initialResources.push(resource);\r\n      } catch (error) {\r\n        logWithStack(2, error, '[pool] Could not create an initial resource.');\r\n      }\r\n    }\r\n\r\n    // Release the initial number of resources back to the pool\r\n    initialResources.forEach((resource) => {\r\n      pool.release(resource);\r\n    });\r\n\r\n    log(\r\n      3,\r\n      `[pool] The pool is ready${initialResources.length ? ` with ${initialResources.length} initial resources waiting.` : '.'}`\r\n    );\r\n  } catch (error) {\r\n    // Close browser if for some reason cannot establish the pool\r\n    await browserClose();\r\n    throw new ExportError(\r\n      '[pool] Could not create the pool of workers.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Attaches exit listeners to the process, ensuring proper cleanup of resources\r\n * and termination on exit signals. Handles 'exit', 'SIGINT', 'SIGTERM', and\r\n * 'uncaughtException' events.\r\n */\r\nexport function attachProcessExitListeners() {\r\n  log(3, '[pool] Attaching exit listeners to the process.');\r\n\r\n  // Kill all pool resources on exit\r\n  process.on('exit', async (code) => {\r\n    log(4, `Process exited with code ${code}.`);\r\n    await killPool();\r\n  });\r\n\r\n  // Handler for the SIGINT\r\n  process.on('SIGINT', (name, code) => {\r\n    log(4, `The ${name} event with code: ${code}.`);\r\n    process.exit(1);\r\n  });\r\n\r\n  // Handler for the SIGTERM\r\n  process.on('SIGTERM', (name, code) => {\r\n    log(4, `The ${name} event with code: ${code}.`);\r\n    process.exit(1);\r\n  });\r\n\r\n  // Handler for the uncaughtException\r\n  process.on('uncaughtException', async (error, name) => {\r\n    logWithStack(1, error, `The ${name} error.`);\r\n    await killPool();\r\n    process.exit(1);\r\n  });\r\n}\r\n\r\n/**\r\n * Kills all workers in the pool, destroys the pool, and closes the browser\r\n * instance.\r\n *\r\n * @returns {Promise<void>} A promise that resolves after the workers are\r\n * killed, the pool is destroyed, and the browser is closed.\r\n */\r\nexport async function killPool() {\r\n  log(3, '[pool] Killing all pool workers and browser, if any exist.');\r\n\r\n  // Return true when the pool is already destroyed\r\n  if (pool?.destroyed) {\r\n    // Close the browser instance if still connected\r\n    return browserClose();\r\n  }\r\n\r\n  // If still alive, destroy the pool of pages before closing a browser\r\n  if (pool) {\r\n    await pool.destroy();\r\n    log(4, '[browser] Destroyed the pool of resources.');\r\n  }\r\n\r\n  // Close the browser instance\r\n  return browserClose();\r\n}\r\n\r\n/**\r\n * Processes the export work using a worker from the pool. Acquires a worker\r\n * handle from the pool, performs the export using puppeteer, and releases\r\n * the worker handle back to the pool.\r\n *\r\n * @param {string} chart - The chart data or configuration to be exported.\r\n * @param {Object} options - Export options and configuration.\r\n *\r\n * @returns {Promise<Object>} A promise that resolves with the export resultand\r\n * options.\r\n *\r\n * @throws {ExportError} If an error occurs during the export process.\r\n */\r\nexport const postWork = async (chart, options) => {\r\n  let workerHandle;\r\n\r\n  try {\r\n    log(4, '[pool] Work received, starting to process.');\r\n\r\n    ++exportAttempts;\r\n    if (poolConfig.benchmarking) {\r\n      getPoolInfo();\r\n    }\r\n\r\n    if (!pool) {\r\n      throw new ExportError('Work received, but pool has not been started.');\r\n    }\r\n\r\n    // Acquire the worker along with the id of resource and work count\r\n    try {\r\n      log(4, '[pool] Acquiring a worker handle.');\r\n      workerHandle = await pool.acquire().promise;\r\n    } catch (error) {\r\n      throw new ExportError(\r\n        'Error encountered when acquiring an available entry.'\r\n      ).setError(error);\r\n    }\r\n    log(4, '[pool] Acquired a worker handle.');\r\n\r\n    if (!workerHandle.page) {\r\n      throw new ExportError(\r\n        'Resolved worker page is invalid: the pool setup is wonky.'\r\n      );\r\n    }\r\n\r\n    // Save the start time\r\n    let workStart = new Date().getTime();\r\n\r\n    log(4, `[pool] Starting work on pool entry with ID ${workerHandle.id}.`);\r\n\r\n    // Perform an export on a puppeteer level\r\n    const result = await puppeteerExport(workerHandle.page, chart, options);\r\n\r\n    // Check if it's an error\r\n    if (result instanceof Error) {\r\n      // TODO: If the export failed because puppeteer timed out, we need to force kill the worker so we get a new page. That needs to be handled better than this hack.\r\n      if (result.message === 'Rasterization timeout') {\r\n        workerHandle.page.close();\r\n        workerHandle.page = await browserNewPage();\r\n      }\r\n\r\n      throw new ExportError('Error encountered during export.').setError(\r\n        result\r\n      );\r\n    }\r\n\r\n    // Release the resource back to the pool\r\n    pool.release(workerHandle);\r\n\r\n    // Used for statistics in averageTime and processedWorkCount, which\r\n    // in turn is used by the /health route.\r\n    const workEnd = new Date().getTime();\r\n    const exportTime = workEnd - workStart;\r\n    timeSpent += exportTime;\r\n    spentAverage = timeSpent / ++performedExports;\r\n\r\n    log(4, `[pool] Work completed in ${exportTime} ms.`);\r\n\r\n    // Otherwise return the result\r\n    return {\r\n      result,\r\n      options\r\n    };\r\n  } catch (error) {\r\n    ++droppedExports;\r\n\r\n    if (workerHandle) {\r\n      pool.release(workerHandle);\r\n    }\r\n\r\n    throw new ExportError(`[pool] In pool.postWork: ${error.message}`).setError(\r\n      error\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves the current pool instance.\r\n *\r\n * @returns {Object|null} The current pool instance if initialized, or null\r\n * if the pool has not been created.\r\n */\r\nexport function getPool() {\r\n  return pool;\r\n}\r\n\r\n/**\r\n * Retrieves pool information in JSON format, including minimum and maximum\r\n * workers, available workers, workers in use, and pending acquire requests.\r\n *\r\n * @returns {Object} Pool information in JSON format.\r\n */\r\nexport const getPoolInfoJSON = () => ({\r\n  min: pool.min,\r\n  max: pool.max,\r\n  available: pool.numFree(),\r\n  inUse: pool.numUsed(),\r\n  pendingAcquire: pool.numPendingAcquires()\r\n});\r\n\r\n/**\r\n * Logs information about the current state of the pool, including the minimum\r\n * and maximum workers, available workers, workers in use, and pending acquire\r\n * requests.\r\n */\r\nexport function getPoolInfo() {\r\n  const { min, max } = pool;\r\n\r\n  log(4, `[pool] The minimum number of resources allowed by pool: ${min}.`);\r\n  log(4, `[pool] The maximum number of resources allowed by pool: ${max}.`);\r\n  log(\r\n    4,\r\n    `[pool] The number of resources that are currently available: ${pool.numFree()}.`\r\n  );\r\n  log(\r\n    4,\r\n    `[pool] The number of resources that are currently acquired: ${pool.numUsed()}.`\r\n  );\r\n  log(\r\n    4,\r\n    `[pool] The number of callers waiting to acquire a resource: ${pool.numPendingAcquires()}.`\r\n  );\r\n}\r\n\r\nexport default {\r\n  initPool,\r\n  killPool,\r\n  postWork,\r\n  getPool,\r\n  getPoolInfo,\r\n  getPoolInfoJSON,\r\n  workAttempts: () => exportAttempts,\r\n  droppedWork: () => droppedExports,\r\n  averageTime: () => spentAverage,\r\n  processedWorkCount: () => performedExports\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync, writeFileSync } from 'fs';\r\n\r\nimport { getOptions, initExportSettings } from './config.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport { killPool, postWork } from './pool.js';\r\nimport {\r\n  fixType,\r\n  handleResources,\r\n  isCorrectJSON,\r\n  optionsStringify,\r\n  roundNumber,\r\n  toBoolean,\r\n  wrapAround\r\n} from './utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nlet allowCodeExecution = false;\r\n\r\n/**\r\n * Starts an export process. The `settings` contains final options gathered\r\n * from all possible sources (config, env, cli, json). The `endCallback` is\r\n * called when the export is completed, with an error object as the first\r\n * argument and the second containing the base64 respresentation of a chart.\r\n *\r\n * @param {Object} settings - The settings object containing export\r\n * configuration.\r\n * @param {function} endCallback - The callback function to be invoked upon\r\n * finalizing work or upon error occurance of the exporting process.\r\n *\r\n * @returns {void} This function does not return a value directly; instead,\r\n * it communicates results via the endCallback.\r\n */\r\nexport const startExport = async (settings, endCallback) => {\r\n  // Starting exporting process message\r\n  log(4, '[chart] Starting the exporting process.');\r\n\r\n  // Initialize options\r\n  const options = initExportSettings(settings, getOptions());\r\n\r\n  // Get the export options\r\n  const exportOptions = options.export;\r\n\r\n  // If SVG is an input (argument can be sent only by the request)\r\n  if (options.payload?.svg && options.payload.svg !== '') {\r\n    try {\r\n      log(4, '[chart] Attempting to export from a SVG input.');\r\n      return exportAsString(options.payload.svg.trim(), options, endCallback);\r\n    } catch (error) {\r\n      return endCallback(\r\n        new ExportError('[chart] Error loading SVG input.').setError(error)\r\n      );\r\n    }\r\n  }\r\n\r\n  // Export using options from the file\r\n  if (exportOptions.infile && exportOptions.infile.length) {\r\n    // Try to read the file to get the string representation\r\n    try {\r\n      log(4, '[chart] Attempting to export from an input file.');\r\n      options.export.instr = readFileSync(exportOptions.infile, 'utf8');\r\n      return exportAsString(options.export.instr.trim(), options, endCallback);\r\n    } catch (error) {\r\n      return endCallback(\r\n        new ExportError('[chart] Error loading input file.').setError(error)\r\n      );\r\n    }\r\n  }\r\n\r\n  // Export with options from the raw representation\r\n  if (\r\n    (exportOptions.instr && exportOptions.instr !== '') ||\r\n    (exportOptions.options && exportOptions.options !== '')\r\n  ) {\r\n    try {\r\n      log(4, '[chart] Attempting to export from a raw input.');\r\n\r\n      // Perform a direct inject when forced\r\n      if (toBoolean(options.customCode?.allowCodeExecution)) {\r\n        return doStraightInject(options, endCallback);\r\n      }\r\n\r\n      // Either try to parse to JSON first or do the direct export\r\n      return typeof exportOptions.instr === 'string'\r\n        ? exportAsString(exportOptions.instr.trim(), options, endCallback)\r\n        : doExport(\r\n            options,\r\n            exportOptions.instr || exportOptions.options,\r\n            endCallback\r\n          );\r\n    } catch (error) {\r\n      return endCallback(\r\n        new ExportError('[chart] Error loading raw input.').setError(error)\r\n      );\r\n    }\r\n  }\r\n\r\n  // No input specified, pass an error message to the callback\r\n  return endCallback(\r\n    new ExportError(\r\n      `[chart] No valid input specified. Check if at least one of the following parameters is correctly set: 'infile', 'instr', 'options', or 'svg'.`\r\n    )\r\n  );\r\n};\r\n\r\n/**\r\n * Starts a batch export process for multiple charts based on the information\r\n * in the batch option. The batch is a string in the following format:\r\n * \"infile1.json=outfile1.png;infile2.json=outfile2.png;...\"\r\n *\r\n * @param {Object} options - The options object containing configuration for\r\n * a batch export.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the batch export\r\n * process is completed.\r\n *\r\n * @throws {ExportError} Throws an ExportError if an error occurs during\r\n * any of the batch export process.\r\n */\r\nexport const batchExport = async (options) => {\r\n  const batchFunctions = [];\r\n\r\n  // Split and pair the --batch arguments\r\n  for (let pair of options.export.batch.split(';')) {\r\n    pair = pair.split('=');\r\n    if (pair.length === 2) {\r\n      batchFunctions.push(\r\n        startExport(\r\n          {\r\n            ...options,\r\n            export: {\r\n              ...options.export,\r\n              infile: pair[0],\r\n              outfile: pair[1]\r\n            }\r\n          },\r\n          (error, info) => {\r\n            // Throw an error\r\n            if (error) {\r\n              throw error;\r\n            }\r\n\r\n            // Save the base64 from a buffer to a correct image file\r\n            writeFileSync(\r\n              info.options.export.outfile,\r\n              Buffer.from(info.result, 'base64')\r\n            );\r\n          }\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  try {\r\n    // Await all exports are done\r\n    await Promise.all(batchFunctions);\r\n\r\n    // Kill pool and close browser after finishing batch export\r\n    await killPool();\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[chart] Error encountered during batch export.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Starts a single export process based on the specified options.\r\n *\r\n * @param {Object} options - The options object containing configuration for\r\n * a single export.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the single export\r\n * process is completed.\r\n *\r\n * @throws {ExportError} Throws an ExportError if an error occurs during\r\n * the single export process.\r\n */\r\nexport const singleExport = async (options) => {\r\n  // Use instr or its alias, options\r\n  options.export.instr = options.export.instr || options.export.options;\r\n\r\n  // Perform an export\r\n  await startExport(options, async (error, info) => {\r\n    // Exit process when error\r\n    if (error) {\r\n      throw error;\r\n    }\r\n\r\n    const { outfile, type } = info.options.export;\r\n\r\n    // Save the base64 from a buffer to a correct image file\r\n    writeFileSync(\r\n      outfile || `chart.${type}`,\r\n      type !== 'svg' ? Buffer.from(info.result, 'base64') : info.result\r\n    );\r\n\r\n    // Kill the pool\r\n    await killPool();\r\n  });\r\n};\r\n\r\n/**\r\n * Determines the size and scale for chart export based on the provided options.\r\n *\r\n * @param {Object} options - The options object containing configuration for\r\n * chart export.\r\n *\r\n * @returns {Object} An object containing the calculated height, width,\r\n * and scale for the chart export.\r\n */\r\nexport const findChartSize = (options) => {\r\n  const { chart, exporting } =\r\n    options.export?.options || isCorrectJSON(options.export?.instr);\r\n\r\n  // See if globalOptions holds chart or exporting size\r\n  const globalOptions = isCorrectJSON(options.export?.globalOptions);\r\n\r\n  // Secure scale value\r\n  let scale =\r\n    options.export?.scale ||\r\n    exporting?.scale ||\r\n    globalOptions?.exporting?.scale ||\r\n    options.export?.defaultScale ||\r\n    1;\r\n\r\n  // the scale cannot be lower than 0.1 and cannot be higher than 5.0\r\n  scale = Math.max(0.1, Math.min(scale, 5.0));\r\n\r\n  // we want to round the numbers like 0.23234 -> 0.23\r\n  scale = roundNumber(scale, 2);\r\n\r\n  // Find chart size and scale\r\n  const size = {\r\n    height:\r\n      options.export?.height ||\r\n      exporting?.sourceHeight ||\r\n      chart?.height ||\r\n      globalOptions?.exporting?.sourceHeight ||\r\n      globalOptions?.chart?.height ||\r\n      options.export?.defaultHeight ||\r\n      400,\r\n    width:\r\n      options.export?.width ||\r\n      exporting?.sourceWidth ||\r\n      chart?.width ||\r\n      globalOptions?.exporting?.sourceWidth ||\r\n      globalOptions?.chart?.width ||\r\n      options.export?.defaultWidth ||\r\n      600,\r\n    scale\r\n  };\r\n\r\n  // Get rid of potential px and %\r\n  for (let [param, value] of Object.entries(size)) {\r\n    size[param] =\r\n      typeof value === 'string' ? +value.replace(/px|%/gi, '') : value;\r\n  }\r\n  return size;\r\n};\r\n\r\n/**\r\n * Function for finalizing options before export.\r\n *\r\n * @param {Object} options - The options object containing configuration for\r\n * the export process.\r\n * @param {Object} chartJson - The JSON representation of the chart.\r\n * @param {Function} endCallback - The callback function to be called upon\r\n * completion or error.\r\n * @param {string} svg - The SVG representation of the chart.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the export process\r\n * is completed.\r\n */\r\nconst doExport = async (options, chartJson, endCallback, svg) => {\r\n  let { export: exportOptions, customCode: customCodeOptions } = options;\r\n\r\n  const allowCodeExecutionScoped =\r\n    typeof customCodeOptions.allowCodeExecution === 'boolean'\r\n      ? customCodeOptions.allowCodeExecution\r\n      : allowCodeExecution;\r\n\r\n  if (!customCodeOptions) {\r\n    customCodeOptions = options.customCode = {};\r\n  } else if (allowCodeExecutionScoped) {\r\n    if (typeof options.customCode.resources === 'string') {\r\n      // Process resources\r\n      options.customCode.resources = handleResources(\r\n        options.customCode.resources,\r\n        toBoolean(options.customCode.allowFileResources)\r\n      );\r\n    } else if (!options.customCode.resources) {\r\n      try {\r\n        const resources = readFileSync('resources.json', 'utf8');\r\n        options.customCode.resources = handleResources(\r\n          resources,\r\n          toBoolean(options.customCode.allowFileResources)\r\n        );\r\n      } catch (error) {\r\n        logWithStack(\r\n          2,\r\n          error,\r\n          `[chart] Unable to load the default resources.json file.`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // If the allowCodeExecution flag isn't set, we should refuse the usage\r\n  // of callback, resources, and custom code. Additionally, the worker will\r\n  // refuse to run arbitrary JavaScript. Prioritized should be the scoped\r\n  // option, then we should take a look at the overall pool option.\r\n  if (!allowCodeExecutionScoped && customCodeOptions) {\r\n    if (\r\n      customCodeOptions.callback ||\r\n      customCodeOptions.resources ||\r\n      customCodeOptions.customCode\r\n    ) {\r\n      // Send back a friendly message saying that the exporter does not support\r\n      // these settings.\r\n      return endCallback(\r\n        new ExportError(\r\n          `[chart] The 'callback', 'resources' and 'customCode' options have been disabled for this server.`\r\n        )\r\n      );\r\n    }\r\n\r\n    // Reset all additional custom code\r\n    customCodeOptions.callback = false;\r\n    customCodeOptions.resources = false;\r\n    customCodeOptions.customCode = false;\r\n  }\r\n\r\n  // Clean properties to keep it lean and mean\r\n  if (chartJson) {\r\n    chartJson.chart = chartJson.chart || {};\r\n    chartJson.exporting = chartJson.exporting || {};\r\n    chartJson.exporting.enabled = false;\r\n  }\r\n\r\n  exportOptions.constr = exportOptions.constr || 'chart';\r\n  exportOptions.type = fixType(exportOptions.type, exportOptions.outfile);\r\n  if (exportOptions.type === 'svg') {\r\n    exportOptions.width = false;\r\n  }\r\n\r\n  // Prepare global and theme options\r\n  ['globalOptions', 'themeOptions'].forEach((optionsName) => {\r\n    try {\r\n      if (exportOptions && exportOptions[optionsName]) {\r\n        if (\r\n          typeof exportOptions[optionsName] === 'string' &&\r\n          exportOptions[optionsName].endsWith('.json')\r\n        ) {\r\n          exportOptions[optionsName] = isCorrectJSON(\r\n            readFileSync(exportOptions[optionsName], 'utf8'),\r\n            true\r\n          );\r\n        } else {\r\n          exportOptions[optionsName] = isCorrectJSON(\r\n            exportOptions[optionsName],\r\n            true\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      exportOptions[optionsName] = {};\r\n      logWithStack(2, error, `[chart] The '${optionsName}' cannot be loaded.`);\r\n    }\r\n  });\r\n\r\n  // Prepare customCode\r\n  if (customCodeOptions.allowCodeExecution) {\r\n    try {\r\n      customCodeOptions.customCode = wrapAround(\r\n        customCodeOptions.customCode,\r\n        customCodeOptions.allowFileResources\r\n      );\r\n    } catch (error) {\r\n      logWithStack(2, error, `[chart] The 'customCode' cannot be loaded.`);\r\n    }\r\n  }\r\n\r\n  // Get the callback\r\n  if (\r\n    customCodeOptions &&\r\n    customCodeOptions.callback &&\r\n    customCodeOptions.callback?.indexOf('{') < 0\r\n  ) {\r\n    // The allowFileResources is always set to false for HTTP requests to avoid\r\n    // injecting arbitrary files from the fs\r\n    if (customCodeOptions.allowFileResources) {\r\n      try {\r\n        customCodeOptions.callback = readFileSync(\r\n          customCodeOptions.callback,\r\n          'utf8'\r\n        );\r\n      } catch (error) {\r\n        customCodeOptions.callback = false;\r\n        logWithStack(2, error, `[chart] The 'callback' cannot be loaded.`);\r\n      }\r\n    } else {\r\n      customCodeOptions.callback = false;\r\n    }\r\n  }\r\n\r\n  // Size search\r\n  options.export = {\r\n    ...options.export,\r\n    ...findChartSize(options)\r\n  };\r\n\r\n  // Post the work to the pool\r\n  try {\r\n    const result = await postWork(\r\n      exportOptions.strInj || chartJson || svg,\r\n      options\r\n    );\r\n    return endCallback(false, result);\r\n  } catch (error) {\r\n    return endCallback(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Performs a direct inject of options before export. The function attempts\r\n * to stringify the provided options and removes unnecessary characters,\r\n * ensuring a clean and formatted input. The resulting string is saved as\r\n * a \"stright inject\" string in the export options. It then invokes the\r\n * doExport function with the updated options.\r\n *\r\n * IMPORTANT: Dangerous and must be used deliberately by someone who sets up\r\n * a server (see the  --allowCodeExecution option).\r\n *\r\n * @param {Object} options - The export options containing the input\r\n * to be injected.\r\n * @param {function} endCallback - The callback function to be invoked\r\n * at the end of the process.\r\n *\r\n * @returns {Promise} A Promise that resolves with the result of the export\r\n * operation or rejects with an error if any issues occur during the process.\r\n */\r\nconst doStraightInject = (options, endCallback) => {\r\n  try {\r\n    let strInj;\r\n    let instr = options.export.instr || options.export.options;\r\n\r\n    if (typeof instr !== 'string') {\r\n      // Try to stringify options\r\n      strInj = instr = optionsStringify(\r\n        instr,\r\n        options.customCode?.allowCodeExecution\r\n      );\r\n    }\r\n    strInj = instr.replaceAll(/\\t|\\n|\\r/g, '').trim();\r\n\r\n    // Get rid of the ;\r\n    if (strInj[strInj.length - 1] === ';') {\r\n      strInj = strInj.substring(0, strInj.length - 1);\r\n    }\r\n\r\n    // Save as stright inject string\r\n    options.export.strInj = strInj;\r\n    return doExport(options, false, endCallback);\r\n  } catch (error) {\r\n    return endCallback(\r\n      new ExportError(\r\n        `[chart] Malformed input detected for ${options.export?.requestId || '?'}. Please make sure that your JSON/JavaScript options are sent using the \"options\" attribute, and that if you're using SVG, it is unescaped.`\r\n      ).setError(error)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Exports a string based on the provided options and invokes an end callback.\r\n *\r\n * @param {string} stringToExport - The string content to be exported.\r\n * @param {Object} options - Export options, including customCode with\r\n * allowCodeExecution flag.\r\n * @param {Function} endCallback - Callback function to be invoked at the end\r\n * of the export process.\r\n *\r\n * @returns {any} Result of the export process or an error if encountered.\r\n */\r\nconst exportAsString = (stringToExport, options, endCallback) => {\r\n  const { allowCodeExecution } = options.customCode;\r\n\r\n  // Check if it is SVG\r\n  if (\r\n    stringToExport.indexOf('<svg') >= 0 ||\r\n    stringToExport.indexOf('<?xml') >= 0\r\n  ) {\r\n    log(4, '[chart] Parsing input as SVG.');\r\n    return doExport(options, false, endCallback, stringToExport);\r\n  }\r\n\r\n  try {\r\n    // Try to parse to JSON and call the doExport function\r\n    const chartJSON = JSON.parse(stringToExport.replaceAll(/\\t|\\n|\\r/g, ' '));\r\n\r\n    // If a correct JSON, do the export\r\n    return doExport(options, chartJSON, endCallback);\r\n  } catch (error) {\r\n    // Not a valid JSON\r\n    if (toBoolean(allowCodeExecution)) {\r\n      return doStraightInject(options, endCallback);\r\n    } else {\r\n      // Do not allow straight injection without the allowCodeExecution flag\r\n      return endCallback(\r\n        new ExportError(\r\n          '[chart] Only JSON configurations and SVG are allowed for this server. If this is your server, JavaScript custom code can be enabled by starting the server with the --allowCodeExecution flag.'\r\n        ).setError(error)\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves and returns the current status of code execution permission.\r\n *\r\n * @returns {any} The value of allowCodeExecution.\r\n */\r\nexport const getAllowCodeExecution = () => allowCodeExecution;\r\n\r\n/**\r\n * Sets the code execution permission based on the provided boolean value.\r\n *\r\n * @param {any} value - The value to be converted and assigned\r\n * to allowCodeExecution.\r\n */\r\nexport const setAllowCodeExecution = (value) => {\r\n  allowCodeExecution = toBoolean(value);\r\n};\r\n\r\nexport default {\r\n  batchExport,\r\n  singleExport,\r\n  getAllowCodeExecution,\r\n  setAllowCodeExecution,\r\n  startExport,\r\n  findChartSize\r\n};\r\n","import { logWithStack } from '../logger.js';\r\n\r\n/**\r\n * Middleware for logging errors with stack trace and handling error response.\r\n *\r\n * @param {Error} error - The error object.\r\n * @param {Express.Request} req - The Express request object.\r\n * @param {Express.Response} res - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n */\r\nconst logErrorMiddleware = (error, req, res, next) => {\r\n  // Display the error with stack in a correct format\r\n  logWithStack(1, error);\r\n\r\n  // Delete the stack for the environment other than the development\r\n  if (process.env.NODE_ENV !== 'development') {\r\n    delete error.stack;\r\n  }\r\n\r\n  // Call the returnErrorMiddleware\r\n  next(error);\r\n};\r\n\r\n/**\r\n * Middleware for returning error response.\r\n *\r\n * @param {Error} error - The error object.\r\n * @param {Express.Request} req - The Express request object.\r\n * @param {Express.Response} res - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n */\r\nconst returnErrorMiddleware = (error, req, res, next) => {\r\n  // Gather all requied information for the response\r\n  const { statusCode: stCode, status, message, stack } = error;\r\n  const statusCode = stCode || status || 500;\r\n\r\n  // Set and return response\r\n  res.status(statusCode).json({ statusCode, message, stack });\r\n};\r\n\r\nexport default (app) => {\r\n  // Add log error middleware\r\n  app.use(logErrorMiddleware);\r\n\r\n  // Add set status and return error middleware\r\n  app.use(returnErrorMiddleware);\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport rateLimit from 'express-rate-limit';\r\n\r\nimport { log } from '../logger.js';\r\n\r\n/**\r\n * Middleware for enabling rate limiting on the specified Express app.\r\n *\r\n * @param {Express} app - The Express app instance.\r\n * @param {Object} limitConfig - Configuration options for rate limiting.\r\n */\r\nexport default (app, limitConfig) => {\r\n  const msg =\r\n    'Too many requests, you have been rate limited. Please try again later.';\r\n\r\n  // Options for the rate limiter\r\n  const rateOptions = {\r\n    max: limitConfig.maxRequests || 30,\r\n    window: limitConfig.window || 1,\r\n    delay: limitConfig.delay || 0,\r\n    trustProxy: limitConfig.trustProxy || false,\r\n    skipKey: limitConfig.skipKey || false,\r\n    skipToken: limitConfig.skipToken || false\r\n  };\r\n\r\n  // Set if behind a proxy\r\n  if (rateOptions.trustProxy) {\r\n    app.enable('trust proxy');\r\n  }\r\n\r\n  // Create a limiter\r\n  const limiter = rateLimit({\r\n    windowMs: rateOptions.window * 60 * 1000,\r\n    // Limit each IP to 100 requests per windowMs\r\n    max: rateOptions.max,\r\n    // Disable delaying, full speed until the max limit is reached\r\n    delayMs: rateOptions.delay,\r\n    handler: (request, response) => {\r\n      response.format({\r\n        json: () => {\r\n          response.status(429).send({ message: msg });\r\n        },\r\n        default: () => {\r\n          response.status(429).send(msg);\r\n        }\r\n      });\r\n    },\r\n    skip: (request) => {\r\n      // Allow bypassing the limiter if a valid key/token has been sent\r\n      if (\r\n        rateOptions.skipKey !== false &&\r\n        rateOptions.skipToken !== false &&\r\n        request.query.key === rateOptions.skipKey &&\r\n        request.query.access_token === rateOptions.skipToken\r\n      ) {\r\n        log(4, '[rate limiting] Skipping rate limiter.');\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  });\r\n\r\n  // Use a limiter as a middleware\r\n  app.use(limiter);\r\n\r\n  log(\r\n    3,\r\n    `[rate limiting] Enabled rate limiting with ${rateOptions.max} requests per ${rateOptions.window} minute for each IP, trusting proxy: ${rateOptions.trustProxy}.`\r\n  );\r\n};\r\n","import ExportError from './ExportError.js';\r\n\r\nclass HttpError extends ExportError {\r\n  constructor(message, status) {\r\n    super(message);\r\n    this.status = this.statusCode = status;\r\n  }\r\n\r\n  setStatus(status) {\r\n    this.status = status;\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default HttpError;\r\n","import HttpError from './HttpError.js';\r\n\r\nclass BadRequestError extends HttpError {\r\n  constructor(message, error) {\r\n    super(message || 'Bad request', 400);\r\n    if (error) {\r\n      this.stack = error.stack;\r\n    }\r\n  }\r\n}\r\n\r\nexport default BadRequestError;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { getAllowCodeExecution, startExport } from '../../chart.js';\r\nimport { getOptions, mergeConfigOptions } from '../../config.js';\r\nimport { log } from '../../logger.js';\r\nimport {\r\n  fixType,\r\n  isCorrectJSON,\r\n  isObjectEmpty,\r\n  isPrivateRangeUrlFound,\r\n  optionsStringify,\r\n  measureTime\r\n} from '../../utils.js';\r\n\r\nimport BadRequestError from '../../errors/BadRequestError.js';\r\n\r\n// Reversed MIME types\r\nconst reversedMime = {\r\n  png: 'image/png',\r\n  jpeg: 'image/jpeg',\r\n  gif: 'image/gif',\r\n  pdf: 'application/pdf',\r\n  svg: 'image/svg+xml'\r\n};\r\n\r\n// The requests counter\r\nlet requestsCounter = 0;\r\n\r\nconst benchmark = false;\r\n\r\n// The array of callbacks to call before a request\r\nconst beforeRequest = [];\r\n\r\n// The array of callbacks to call after a request\r\nconst afterRequest = [];\r\n\r\n/**\r\n * Invokes an array of callback functions with specified parameters, allowing\r\n * customization of request handling.\r\n *\r\n * @param {Function[]} callbacks - An array of callback functions\r\n * to be executed.\r\n * @param {Express.Request} request - The Express request object.\r\n * @param {Express.Response} response - The Express response object.\r\n * @param {Object} data - An object containing parameters like id, uniqueId,\r\n * type, and body.\r\n *\r\n * @returns {boolean} - Returns a boolean indicating the overall result\r\n * of the callback invocations.\r\n */\r\nconst doCallbacks = (callbacks, request, response, data) => {\r\n  let result = true;\r\n  const { id, uniqueId, type, body } = data;\r\n\r\n  callbacks.some((callback) => {\r\n    if (callback) {\r\n      let callResponse = callback(request, response, id, uniqueId, type, body);\r\n\r\n      if (callResponse !== undefined && callResponse !== true) {\r\n        result = callResponse;\r\n      }\r\n\r\n      return true;\r\n    }\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Handles the export requests from the client.\r\n *\r\n * @param {Express.Request} request - The Express request object.\r\n * @param {Express.Response} response - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n *\r\n * @returns {Promise<void>} - A promise that resolves once the export process\r\n * is complete.\r\n */\r\nconst exportHandler = async (request, response, next) => {\r\n  try {\r\n    // Start counting time\r\n    const stopCounter = measureTime();\r\n\r\n    // Get the current server's general options\r\n    const defaultOptions = getOptions();\r\n\r\n    // Init default options\r\n    if (benchmark) {\r\n      console.log(\r\n        `[benchmark] Init default options: ${stopCounter()}ms.`.green\r\n      );\r\n    }\r\n\r\n    const body = request.body;\r\n    const id = ++requestsCounter;\r\n    const uniqueId = uuid().replace(/-/g, '');\r\n    let type = fixType(body.type);\r\n\r\n    // Fix type\r\n    if (benchmark) {\r\n      console.log(`[benchmark] Fix type: ${stopCounter()}ms.`.green);\r\n    }\r\n\r\n    // Throw 'Bad Request' if there's no body\r\n    if (!body || isObjectEmpty(body)) {\r\n      throw new BadRequestError(\r\n        'The request body is required. Please ensure that your Content-Type header is correct (accepted types are application/json and multipart/form-data).'\r\n      );\r\n    }\r\n\r\n    // All of the below can be used\r\n    let instr = isCorrectJSON(body.infile || body.options || body.data);\r\n\r\n    // Is correct JSON\r\n    if (benchmark) {\r\n      console.log(`[benchmark] Is correct JSON: ${stopCounter()}ms.`.green);\r\n    }\r\n\r\n    // Throw 'Bad Request' if there's no JSON or SVG to export\r\n    if (!instr && !body.svg) {\r\n      log(\r\n        2,\r\n        `The request with ID ${uniqueId} from ${\r\n          request.headers['x-forwarded-for'] || request.connection.remoteAddress\r\n        } was incorrect. Payload received: ${JSON.stringify(body)}.`\r\n      );\r\n\r\n      throw new BadRequestError(\r\n        \"No correct chart data found. Ensure that you are using either application/json or multipart/form-data headers. If sending JSON, make sure the chart data is in the 'infile', 'options', or 'data' attribute. If sending SVG, ensure it is in the 'svg' attribute.\"\r\n      );\r\n    }\r\n\r\n    let callResponse = false;\r\n\r\n    // Call the before request functions\r\n    callResponse = doCallbacks(beforeRequest, request, response, {\r\n      id,\r\n      uniqueId,\r\n      type,\r\n      body\r\n    });\r\n\r\n    // Do callbacks\r\n    if (benchmark) {\r\n      console.log(`[benchmark] Do callbacks: ${stopCounter()}ms.`.green);\r\n    }\r\n\r\n    // Block the request if one of a callbacks failed\r\n    if (callResponse !== true) {\r\n      return response.send(callResponse);\r\n    }\r\n\r\n    let connectionAborted = false;\r\n\r\n    // In case the connection is closed, force to abort further actions\r\n    request.socket.on('close', () => {\r\n      connectionAborted = true;\r\n    });\r\n\r\n    log(4, `[export] Got an incoming HTTP request with ID ${uniqueId}.`);\r\n\r\n    body.constr = (typeof body.constr === 'string' && body.constr) || 'chart';\r\n\r\n    // Gather and organize options from the payload\r\n    const requestOptions = {\r\n      export: {\r\n        instr,\r\n        type,\r\n        constr: body.constr[0].toLowerCase() + body.constr.substr(1),\r\n        height: body.height,\r\n        width: body.width,\r\n        scale: body.scale || defaultOptions.export.scale,\r\n        globalOptions: isCorrectJSON(body.globalOptions, true),\r\n        themeOptions: isCorrectJSON(body.themeOptions, true)\r\n      },\r\n      customCode: {\r\n        allowCodeExecution: getAllowCodeExecution(),\r\n        allowFileResources: false,\r\n        resources: isCorrectJSON(body.resources, true),\r\n        callback: body.callback,\r\n        customCode: body.customCode\r\n      }\r\n    };\r\n\r\n    // Organize options\r\n    if (benchmark) {\r\n      console.log(`[benchmark] Organize options: ${stopCounter()}ms.`.green);\r\n    }\r\n\r\n    if (instr) {\r\n      // Stringify JSON with options\r\n      requestOptions.export.instr = optionsStringify(\r\n        instr,\r\n        requestOptions.customCode.allowCodeExecution\r\n      );\r\n\r\n      // Stringify JSON with options\r\n      if (benchmark) {\r\n        console.log(\r\n          `[benchmark] Stringify JSON with options: ${stopCounter()}ms.`.green\r\n        );\r\n      }\r\n    }\r\n\r\n    // Merge the request options into default ones\r\n    const options = mergeConfigOptions(defaultOptions, requestOptions);\r\n\r\n    // Merge config options\r\n    if (benchmark) {\r\n      console.log(\r\n        `[benchmark] Merge config options: ${stopCounter()}ms.`.green\r\n      );\r\n    }\r\n\r\n    // Save the JSON if exists\r\n    options.export.options = instr;\r\n\r\n    // Lastly, add the server specific arguments into options as payload\r\n    options.payload = {\r\n      svg: body.svg || false,\r\n      b64: body.b64 || false,\r\n      noDownload: body.noDownload || false,\r\n      requestId: uniqueId\r\n    };\r\n\r\n    // Setting payload\r\n    if (benchmark) {\r\n      console.log(`[benchmark] Setting payload: ${stopCounter()}ms.`.green);\r\n    }\r\n\r\n    // Test xlink:href elements from payload's SVG\r\n    if (body.svg && isPrivateRangeUrlFound(options.payload.svg)) {\r\n      throw new BadRequestError(\r\n        'SVG potentially contain at least one forbidden URL in xlink:href element. Please review the SVG content and ensure that all referenced URLs comply with security policies.'\r\n      );\r\n    }\r\n\r\n    // Check URL range\r\n    if (benchmark) {\r\n      console.log(`[benchmark] Check URL range: ${stopCounter()}ms.`.green);\r\n    }\r\n\r\n    // Start the export process\r\n    await startExport(options, (error, info) => {\r\n      // Remove the close event from the socket\r\n      request.socket.removeAllListeners('close');\r\n\r\n      // After Puppeteer exporting\r\n      if (benchmark) {\r\n        console.log(\r\n          `[benchmark] After Puppeteer exporting: ${stopCounter()}ms.`.green,\r\n          '\\n'\r\n        );\r\n      }\r\n\r\n      // If the connection was closed, do nothing\r\n      if (connectionAborted) {\r\n        return log(\r\n          3,\r\n          `[export] The client closed the connection before the chart finished processing.`\r\n        );\r\n      }\r\n\r\n      // If error, log it and send it to the error middleware\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // If data is missing, log the message and send it to the error middleware\r\n      if (!info || !info.result) {\r\n        throw new BadRequestError(\r\n          `Unexpected return from chart generation. Please check your request data. For the request with ID ${uniqueId}, the result is ${info.result}.`\r\n        );\r\n      }\r\n\r\n      // Get the type from options\r\n      type = info.options.export.type;\r\n\r\n      // The after request callbacks\r\n      doCallbacks(afterRequest, request, response, { id, body: info.result });\r\n\r\n      if (info.result) {\r\n        // If only base64 is required, return it\r\n        if (body.b64) {\r\n          // SVG Exception for the Highcharts 11.3.0 version\r\n          if (type === 'pdf' || type == 'svg') {\r\n            return response.send(\r\n              Buffer.from(info.result, 'utf8').toString('base64')\r\n            );\r\n          }\r\n\r\n          return response.send(info.result);\r\n        }\r\n\r\n        // Set correct content type\r\n        response.header('Content-Type', reversedMime[type] || 'image/png');\r\n\r\n        // Decide whether to download or not chart file\r\n        if (!body.noDownload) {\r\n          response.attachment(\r\n            `${request.params.filename || request.body.filename || 'chart'}.${\r\n              type || 'png'\r\n            }`\r\n          );\r\n        }\r\n\r\n        // If SVG, return plain content\r\n        return type === 'svg'\r\n          ? response.send(info.result)\r\n          : response.send(Buffer.from(info.result, 'base64'));\r\n      }\r\n    });\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n};\r\n\r\nexport default (app) => {\r\n  /**\r\n   * Adds the POST / a route for handling POST requests at the root endpoint.\r\n   */\r\n  app.post('/', exportHandler);\r\n\r\n  /**\r\n   * Adds the POST /:filename a route for handling POST requests with\r\n   * a specified filename parameter.\r\n   */\r\n  app.post('/:filename', exportHandler);\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { join as pather } from 'path';\r\n\r\nimport cache from '../../cache.js';\r\nimport pool from '../../pool.js';\r\nimport { __dirname } from '../../utils.js';\r\n\r\nconst pkgFile = JSON.parse(readFileSync(pather(__dirname, 'package.json')));\r\n\r\nconst serverStartTime = new Date();\r\n\r\n/**\r\n * Adds the GET /health route, which outputs basic stats for the server.\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.get('/health', (request, response) => {\r\n        response.send({\r\n          status: 'OK',\r\n          bootTime: serverStartTime,\r\n          uptime:\r\n            Math.floor(\r\n              (new Date().getTime() - serverStartTime.getTime()) / 1000 / 60\r\n            ) + ' minutes',\r\n          version: pkgFile.version,\r\n          highchartsVersion: cache.version(),\r\n          averageProcessingTime: pool.averageTime(),\r\n          performedExports: pool.processedWorkCount(),\r\n          failedExports: pool.droppedWork(),\r\n          exportAttempts: pool.workAttempts(),\r\n          sucessRatio: (pool.processedWorkCount() / pool.workAttempts()) * 100,\r\n          // eslint-disable-next-line import/no-named-as-default-member\r\n          pool: pool.getPoolInfoJSON()\r\n        });\r\n      });\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { promises as fsPromises } from 'fs';\r\nimport { posix } from 'path';\r\n\r\nimport cors from 'cors';\r\nimport express from 'express';\r\nimport http from 'http';\r\nimport https from 'https';\r\nimport multer from 'multer';\r\n\r\nimport errorHandler from './error.js';\r\nimport { log, logWithStack } from '../logger.js';\r\nimport rateLimit from './rate_limit.js';\r\nimport { __dirname } from '../utils.js';\r\n\r\nimport vSwitchRoute from './routes/change_hc_version.js';\r\nimport exportRoutes from './routes/export.js';\r\nimport healthRoute from './routes/health.js';\r\nimport uiRoute from './routes/ui.js';\r\n\r\nimport ExportError from '../errors/ExportError.js';\r\n\r\n// Create express app\r\nconst app = express();\r\n\r\n// Disable the X-Powered-By header\r\napp.disable('x-powered-by');\r\n\r\n// Enable CORS support\r\napp.use(cors());\r\n\r\n// Enable parsing of form data (files) with Multer package\r\nconst storage = multer.memoryStorage();\r\nconst upload = multer({\r\n  storage,\r\n  limits: {\r\n    fieldSize: 50 * 1024 * 1024\r\n  }\r\n});\r\n\r\n// Enable body parser\r\napp.use(express.json({ limit: 50 * 1024 * 1024 }));\r\napp.use(express.urlencoded({ extended: true, limit: 50 * 1024 * 1024 }));\r\n\r\n// Use only non-file multipart form fields\r\napp.use(upload.none());\r\n\r\n/**\r\n * Attach error handlers to the server.\r\n *\r\n * @param {http.Server} server - The HTTP/HTTPS server instance.\r\n */\r\nconst attachErrorHandlers = (server) => {\r\n  server.on('clientError', (error) => {\r\n    logWithStack(1, error, `[server] Client error: ${error.message}`);\r\n  });\r\n  server.on('error', (error) => {\r\n    logWithStack(1, error, `[server] Server error: ${error.message}`);\r\n  });\r\n  server.on('connection', (socket) => {\r\n    socket.on('error', (error) => {\r\n      logWithStack(1, error, `[server] Socket error: ${error.message}`);\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * Starts an HTTP server based on the provided configuration. The `serverConfig`\r\n * object contains all server related properties (see the `server` section\r\n * in the `lib/schemas/config.js` file for a reference).\r\n *\r\n * @param {Object} serverConfig - The server configuration object.\r\n *\r\n * @throws {ExportError} - Throws an error if the server cannot be configured\r\n * and started.\r\n */\r\nexport const startServer = async (serverConfig) => {\r\n  try {\r\n    // Stop if not enabled\r\n    if (!serverConfig.enable) {\r\n      return false;\r\n    }\r\n\r\n    // Listen HTTP server\r\n    if (!serverConfig.ssl.enable && !serverConfig.ssl.force) {\r\n      // Main server instance (HTTP)\r\n      const httpServer = http.createServer(app);\r\n\r\n      // Attach error handlers and listen to the server\r\n      attachErrorHandlers(httpServer);\r\n\r\n      // Listen\r\n      httpServer.listen(serverConfig.port, serverConfig.host);\r\n\r\n      log(\r\n        3,\r\n        `[server] Started HTTP server on ${serverConfig.host}:${serverConfig.port}.`\r\n      );\r\n    }\r\n\r\n    // Listen HTTPS server\r\n    if (serverConfig.ssl.enable) {\r\n      // Set up an SSL server also\r\n      let key, cert;\r\n\r\n      try {\r\n        // Get the SSL key\r\n        key = await fsPromises.readFile(\r\n          posix.join(serverConfig.ssl.certPath, 'server.key'),\r\n          'utf8'\r\n        );\r\n\r\n        // Get the SSL certificate\r\n        cert = await fsPromises.readFile(\r\n          posix.join(serverConfig.ssl.certPath, 'server.crt'),\r\n          'utf8'\r\n        );\r\n      } catch (error) {\r\n        log(\r\n          2,\r\n          `[server] Unable to load key/certificate from the '${serverConfig.ssl.certPath}' path. Could not run secured layer server.`\r\n        );\r\n\r\n        throw error;\r\n      }\r\n\r\n      if (key && cert) {\r\n        // Main server instance (HTTPS)\r\n        const httpsServer = https.createServer(app);\r\n\r\n        // Attach error handlers and listen to the server\r\n        attachErrorHandlers(httpsServer);\r\n\r\n        // Listen\r\n        httpsServer.listen(serverConfig.ssl.port, serverConfig.host);\r\n\r\n        log(\r\n          3,\r\n          `[server] Started HTTPS server on ${serverConfig.host}:${serverConfig.ssl.port}.`\r\n        );\r\n      }\r\n    }\r\n\r\n    // Enable the rate limiter if config says so\r\n    if (\r\n      serverConfig.rateLimiting &&\r\n      serverConfig.rateLimiting.enable &&\r\n      ![0, NaN].includes(serverConfig.rateLimiting.maxRequests)\r\n    ) {\r\n      rateLimit(app, serverConfig.rateLimiting);\r\n    }\r\n\r\n    // Set up static folder's route\r\n    app.use(express.static(posix.join(__dirname, 'public')));\r\n\r\n    // Set up routes\r\n    healthRoute(app);\r\n    exportRoutes(app);\r\n    uiRoute(app);\r\n    vSwitchRoute(app);\r\n\r\n    // Set up centralized error handler\r\n    errorHandler(app);\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[server] Could not configure and start the server.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Enable rate limiting for the server.\r\n *\r\n * @param {Object} limitConfig - Configuration object for rate limiting.\r\n */\r\nexport const enableRateLimiting = (limitConfig) => rateLimit(app, limitConfig);\r\n\r\n/**\r\n * Get the Express instance.\r\n *\r\n * @returns {Object} - The Express instance.\r\n */\r\nexport const getExpress = () => express;\r\n\r\n/**\r\n * Get the Express app instance.\r\n *\r\n * @returns {Object} - The Express app instance.\r\n */\r\nexport const getApp = () => app;\r\n\r\n/**\r\n * Apply middleware(s) to a specific path.\r\n *\r\n * @param {string} path - The path to which the middleware(s) should be applied.\r\n * @param {...Function} middlewares - The middleware functions to be applied.\r\n */\r\nexport const use = (path, ...middlewares) => {\r\n  app.use(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Set up a route with GET method and apply middleware(s).\r\n *\r\n * @param {string} path - The route path.\r\n * @param {...Function} middlewares - The middleware functions to be applied.\r\n */\r\nexport const get = (path, ...middlewares) => {\r\n  app.get(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Set up a route with POST method and apply middleware(s).\r\n *\r\n * @param {string} path - The route path.\r\n * @param {...Function} middlewares - The middleware functions to be applied.\r\n */\r\nexport const post = (path, ...middlewares) => {\r\n  app.post(path, ...middlewares);\r\n};\r\n\r\nexport default {\r\n  startServer,\r\n  enableRateLimiting,\r\n  getExpress,\r\n  getApp,\r\n  use,\r\n  get,\r\n  post\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { join } from 'path';\r\n\r\nimport { __dirname } from '../../utils.js';\r\n\r\n/**\r\n * Adds the GET / route for a UI when enabled on the export server.\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.get('/', (request, response) => {\r\n        response.sendFile(join(__dirname, 'public', 'index.html'));\r\n      });\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport cache from '../../cache.js';\r\n\r\n/**\r\n * Adds the POST /change_hc_version/:newVersion route that can be utilized to modify\r\n * the Highcharts version on the server.\r\n *\r\n * TODO: Add auth token and connect to API\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.post('/change_hc_version/:newVersion', async (request, response) => {\r\n        const ctoken = process.env.HIGHCHARTS_ADMIN_TOKEN;\r\n\r\n        if (!ctoken || !ctoken.length) {\r\n          return response.send({\r\n            error: true,\r\n            message:\r\n              'Server not configured to do run-time version changes: HIGHCHARTS_ADMIN_TOKEN not set.'\r\n          });\r\n        }\r\n\r\n        const token = request.get('hc-auth');\r\n        if (!token || token !== ctoken) {\r\n          return response.send({\r\n            error: true,\r\n            message:\r\n              'Invalid or missing token: set token in the hc-auth header.'\r\n          });\r\n        }\r\n\r\n        const newVersion = request.params.newVersion;\r\n        if (newVersion) {\r\n          try {\r\n            // eslint-disable-next-line import/no-named-as-default-member\r\n            await cache.updateVersion(newVersion);\r\n          } catch (error) {\r\n            response.send({\r\n              error: true,\r\n              message: error\r\n            });\r\n          }\r\n\r\n          response.send({\r\n            version: cache.version()\r\n          });\r\n        } else {\r\n          response.send({\r\n            error: true,\r\n            message: 'No new version supplied.'\r\n          });\r\n        }\r\n      });\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport 'colors';\r\n\r\nimport { checkCache } from './cache.js';\r\nimport {\r\n  batchExport,\r\n  setAllowCodeExecution,\r\n  singleExport,\r\n  startExport\r\n} from './chart.js';\r\nimport { mapToNewConfig, manualConfig, setOptions } from './config.js';\r\nimport {\r\n  initLogging,\r\n  log,\r\n  logWithStack,\r\n  setLogLevel,\r\n  enableFileLogging\r\n} from './logger.js';\r\nimport { initPool, killPool } from './pool.js';\r\nimport server, { startServer } from './server/server.js';\r\nimport { printLogo, printUsage } from './utils.js';\r\n\r\nexport default {\r\n  server,\r\n  startServer,\r\n  setOptions,\r\n  singleExport,\r\n  batchExport,\r\n  startExport,\r\n  killPool,\r\n  log,\r\n  logWithStack,\r\n  setLogLevel,\r\n  enableFileLogging,\r\n  mapToNewConfig,\r\n  manualConfig,\r\n  printLogo,\r\n  printUsage,\r\n\r\n  /**\r\n   * Initializes the export process. Tasks such as configuring logging, checking\r\n   * cache and sources, and initializing the pool of resources happen during\r\n   * this stage. Function that is required to be called before trying to export charts or setting a server. The `options` is an object that contains all options.\r\n   *\r\n   * @param {Object} options - All export options.\r\n   *\r\n   * @returns {Promise<Object>} Promise resolving to the updated export options.\r\n   */\r\n  initExport: async (options) => {\r\n    // Set the allowCodeExecution per export module scope\r\n    setAllowCodeExecution(\r\n      options.customCode && options.customCode.allowCodeExecution\r\n    );\r\n\r\n    // Init the logging\r\n    initLogging(options.logging);\r\n\r\n    // Check if cache needs to be updated\r\n    await checkCache(options.highcharts || { version: 'latest' });\r\n\r\n    // Init the pool\r\n    await initPool({\r\n      pool: options.pool || {\r\n        minWorkers: 1,\r\n        maxWorkers: 1\r\n      },\r\n      puppeteerArgs: options.puppeteer?.args || []\r\n    });\r\n\r\n    // Return updated options\r\n    return options;\r\n  }\r\n};\r\n"],"names":["async","fetch","url","requestOptions","Promise","resolve","reject","protocol","startsWith","https","http","getProtocol","get","res","data","on","chunk","text","error","dotenv","config","defaultConfig","puppeteer","args","value","type","description","highcharts","version","envLink","cdnURL","coreScripts","modules","indicators","scripts","forceFetch","export","infile","instr","options","outfile","constr","defaultHeight","defaultWidth","defaultScale","height","width","scale","globalOptions","themeOptions","batch","rasterizationTimeout","customCode","allowCodeExecution","allowFileResources","callback","resources","loadConfig","legacyName","createConfig","server","enable","cliName","host","port","ssl","force","certPath","rateLimiting","maxRequests","window","delay","trustProxy","skipKey","skipToken","pool","minWorkers","maxWorkers","workLimit","acquireTimeout","createTimeout","destroyTimeout","idleTimeout","createRetryInterval","reaperInterval","benchmarking","listenToProcessExits","logging","level","file","dest","ui","route","other","noLogo","payload","promptsConfig","name","message","initial","join","separator","instructions","choices","hint","min","max","round","absoluteProps","nestedArgs","createNestedArgs","obj","propChain","Object","keys","forEach","k","includes","entry","substring","undefined","colors","toConsole","toFile","pathCreated","levelsDesc","title","color","listeners","key","option","entries","logToFile","texts","prefix","existsSync","mkdirSync","appendFile","concat","console","log","newLevel","length","Date","toString","split","trim","fn","apply","logWithStack","customMessage","stackMessage","stack","slice","setLogLevel","enableFileLogging","logDest","logFile","endsWith","__dirname","fileURLToPath","URL","fixType","formats","outType","pop","find","t","handleResources","allowedProps","handledResources","correctResources","isCorrectJSON","readFileSync","files","propName","map","item","parsedData","JSON","parse","stringify","deepCopy","copy","Array","isArray","prototype","hasOwnProperty","call","optionsStringify","allowFunctions","replaceAll","printUsage","bold","yellow","cycleCategories","descName","green","i","blue","category","toUpperCase","red","toBoolean","wrapAround","replace","ExportError","Error","constructor","super","this","setError","cachePath","cache","activeManifest","sources","hcVersion","appliedConfig","extractVersion","substr","indexOf","fetchScript","script","proxyAgent","agent","timeout","process","env","response","statusCode","updateCache","sourcePath","customScripts","allScripts","c","m","proxyHost","proxyPort","HttpsProxyAgent","fetchedModules","all","writeFileSync","checkCache","manifestPath","requestUpdate","manifest","moduleMap","numberOfModules","some","moduleName","newManifest","saveConfigToManifest","cache$1","newVersion","assign","generalOptions","getOptions","mergeConfigOptions","newOptions","mergedOptions","updateDefaultConfig","configObj","customObj","customValue","numEnvVal","el","initOptions","items","recursiveProps","objectToUpdate","nestedNames","shift","RANDOM_PID","randomBytes","PUPPETEER_DIR","path","minimalArgs","template","fs","browser","setPageContent","page","setContent","addScriptTag","evaluate","setupHighcharts","$eval","element","errorMessage","_displayErrors","innerHTML","clearPage","hardReset","goto","document","body","newPage","setCacheEnabled","close","isConnected","__basedir","setAsConfig","chart","triggerExport","puppeteerExport","injectedResources","clearInjected","dispose","scriptsToRemove","getElementsByTagName","stylesToRemove","linksToRemove","remove","exportOptions","requestAnimationFrame","displayErrors","debugger","isSVG","d","svgTemplate","strInj","js","push","content","isLocal","css","cssImports","match","cssImportPath","addStyleTag","size","chartHeight","baseVal","chartWidth","parseFloat","Highcharts","charts","viewportHeight","Math","ceil","viewportWidth","setViewport","deviceScaleFactor","zoomCallback","style","zoom","margin","x","y","getBoundingClientRect","trunc","getClipRegion","outerHTML","createSVG","encoding","clip","race","screenshot","omitBackground","_resolve","setTimeout","createImage","pdf","createPDF","oldCharts","oldChart","destroy","puppeteerArgs","performedExports","exportAttempts","timeSpent","droppedExports","spentAverage","poolConfig","factory","create","id","uuid","startDate","getTime","browserNewPage","isClosed","workCount","random","validate","workerHandle","initPool","code","killPool","exit","allArgs","tryCount","open","launch","headless","userDataDir","createBrowser","parseInt","Pool","acquireTimeoutMillis","createTimeoutMillis","destroyTimeoutMillis","idleTimeoutMillis","createRetryIntervalMillis","reapIntervalMillis","propagateCreateError","resource","eventId","initialResources","acquire","promise","release","browserClose","destroyed","postWork","getPoolInfo","workStart","result","exportTime","numFree","numUsed","numPendingAcquires","pool$1","available","inUse","pendingAcquire","startExport","settings","endCallback","svg","initExportSettings","exportAsString","doStraightInject","doExport","findChartSize","exporting","precision","multiplier","pow","roundNumber","sourceHeight","sourceWidth","param","chartJson","customCodeOptions","allowCodeExecutionScoped","enabled","optionsName","requestId","stringToExport","chartJSON","logErrorMiddleware","req","next","NODE_ENV","returnErrorMiddleware","stCode","status","json","rateLimit","app","limitConfig","msg","rateOptions","limiter","windowMs","delayMs","handler","request","format","send","default","skip","query","access_token","use","HttpError","setStatus","BadRequestError","reversedMime","png","jpeg","gif","requestsCounter","benchmark","beforeRequest","afterRequest","doCallbacks","callbacks","uniqueId","callResponse","exportHandler","start","hrtime","bigint","measureTime","defaultOptions","headers","connection","remoteAddress","connectionAborted","socket","toLowerCase","b64","noDownload","ipRegEx","isPrivateRangeUrlFound","info","removeAllListeners","Buffer","from","header","attachment","params","filename","pkgFile","pather","serverStartTime","express","disable","cors","storage","multer","memoryStorage","upload","limits","fieldSize","limit","urlencoded","extended","none","attachErrorHandlers","startServer","serverConfig","httpServer","createServer","listen","cert","fsPromises","readFile","posix","httpsServer","NaN","static","bootTime","uptime","floor","highchartsVersion","averageProcessingTime","failedExports","sucessRatio","healthRoute","post","exportRoutes","sendFile","uiRoute","ctoken","HIGHCHARTS_ADMIN_TOKEN","token","vSwitchRoute","errorHandler","enableRateLimiting","getExpress","getApp","middlewares","index","setOptions","userOptions","configIndex","findIndex","arg","fileName","loadConfigFile","showUsage","propertiesChain","reduce","prop","pairArgumentValue","singleExport","batchExport","batchFunctions","pair","mapToNewConfig","oldOptions","manualConfig","configFileName","configFile","choice","prompts","onSubmit","p","categories","questionsCounter","allQuestions","section","prompt","answer","module","writeFile","printLogo","packageVersion","initExport","initLogging"],"mappings":"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"}