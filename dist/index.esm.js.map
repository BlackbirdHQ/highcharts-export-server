{"version":3,"file":"index.esm.js","sources":["../lib/schemas/config.js","../lib/logger.js","../lib/utils.js","../lib/server/rate_limit.js","../lib/fetch.js","../lib/cache.js","../lib/browser.js","../lib/export.js","../lib/benchmark.js","../templates/svg_export/svg_export.js","../lib/config.js","../lib/chart.js","../lib/pool.js","../lib/server/routes/health.js","../lib/server/routes/export.js","../lib/server/server.js","../lib/server/routes/ui.js","../lib/server/routes/change-hc-version.js","../lib/index.js"],"sourcesContent":["/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// Load .env into environment variables\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\n// This is the configuration object with all options and their default values,\r\n// also from the .env file if one exists\r\nexport const defaultConfig = {\r\n  puppeteer: {\r\n    args: {\r\n      value: [],\r\n      type: 'string[]',\r\n      description: 'Array of arguments to send to puppeteer.'\r\n    }\r\n  },\r\n  highcharts: {\r\n    version: {\r\n      value: 'latest',\r\n      envLink: 'HIGHCHARTS_VERSION',\r\n      type: 'string',\r\n      description: 'Highcharts version to use.'\r\n    },\r\n    cdnURL: {\r\n      value: 'https://code.highcharts.com/',\r\n      envLink: 'HIGHCHARTS_CDN',\r\n      type: 'string',\r\n      description: 'The CDN URL of Highcharts scripts to use.'\r\n    },\r\n    coreScripts: {\r\n      envLink: 'HIGHCHARTS_CORE_SCRIPTS',\r\n      value: ['highcharts', 'highcharts-more', 'highcharts-3d'],\r\n      type: 'string[]',\r\n      description: 'Highcharts core scripts to fetch.'\r\n    },\r\n    modules: {\r\n      envLink: 'HIGHCHARTS_MODULES',\r\n      value: [\r\n        'stock',\r\n        'map',\r\n        'gantt',\r\n        'exporting',\r\n        'export-data',\r\n        'parallel-coordinates',\r\n        'accessibility',\r\n        'annotations-advanced',\r\n        'boost-canvas',\r\n        'boost',\r\n        'data',\r\n        'draggable-points',\r\n        'static-scale',\r\n        'broken-axis',\r\n        'heatmap',\r\n        'tilemap',\r\n        'timeline',\r\n        'treemap',\r\n        'item-series',\r\n        'drilldown',\r\n        'histogram-bellcurve',\r\n        'bullet',\r\n        'funnel',\r\n        'funnel3d',\r\n        'pyramid3d',\r\n        'networkgraph',\r\n        'pareto',\r\n        'pattern-fill',\r\n        'pictorial',\r\n        'price-indicator',\r\n        'sankey',\r\n        'arc-diagram',\r\n        'dependency-wheel',\r\n        'series-label',\r\n        'solid-gauge',\r\n        'sonification',\r\n        'stock-tools',\r\n        'streamgraph',\r\n        'sunburst',\r\n        'variable-pie',\r\n        'variwide',\r\n        'vector',\r\n        'venn',\r\n        'windbarb',\r\n        'wordcloud',\r\n        'xrange',\r\n        'no-data-to-display',\r\n        'drag-panes',\r\n        'debugger',\r\n        'dumbbell',\r\n        'lollipop',\r\n        'cylinder',\r\n        'organization',\r\n        'dotplot',\r\n        'marker-clusters',\r\n        'hollowcandlestick',\r\n        'heikinashi'\r\n      ],\r\n      type: 'string[]',\r\n      description: 'Highcharts modules to fetch.'\r\n    },\r\n    indicators: {\r\n      envLink: 'HIGHCHARTS_INDICATORS',\r\n      value: ['indicators-all'],\r\n      type: 'string[]',\r\n      description: 'Highcharts indicators to fetch.'\r\n    },\r\n    scripts: {\r\n      value: [\r\n        'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.3/moment.min.js',\r\n        'https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js'\r\n      ],\r\n      type: 'string[]',\r\n      description:\r\n        'Additional direct scripts/optional dependencies (e.g. moment.js).'\r\n    }\r\n  },\r\n  export: {\r\n    infile: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'The input file name along with a type (json or svg). It can be a correct JSON or SVG file.'\r\n    },\r\n    instr: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'An input in a form of a stringified JSON or SVG file. Overrides the --infile.'\r\n    },\r\n    options: {\r\n      value: false,\r\n      type: 'string',\r\n      description: 'An alias for the --instr option.'\r\n    },\r\n    outfile: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'The output filename along with a type (jpeg, png, pdf or svg). Ignores the --type flag.'\r\n    },\r\n    type: {\r\n      envLink: 'EXPORT_DEFAULT_TYPE',\r\n      value: 'png',\r\n      type: 'string',\r\n      description:\r\n        'The format of the file to export to. Can be jpeg, png, pdf or svg.'\r\n    },\r\n    constr: {\r\n      envLink: 'EXPORT_DEFAULT_CONSTR',\r\n      value: 'chart',\r\n      type: 'string',\r\n      description:\r\n        'The constructor to use. Can be chart, stockChart, mapChart or ganttChart.'\r\n    },\r\n    defaultHeight: {\r\n      envLink: 'EXPORT_DEFAULT_HEIGHT',\r\n      value: 400,\r\n      type: 'number',\r\n      description:\r\n        'The default height of the exported chart. Used when not found any value set.'\r\n    },\r\n    defaultWidth: {\r\n      envLink: 'EXPORT_DEFAULT_WIDTH',\r\n      value: 600,\r\n      type: 'number',\r\n      description:\r\n        'The default width of the exported chart. Used when not found any value set.'\r\n    },\r\n    defaultScale: {\r\n      envLink: 'EXPORT_DEFAULT_SCALE',\r\n      value: 1,\r\n      type: 'number',\r\n      description:\r\n        'The default scale of the exported chart. Ranges between 1 and 5.'\r\n    },\r\n    height: {\r\n      type: 'number',\r\n      value: false,\r\n      description:\r\n        'The default height of the exported chart. Overrides the option in the chart settings.'\r\n    },\r\n    width: {\r\n      type: 'number',\r\n      value: false,\r\n      description:\r\n        'The width of the exported chart. Overrides the option in the chart settings.'\r\n    },\r\n    scale: {\r\n      value: false,\r\n      type: 'number',\r\n      description: 'The scale of the exported chart. Ranges between 1 and 5.'\r\n    },\r\n    globalOptions: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'A stringified JSON or a filename with options to be passed into the Highcharts.setOptions.'\r\n    },\r\n    themeOptions: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'A stringified JSON or a filename with theme options to be passed into the Highcharts.setOptions.'\r\n    },\r\n    batch: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Starts a batch job. A string that contains input/output pairs: \"in=out;in=out;..\".'\r\n    }\r\n  },\r\n  customCode: {\r\n    allowCodeExecution: {\r\n      envLink: 'HIGHCHARTS_ALLOW_CODE_EXECUTION',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'If set to true, allow for the execution of arbitrary code when exporting.'\r\n    },\r\n    allowFileResources: {\r\n      envLink: 'HIGHCHARTS_ALLOW_FILE_RESOURCES',\r\n      value: true,\r\n      type: 'boolean',\r\n      description:\r\n        'Allow injecting resources from the filesystem. Has no effect when running as a server.'\r\n    },\r\n    customCode: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'A function to be called before chart initialization. Can be a filename with the js extension.'\r\n    },\r\n    callback: {\r\n      value: false,\r\n      type: 'string',\r\n      description: 'A JavaScript file with a function to run on construction.'\r\n    },\r\n    resources: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'An additional resource in a form of stringified JSON. It can contain files, js and css sections.'\r\n    },\r\n    loadConfig: {\r\n      value: false,\r\n      type: 'string',\r\n      description: 'A file that contains a pre-defined config to use.'\r\n    },\r\n    createConfig: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Allows to set options through a prompt and save in a provided config file.'\r\n    }\r\n  },\r\n  server: {\r\n    enable: {\r\n      envLink: 'HIGHCHARTS_SERVER_ENABLE',\r\n      value: false,\r\n      type: 'boolean',\r\n      cliName: 'enableServer',\r\n      description: 'If set to true, starts a server on 0.0.0.0.'\r\n    },\r\n    host: {\r\n      envLink: 'HIGHCHARTS_SERVER_HOST',\r\n      value: '0.0.0.0',\r\n      type: 'string',\r\n      description:\r\n        'The hostname of the server. Also starts a server listening on the supplied hostname.'\r\n    },\r\n    port: {\r\n      envLink: 'HIGHCHARTS_SERVER_PORT',\r\n      value: 7801,\r\n      type: 'number',\r\n      description: 'The port to use for the server. Defaults to 7801.'\r\n    },\r\n    ssl: {\r\n      enable: {\r\n        envLink: 'HIGHCHARTS_SERVER_SSL_ENABLE',\r\n        value: false,\r\n        type: 'boolean',\r\n        cliName: 'enableSsl',\r\n        description: 'Enables the SSL protocol.'\r\n      },\r\n      force: {\r\n        envLink: 'HIGHCHARTS_SERVER_SSL_FORCE',\r\n        value: false,\r\n        type: 'boolean',\r\n        cliName: 'sslForced',\r\n        description:\r\n          'If set to true, forces the server to only serve over HTTPS.'\r\n      },\r\n      port: {\r\n        envLink: 'HIGHCHARTS_SERVER_SSL_PORT',\r\n        value: 443,\r\n        type: 'number',\r\n        cliName: 'sslPort',\r\n        description: 'The port on which to run the SSL server.'\r\n      },\r\n      certPath: {\r\n        envLink: 'HIGHCHARTS_SSL_CERT_PATH',\r\n        value: '',\r\n        type: 'string',\r\n        description: 'The path to the SSL certificate/key.'\r\n      }\r\n    },\r\n    rateLimiting: {\r\n      enable: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_ENABLE',\r\n        value: false,\r\n        type: 'boolean',\r\n        cliName: 'enableRateLimiting',\r\n        description: 'Enables rate limiting.'\r\n      },\r\n      maxRequests: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_MAX',\r\n        value: 10,\r\n        type: 'number',\r\n        description: 'Max requests allowed in a one minute.'\r\n      },\r\n      skipKey: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_SKIP_KEY',\r\n        value: '',\r\n        type: 'number|string',\r\n        description:\r\n          'Allows bypassing the rate limiter and should be provided with skipToken argument.'\r\n      },\r\n      skipToken: {\r\n        envLink: 'HIGHCHARTS_RATE_LIMIT_SKIP_TOKEN',\r\n        value: '',\r\n        type: 'number|string',\r\n        description:\r\n          'Allows bypassing the rate limiter and should be provided with skipKey argument.'\r\n      }\r\n    }\r\n  },\r\n  pool: {\r\n    initialWorkers: {\r\n      envLink: 'HIGHCHARTS_POOL_MIN_WORKERS',\r\n      value: 6,\r\n      type: 'number',\r\n      description: 'The number of initial workers to spawn.'\r\n    },\r\n    maxWorkers: {\r\n      envLink: 'HIGHCHARTS_POOL_MAX_WORKERS',\r\n      value: 6,\r\n      type: 'number',\r\n      description: 'The number of max workers to spawn.'\r\n    },\r\n    workLimit: {\r\n      envLink: 'HIGHCHARTS_POOL_WORK_LIMIT',\r\n      value: 40,\r\n      type: 'number',\r\n      description:\r\n        'The pieces of work that can be performed before restarting process.'\r\n    },\r\n    queueSize: {\r\n      envLink: 'HIGHCHARTS_POOL_QUEUE_SIZE',\r\n      value: 10,\r\n      type: 'number',\r\n      description: 'The size of the request overflow queue.'\r\n    },\r\n    timeoutThreshold: {\r\n      envLink: 'HIGHCHARTS_POOL_TIMEOUT',\r\n      value: 5000,\r\n      type: 'number',\r\n      description: 'The number of milliseconds before timing out.'\r\n    },\r\n    acquireTimeout: {\r\n      envLink: 'HIGHCHARTS_POOL_ACQUIRE_TIMEOUT',\r\n      value: 3000,\r\n      type: 'number',\r\n      description: 'The number of milliseconds to wait for acquiring a resource.'\r\n    },\r\n    reaper: {\r\n      envLink: 'HIGHCHARTS_POOL_ENABLE_REAPER',\r\n      value: true,\r\n      type: 'boolean',\r\n      description:\r\n        'Whether or not to evict workers after a certain time period.'\r\n    },\r\n    benchmarking: {\r\n      envLink: 'HIGHCHARTS_POOL_BENCHMARKING',\r\n      value: false,\r\n      type: 'boolean',\r\n      description: 'Enable benchmarking.'\r\n    },\r\n    listenToProcessExits: {\r\n      envLink: 'HIGHCHARTS_POOL_LISTEN_TO_PROCESS_EXITS',\r\n      value: true,\r\n      type: 'boolean',\r\n      description:\r\n        'Set to false in order to skip attaching process.exit handlers.'\r\n    }\r\n  },\r\n  payload: {\r\n\r\n  },\r\n  logging: {\r\n    level: {\r\n      envLink: 'HIGHCHARTS_LOG_LEVEL',\r\n      value: 4,\r\n      type: 'number',\r\n      cliName: 'logLevel',\r\n      description:\r\n        'The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose).'\r\n    },\r\n    file: {\r\n      envLink: 'HIGHCHARTS_LOG_FILE',\r\n      value: 'highcharts-export-server.log',\r\n      type: 'string',\r\n      cliName: 'logFile',\r\n      description:\r\n        'A name of a log file. The --logDest also needs to be set to enable file logging.'\r\n    },\r\n    dest: {\r\n      envLink: 'HIGHCHARTS_LOG_DEST',\r\n      value: 'log/',\r\n      type: 'string',\r\n      cliName: 'logDest',\r\n      description: 'The path to store log files. Also enables file logging.'\r\n    }\r\n  },\r\n  ui: {\r\n    enable: {\r\n      envLink: 'HIGHCHARTS_UI_ENABLE',\r\n      value: false,\r\n      type: 'boolean',\r\n      cliName: 'enableUi',\r\n      description: 'Enables the UI for the export server.'\r\n    },\r\n    route: {\r\n      envLink: 'HIGHCHARTS_UI_ROUTE',\r\n      value: '/',\r\n      type: 'string',\r\n      cliName: 'uiRoute',\r\n      description: 'The route to attach the UI to.'\r\n    }\r\n  },\r\n  other: {\r\n    noLogo: {\r\n      envLink: 'HIGHCHARTS_NO_LOGO',\r\n      value: false,\r\n      type: 'boolean',\r\n      description:\r\n        'Skip printing the logo on a startup. Will be replaced by a simple text.'\r\n    }\r\n  }\r\n};\r\n\r\n// The config descriptions object for the prompts functionality. It contains\r\n// information like:\r\n// * Type of a prompt\r\n// * Name of an option\r\n// * Short description of a chosen option\r\n// * Initial value\r\nexport const promptsConfig = {\r\n  puppeteer: [\r\n    {\r\n      type: 'list',\r\n      name: 'args',\r\n      message: 'Puppeteer arguments',\r\n      initial: defaultConfig.puppeteer.args.value.join(','),\r\n      separator: ','\r\n    }\r\n  ],\r\n  highcharts: [\r\n    {\r\n      type: 'text',\r\n      name: 'version',\r\n      message: 'Highcharts version',\r\n      initial: defaultConfig.highcharts.version.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'cdnURL',\r\n      message: 'The url of CDN',\r\n      initial: defaultConfig.highcharts.cdnURL.value\r\n    },\r\n    {\r\n      type: 'multiselect',\r\n      name: 'modules',\r\n      message: 'Available modules',\r\n      instructions: 'Space: Select specific, A: Select all, Enter: Confirm.',\r\n      choices: defaultConfig.highcharts.modules.value\r\n    },\r\n    {\r\n      type: 'list',\r\n      name: 'scripts',\r\n      message: 'Custom scripts',\r\n      initial: defaultConfig.highcharts.scripts.value.join(','),\r\n      separator: ','\r\n    }\r\n  ],\r\n  export: [\r\n    {\r\n      type: 'select',\r\n      name: 'type',\r\n      message: 'The default type of a file to export to',\r\n      hint: `Default: ${defaultConfig.export.type.value}`,\r\n      initial: 0,\r\n      choices: ['png', 'jpeg', 'pdf', 'svg']\r\n    },\r\n    {\r\n      type: 'select',\r\n      name: 'constr',\r\n      message: 'The default constructor for Highcharts to use',\r\n      hint: `Default: ${defaultConfig.export.constr.value}`,\r\n      initial: 0,\r\n      choices: ['chart', 'stockChart', 'mapChart', 'ganttChart']\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultHeight',\r\n      message: 'The default fallback height of the exported chart',\r\n      initial: defaultConfig.export.defaultHeight.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultWidth',\r\n      message: 'The default fallback width of the exported chart',\r\n      initial: defaultConfig.export.defaultWidth.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultScale',\r\n      message: 'The default fallback scale of the exported chart',\r\n      initial: defaultConfig.export.defaultScale.value,\r\n      min: 0.1,\r\n      max: 5\r\n    }\r\n  ],\r\n  customCode: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'allowCodeExecution',\r\n      message: 'Allow to execute custom code',\r\n      initial: defaultConfig.customCode.allowCodeExecution.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'allowFileResources',\r\n      message: 'Allow file resources',\r\n      initial: defaultConfig.customCode.allowFileResources.value\r\n    }\r\n  ],\r\n  server: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'enable',\r\n      message: 'Starts a server on 0.0.0.0',\r\n      initial: defaultConfig.server.enable.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'host',\r\n      message: 'A hostname of a server',\r\n      initial: defaultConfig.server.host.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'port',\r\n      message: 'A port of a server',\r\n      initial: defaultConfig.server.port.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'ssl.enable',\r\n      message: 'Enable SSL protocol',\r\n      initial: defaultConfig.server.ssl.enable.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'ssl.force',\r\n      message: 'Force to only serve over HTTPS',\r\n      initial: defaultConfig.server.ssl.force.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'ssl.port',\r\n      message: 'Port on which to run the SSL server',\r\n      initial: defaultConfig.server.ssl.port.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'ssl.certPath',\r\n      message: 'A path where to find the SSL certificate/key',\r\n      initial: defaultConfig.server.ssl.certPath.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'rateLimiting.enable',\r\n      message: 'Enable rate limiting',\r\n      initial: defaultConfig.server.rateLimiting.enable.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.maxRequests',\r\n      message: 'Max requests allowed in a one minute',\r\n      initial: defaultConfig.server.rateLimiting.maxRequests.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'rateLimiting.skipKey',\r\n      message:\r\n        'Allows bypassing the rate limiter and should be provided with skipToken argument',\r\n      initial: defaultConfig.server.rateLimiting.skipKey.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'rateLimiting.skipToken',\r\n      message:\r\n        'Allows bypassing the rate limiter and should be provided with skipKey argument',\r\n      initial: defaultConfig.server.rateLimiting.skipToken.value\r\n    }\r\n  ],\r\n  pool: [\r\n    {\r\n      type: 'number',\r\n      name: 'initialWorkers',\r\n      message: 'The number of initial workers to spawn',\r\n      initial: defaultConfig.pool.initialWorkers.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'maxWorkers',\r\n      message: 'The number of max workers to spawn',\r\n      initial: defaultConfig.pool.maxWorkers.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'workLimit',\r\n      message:\r\n        'The pieces of work that can be performed before restarting a puppeteer process',\r\n      initial: defaultConfig.pool.workLimit.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'queueSize',\r\n      message: 'The size of the request overflow queue',\r\n      initial: defaultConfig.pool.queueSize.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'timeoutThreshold',\r\n      message: 'The number of seconds before timing out',\r\n      initial: defaultConfig.pool.timeoutThreshold.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'acquireTimeout',\r\n      message: 'The number of milliseconds to wait for acquiring a resource',\r\n      initial: defaultConfig.pool.acquireTimeout.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'reaper',\r\n      message: 'The reaper to remove hanging processes',\r\n      initial: defaultConfig.pool.reaper.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'benchmarking',\r\n      message: 'Set benchmarking',\r\n      initial: defaultConfig.pool.benchmarking.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'listenToProcessExits',\r\n      message: 'Set to false in order to skip attaching process.exit handlers',\r\n      initial: defaultConfig.pool.listenToProcessExits.value\r\n    }\r\n  ],\r\n  logging: [\r\n    {\r\n      type: 'number',\r\n      name: 'level',\r\n      message:\r\n        'The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose)',\r\n      initial: defaultConfig.logging.level.value,\r\n      round: 0,\r\n      min: 0,\r\n      max: 4\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'file',\r\n      message:\r\n        'A name of a log file. The --logDest also needs to be set to enable file logging',\r\n      initial: defaultConfig.logging.file.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'dest',\r\n      message: 'A path to log files. It enables file logging',\r\n      initial: defaultConfig.logging.dest.value\r\n    }\r\n  ],\r\n  ui: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'enable',\r\n      message: 'Enable UI for the export server',\r\n      initial: defaultConfig.ui.enable.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'route',\r\n      message: 'A route to attach the UI to',\r\n      initial: defaultConfig.ui.route.value\r\n    }\r\n  ],\r\n  other: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'noLogo',\r\n      message:\r\n        'Skip printing the logo on a startup. Will be replaced by a simple text',\r\n      initial: defaultConfig.other.noLogo.value\r\n    }\r\n  ]\r\n};\r\n\r\n// Argument nesting level of all export server options\r\nconst nestedArgs = {};\r\n\r\n// Map of properties from envs\r\nconst envVars = [];\r\n\r\n/**\r\n * Builds maps and load env vars.\r\n *\r\n * @param {object} obj - The object based on which the initial configuration be\r\n * made.\r\n * @param {string } propChain - Required for creating a string chain of\r\n * properties for nested arguments.\r\n */\r\nconst initConfig = (obj, propChain = '') => {\r\n  const toBoolean = (item) =>\r\n    ['false', 'undefined', 'null', 'NaN', '0', ''].includes(item)\r\n      ? false\r\n      : !!item;\r\n\r\n  Object.keys(obj).forEach((k) => {\r\n    if (!['puppeteer', 'highcharts'].includes(k)) {\r\n      const entry = obj[k];\r\n      let numEnvVal;\r\n\r\n      if (typeof entry.value === 'undefined') {\r\n        initConfig(entry, `${propChain}.${k}`);\r\n      } else {\r\n        if (entry.envLink) {\r\n          // Load the env var\r\n          if (entry.type === 'boolean') {\r\n            entry.value = toBoolean(\r\n              [process.env[entry.envLink], entry.value].find(\r\n                (el) => el || el === 'false'\r\n              )\r\n            );\r\n          } else if (entry.type === 'number') {\r\n            numEnvVal = +process.env[entry.envLink];\r\n            entry.value = numEnvVal >= 0 ? numEnvVal : entry.value;\r\n          } else if (\r\n            entry.type.indexOf(']') >= 0 &&\r\n            process.env[entry.envLink]\r\n          ) {\r\n            entry.value = process.env[entry.envLink].split(',');\r\n          } else {\r\n            entry.value = process.env[entry.envLink] || entry.value;\r\n          }\r\n\r\n          // Add to list of env vars\r\n          envVars.push({\r\n            name: entry.envLink,\r\n            description: entry.description,\r\n            type: entry.type\r\n          });\r\n        }\r\n\r\n        // Create the chain of nested arguments\r\n        nestedArgs[entry.cliName || k] = `${propChain}.${k}`.substring(1);\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\ninitConfig(defaultConfig);\r\n\r\nexport default {\r\n  defaultConfig,\r\n  promptsConfig,\r\n  envVars,\r\n  nestedArgs\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { appendFile, existsSync, mkdirSync } from 'fs';\r\n\r\nimport { defaultConfig } from './schemas/config.js';\r\n\r\n// The default logging config\r\nlet logging = {\r\n  // Flags for logging status\r\n  toConsole: true,\r\n  toFile: false,\r\n  pathCreated: false,\r\n  // Log levels\r\n  levelsDesc: [\r\n    {\r\n      title: 'error',\r\n      color: 'red'\r\n    },\r\n    {\r\n      title: 'warning',\r\n      color: 'yellow'\r\n    },\r\n    {\r\n      title: 'notice',\r\n      color: 'blue'\r\n    },\r\n    {\r\n      title: 'verbose',\r\n      color: 'gray'\r\n    }\r\n  ],\r\n  // Log listeners\r\n  listeners: []\r\n};\r\n\r\n// Gather init logging options\r\nfor (const [key, option] of Object.entries(defaultConfig.logging)) {\r\n  logging[key] = option.value;\r\n}\r\n\r\n/**\r\n * Logs a message. Accepts a variable amount of arguments. Arguments after\r\n * `level` will be passed directly to console.log, and/or will be joined\r\n * and appended to the log file.\r\n *\r\n * @param {any} args - An array of arguments where the first is the log level\r\n * and the rest are strings to build a message with.\r\n */\r\nexport const log = (...args) => {\r\n  const [newLevel, ...texts] = args;\r\n\r\n  // Current logging options\r\n  const { level, levelsDesc } = logging;\r\n\r\n  // Check if log level is within a correct range\r\n  if (newLevel === 0 || newLevel > level || level > levelsDesc.length) {\r\n    return;\r\n  }\r\n\r\n  // Get rid of the GMT text information\r\n  const newDate = new Date().toString().split('(')[0].trim();\r\n\r\n  // Create a message's prefix\r\n  const prefix = `${newDate} [${levelsDesc[newLevel - 1].title}] -`;\r\n\r\n  // Call available log listeners\r\n  logging.listeners.forEach((fn) => {\r\n    fn(prefix, texts.join(' '));\r\n  });\r\n\r\n  // Log to file\r\n  if (logging.toFile) {\r\n    if (!logging.pathCreated) {\r\n      // Create if does not exist\r\n      !existsSync(logging.dest) && mkdirSync(logging.dest);\r\n\r\n      // We now assume the path is available, e.g. it's the responsibility\r\n      // of the user to create the path with the correct access rights.\r\n      logging.pathCreated = true;\r\n    }\r\n\r\n    // Add the content to a file\r\n    appendFile(\r\n      `${logging.dest}${logging.file}`,\r\n      [prefix].concat(texts).join(' ') + '\\n',\r\n      (error) => {\r\n        if (error) {\r\n          console.log(`[logger] Unable to write to log file: ${error}`);\r\n          logging.toFile = false;\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  // Log to console\r\n  if (logging.toConsole) {\r\n    console.log.apply(\r\n      undefined,\r\n      [prefix.toString()[logging.levelsDesc[newLevel - 1].color]].concat(texts)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Sets the file logging configuration.\r\n *\r\n * @param {string} logDest - A path to log to.\r\n * @param {string} logFile - The name of the log file.\r\n */\r\nexport const enableFileLogging = (logDest, logFile) => {\r\n  // Update logging options\r\n  logging = {\r\n    ...logging,\r\n    dest: logDest || logging.dest,\r\n    file: logFile || logging.file,\r\n    toFile: true\r\n  };\r\n\r\n  if (logging.dest.length === 0) {\r\n    return log(1, '[logger] File logging init: no path supplied.');\r\n  }\r\n\r\n  if (!logging.dest.endsWith('/')) {\r\n    logging.dest += '/';\r\n  }\r\n};\r\n\r\n/**\r\n * Adds a log listener.\r\n *\r\n * @param {function} fn - The function to call when getting a log event.\r\n */\r\nexport const listen = (fn) => {\r\n  logging.listeners.push(fn);\r\n};\r\n\r\n/**\r\n * Sets the current log level. Log levels are:\r\n * - 0 = no logging\r\n * - 1 = error\r\n * - 2 = warning\r\n * - 3 = notice\r\n * - 4 = verbose\r\n *\r\n * @param {number} newLevel - The new log level (0 - 4).\r\n */\r\nexport const setLogLevel = (newLevel) => {\r\n  if (newLevel >= 0 && newLevel <= logging.levelsDesc.length) {\r\n    logging.level = newLevel;\r\n  }\r\n};\r\n\r\n/**\r\n * Enables or disables logging to the stdout.\r\n *\r\n * @param {boolean} enabled - Whether log to console or not.\r\n */\r\nexport const toggleSTDOut = (enabled) => {\r\n  logging.toConsole = enabled;\r\n};\r\n\r\nexport default {\r\n  log,\r\n  enableFileLogging,\r\n  listen,\r\n  setLogLevel,\r\n  toggleSTDOut\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { fileURLToPath } from 'url';\r\n\r\nimport { log } from './logger.js';\r\n\r\nconst MAX_BACKOFF_ATTEMPTS = 6;\r\n\r\nexport const __dirname = fileURLToPath(new URL('../.', import.meta.url));\r\n\r\n/**\r\n * Clears text from whitespaces with a regex rule.\r\n *\r\n * @param {string} rule - The rule for clearing a string, default to /\\s\\s+/g.\r\n * @return {string} - Cleared text.\r\n */\r\nexport const clearText = (text, rule = /\\s\\s+/g, replacer = ' ') =>\r\n  text.replaceAll(rule, replacer).trim();\r\n\r\n/**\r\n * Delays calling the function by time calculated based on the backoff\r\n * algorithm.\r\n *\r\n * @param {function} fn - A function to try to call with the backoff algorithm\r\n * on.\r\n * @param {number} attempt - The number of an attempt, where the first one is 0.\r\n */\r\nexport const expBackoff = async (fn, attempt = 0, ...args) => {\r\n  try {\r\n    // Try to call the function\r\n    return await fn(...args);\r\n  } catch (error) {\r\n    // Calculate delay in ms\r\n    const delayInMs = 2 ** attempt * 1000;\r\n\r\n    // If the attempt exceeds the maximum attempts of reapeat, throw an error\r\n    if (++attempt >= MAX_BACKOFF_ATTEMPTS) {\r\n      throw error;\r\n    }\r\n\r\n    // Wait given amount of time\r\n    await new Promise((response) => setTimeout(response, delayInMs));\r\n    log(\r\n      3,\r\n      `[pool] Waited ${delayInMs}ms until next call for the resource id: ${args[0]}.`\r\n    );\r\n\r\n    // Try again\r\n    return expBackoff(fn, attempt, ...args);\r\n  }\r\n};\r\n\r\n/**\r\n * Fixes to supported type format if MIME.\r\n *\r\n * @param {string} type - Type to be corrected.\r\n * @param {string} outfile - Name of the outfile.\r\n */\r\nexport const fixType = (type, outfile) => {\r\n  // MIME types\r\n  const mimeTypes = {\r\n    'image/png': 'png',\r\n    'image/jpeg': 'jpeg',\r\n    'application/pdf': 'pdf',\r\n    'image/svg+xml': 'svg'\r\n  };\r\n\r\n  // Formats\r\n  const formats = ['png', 'jpeg', 'pdf', 'svg'];\r\n\r\n  // Check if type and outfile's extensions are the same\r\n  if (outfile) {\r\n    const outType = outfile.split('.').pop();\r\n\r\n    // Check if extension has a correct type\r\n    if (formats.includes(outType) && type !== outType) {\r\n      type = outType;\r\n    }\r\n  }\r\n\r\n  // Return a correct type\r\n  return mimeTypes[type] || formats.find((t) => t === type) || 'png';\r\n};\r\n\r\n/**\r\n * Handles the provided resources.\r\n *\r\n * @param {string} resources - The stringified resources.\r\n * @param {string} allowFileResources - Decide if resources from file are\r\n * allowed.\r\n */\r\nexport const handleResources = (resources = false, allowFileResources) => {\r\n  const allowedProps = ['js', 'css', 'files'];\r\n\r\n  let handledResources = resources;\r\n  let correctResources = false;\r\n\r\n  // Try to load resources from a file\r\n  if (allowFileResources && resources.endsWith('.json')) {\r\n    try {\r\n      if (!resources) {\r\n        handledResources = isCorrectJSON(\r\n          readFileSync('resources.json', 'utf8')\r\n        );\r\n      } else if (resources && resources.endsWith('.json')) {\r\n        handledResources = isCorrectJSON(readFileSync(resources, 'utf8'));\r\n      } else {\r\n        handledResources = isCorrectJSON(resources);\r\n        if (handledResources === true) {\r\n          handledResources = isCorrectJSON(\r\n            readFileSync('resources.json', 'utf8')\r\n          );\r\n        }\r\n      }\r\n    } catch (notice) {\r\n      return log(3, `[cli] No resources found.`);\r\n    }\r\n  } else {\r\n    // Try to get JSON\r\n    handledResources = isCorrectJSON(resources);\r\n\r\n    // Get rid of the files section\r\n    if (!allowFileResources) {\r\n      delete handledResources.files;\r\n    }\r\n  }\r\n\r\n  // Filter from unnecessary properties\r\n  for (const propName in handledResources) {\r\n    if (!allowedProps.includes(propName)) {\r\n      delete handledResources[propName];\r\n    } else if (!correctResources) {\r\n      correctResources = true;\r\n    }\r\n  }\r\n\r\n  // Check if at least one of allowed properties is present\r\n  if (!correctResources) {\r\n    return log(3, `[cli] No resources found.`);\r\n  }\r\n\r\n  // Handle files section\r\n  if (handledResources.files) {\r\n    handledResources.files = handledResources.files.map((item) => item.trim());\r\n    if (!handledResources.files || handledResources.files.length <= 0) {\r\n      delete handledResources.files;\r\n    }\r\n  }\r\n\r\n  // Return resources\r\n  return handledResources;\r\n};\r\n\r\n/**\r\n * Checks if provided data is or can be a correct JSON.\r\n *\r\n * @param {any} data - Data to be checked.\r\n * @param {boolean} toString - If true, return stringified representation.\r\n */\r\nexport function isCorrectJSON(data, toString) {\r\n  try {\r\n    // Get the string representation if not already before parsing\r\n    const parsedData = JSON.parse(\r\n      typeof data !== 'string' ? JSON.stringify(data) : data\r\n    );\r\n\r\n    // Return a stringified representation of a JSON if required\r\n    if (typeof parsedData !== 'string' && toString) {\r\n      return JSON.stringify(parsedData);\r\n    }\r\n\r\n    // Return a JSON\r\n    return parsedData;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if item is an object.\r\n *\r\n * @param {any} item - Item to be checked.\r\n */\r\nexport const isObject = (item) =>\r\n  typeof item === 'object' && !Array.isArray(item) && item !== null;\r\n\r\n/**\r\n * Checks if string contains private range urls.\r\n *\r\n * @export utils\r\n * @param item {string} item to be checked\r\n */\r\nexport const isPrivateRangeUrlFound = (item) => {\r\n  return [\r\n    'localhost',\r\n    '(10).(.*).(.*).(.*)',\r\n    '(127).(.*).(.*).(.*)',\r\n    '(172).(1[6-9]|2[0-9]|3[0-1]).(.*).(.*)',\r\n    '(192).(168).(.*).(.*)'\r\n  ].some((ipRegEx) =>\r\n    item.match(`xlink:href=\"(?:(http://|https://))?${ipRegEx}`)\r\n  );\r\n};\r\n\r\n/**\r\n * Maps the old options to the new config structure.\r\n *\r\n * @param {object} oldOptions - Options to be mapped.\r\n */\r\nexport const mapToNewConfig = async (oldOptions) => {\r\n  const newOptions = {};\r\n  const { default: defaultSchemaConfig } = await import('./schemas/config.js');\r\n  const nestedArgs = defaultSchemaConfig.nestedArgs;\r\n\r\n  // Cycle through old-structured options\r\n  for (const [key, value] of Object.entries(oldOptions)) {\r\n    const propertiesChain = nestedArgs[key] ? nestedArgs[key].split('.') : [];\r\n\r\n    // Populate object in correct properties levels\r\n    propertiesChain.reduce(\r\n      (obj, prop, index) =>\r\n        (obj[prop] =\r\n          propertiesChain.length - 1 === index ? value : obj[prop] || {}),\r\n      newOptions\r\n    );\r\n  }\r\n  return newOptions;\r\n};\r\n\r\n/**\r\n * Creates and returns a deep copy of the given object.\r\n *\r\n * @param {object} object - Object to copy.\r\n * @return {object} - Deep copy of the object.\r\n */\r\nexport const deepCopy = (obj) => {\r\n  if (obj === null || typeof obj !== 'object') {\r\n    return obj;\r\n  }\r\n\r\n  const copy = Array.isArray(obj) ? [] : {};\r\n\r\n  for (const key in obj) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n      copy[key] = deepCopy(obj[key]);\r\n    }\r\n  }\r\n\r\n  return copy;\r\n}\r\n\r\n/**\r\n * Merges the new options to the options object. It omits undefined values.\r\n *\r\n * @param {object} options - Old options.\r\n * @param {object} newOptions - New options.\r\n * @param {string[]} absoluteProps - Array of object names that should be force\r\n * merged.\r\n */\r\nexport const mergeConfigOptions = (options, newOptions, absoluteProps = []) => {\r\n  const mergedOptions = deepCopy(options);\r\n\r\n  for (const [key, value] of Object.entries(newOptions)) {\r\n    mergedOptions[key] =\r\n      isObject(value) &&\r\n      !absoluteProps.includes(key) &&\r\n      mergedOptions[key] !== undefined\r\n        ? mergeConfigOptions(mergedOptions[key], value, absoluteProps)\r\n        : value !== undefined\r\n        ? value\r\n        : mergedOptions[key];\r\n  }\r\n\r\n  return mergedOptions;\r\n};\r\n\r\n/**\r\n * Stringifies object with options. Possible to preserve functions with\r\n * allowFunctions flag.\r\n *\r\n * @param {object} options - Options to stringify.\r\n * @param {boolean} allowFunctions - Flag for keeping functions.\r\n */\r\nexport const optionsStringify = (options, allowFunctions) => {\r\n  const replacerCallback = (name, value) => {\r\n    if (typeof value === 'string') {\r\n      value = value.trim();\r\n\r\n      // If allowFunctions is set to true, preserve functions\r\n      if (\r\n        (value.startsWith('function(') || value.startsWith('function (')) &&\r\n        value.endsWith('}')\r\n      ) {\r\n        value = allowFunctions\r\n          ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\r\n          : undefined;\r\n      }\r\n    }\r\n\r\n    return typeof value === 'function'\r\n      ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\r\n      : value;\r\n  };\r\n\r\n  // Stringify options and if required, replace special functions marks\r\n  return JSON.stringify(options, replacerCallback).replaceAll(\r\n    /\"EXP_FUN|EXP_FUN\"/g,\r\n    ''\r\n  );\r\n};\r\n\r\n/**\r\n * Pairs argument with a corresponding value.\r\n *\r\n * @param {object} options - All server options.\r\n * @param {string[]} args - Array of arguments from a user.\r\n * @param {object} defaultConfig - The default config object.\r\n */\r\nexport const pairArgumentValue = async (options, args, defaultConfig) => {\r\n  const { default: defaultSchemaConfig } = await import('./schemas/config.js');\r\n  const nestedArgs = defaultSchemaConfig.nestedArgs;\r\n\r\n  for (let i = 0; i < args.length; i++) {\r\n    let option = args[i].replace(/-/g, '');\r\n\r\n    // Find the right place for property's value\r\n    const propertiesChain = nestedArgs[option]\r\n      ? nestedArgs[option].split('.')\r\n      : [];\r\n\r\n    propertiesChain.reduce((obj, prop, index) => {\r\n      if (propertiesChain.length - 1 === index) {\r\n        // Finds an option and set a corresponding value\r\n        if (typeof obj[prop] !== 'undefined') {\r\n          if (args[++i]) {\r\n            obj[prop] = args[i] || obj[prop];\r\n          } else {\r\n            console.log(`Missing argument value for ${option}!`.red, '\\n');\r\n            options = printUsage(defaultConfig);\r\n          }\r\n        }\r\n      }\r\n      return obj[prop];\r\n    }, options);\r\n  }\r\n\r\n  return options;\r\n};\r\n\r\n/**\r\n * Prints the export server logo.\r\n *\r\n * @param {boolean} noLogo - Whether to display logo or text.\r\n */\r\nexport const printLogo = (noLogo) => {  \r\n\r\n  // Get package version either from env or from package.json  \r\n  const packageVersion = process.env.npm_package_version ||\r\n    JSON.parse(readFileSync(new URL('../package.json', import.meta.url))).version;\r\n\r\n  // Print text only\r\n  if (noLogo) {\r\n    console.log(`Starting highcharts export server v${packageVersion}...`);\r\n    return;\r\n  }\r\n\r\n  // Print the logo\r\n  console.log(\r\n    readFileSync(__dirname + '/msg/startup.msg').toString().bold.yellow,\r\n    `v${packageVersion}`\r\n  );\r\n};\r\n\r\n/**\r\n * Prints the CLI usage. If required, it can list properties recursively\r\n *\r\n * @param {object} defaultConfig - The default config object.\r\n */\r\nexport function printUsage(defaultConfig) {\r\n  const pad = 48;\r\n  const readme = 'https://github.com/highcharts/node-export-server#readme';\r\n\r\n  // Display readme information\r\n  console.log(\r\n    'Usage of CLI arguments:'.bold,\r\n    '\\n------',\r\n    `\\nFor more detailed information visit readme at: ${readme.bold.yellow}.`\r\n  );\r\n\r\n  const cycleCategories = (categories) => {\r\n    for (const [name, option] of Object.entries(categories)) {\r\n      // If category has more levels, go further\r\n      if (!Object.prototype.hasOwnProperty.call(option, 'value')) {\r\n        cycleCategories(option);\r\n      } else {\r\n        let descName = `  --${option.cliName || name} ${\r\n          ('<' + option.type + '>').green\r\n        } `;\r\n        if (descName.length < pad) {\r\n          for (let i = descName.length; i < pad; i++) {\r\n            descName += '.';\r\n          }\r\n        }\r\n\r\n        // Display correctly aligned messages\r\n        console.log(\r\n          descName,\r\n          option.description,\r\n          `[Default: ${option.value.toString().bold}]`.blue\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  // Cycle through options of each categories and display the usage info\r\n  Object.keys(defaultConfig).forEach((category) => {\r\n    // Only puppeteer and highcharts categories cannot be configured through CLI\r\n    if (!['puppeteer', 'highcharts'].includes(category)) {\r\n      console.log(`\\n${category.toUpperCase()}`.red);\r\n      cycleCategories(defaultConfig[category]);\r\n    }\r\n  });\r\n  console.log('\\n');\r\n}\r\n\r\n/**\r\n * Rounds number to passed precision.\r\n *\r\n * @param {number} value - Number to round.\r\n * @param {number} precision - A precision of rounding.\r\n */\r\nexport const roundNumber = (value, precision = 1) => {\r\n  const multiplier = Math.pow(10, precision || 0);\r\n  return Math.round(+value * multiplier) / multiplier;\r\n};\r\n\r\n/**\r\n * Casts the item to boolean.\r\n *\r\n * @param {any} item - Item to be cast.\r\n */\r\nexport const toBoolean = (item) =>\r\n  ['false', 'undefined', 'null', 'NaN', '0', ''].includes(item)\r\n    ? false\r\n    : !!item;\r\n\r\n/**\r\n * If necessary, places a custom code inside a function.\r\n *\r\n * @param {any} customCode - The customCode.\r\n */\r\nexport const wrapAround = (customCode, allowFileResources) => {\r\n  if (customCode && typeof customCode === 'string') {\r\n    customCode = customCode.trim();\r\n\r\n    if (customCode.endsWith('.js')) {\r\n      return allowFileResources\r\n        ? wrapAround(readFileSync(customCode, 'utf8'))\r\n        : false;\r\n    } else if (\r\n      customCode.startsWith('function()') ||\r\n      customCode.startsWith('function ()') ||\r\n      customCode.startsWith('()=>') ||\r\n      customCode.startsWith('() =>')\r\n    ) {\r\n      return `(${customCode})()`;\r\n    }\r\n    return customCode.replace(/;$/, '');\r\n  }\r\n};\r\n\r\n/**\r\n * Utility to measure time.\r\n */\r\nexport const measureTime = () => {\r\n  const start = process.hrtime.bigint();\r\n  return () => Number(process.hrtime.bigint() - start) / 1000000;\r\n};\r\n\r\nexport default {\r\n  __dirname,\r\n  clearText,\r\n  expBackoff,\r\n  fixType,\r\n  handleResources,\r\n  isCorrectJSON,\r\n  isObject,\r\n  isPrivateRangeUrlFound,\r\n  mapToNewConfig,\r\n  mergeConfigOptions,\r\n  optionsStringify,\r\n  pairArgumentValue,\r\n  printLogo,\r\n  printUsage,\r\n  roundNumber,\r\n  toBoolean,\r\n  wrapAround,\r\n  measureTime\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport rateLimit from 'express-rate-limit';\r\n\r\nimport { clearText } from '../utils.js';\r\nimport { log } from '../logger.js';\r\n\r\n/**\r\n * Enables rate limiting for a given app.\r\n *\r\n * @param {object} app - The express app.\r\n * @param {object} limitConfig - The options for the rate limiting.\r\n */\r\nexport default (app, limitConfig) => {\r\n  const msg =\r\n    'Too many requests, you have been rate limited. Please try again later.';\r\n\r\n  // Options for the rate limiter\r\n  const rateOptions = {\r\n    max: limitConfig.maxRequests || 30,\r\n    window: limitConfig.window || 1,\r\n    delay: limitConfig.delay || 0,\r\n    trustProxy: limitConfig.trustProxy || false,\r\n    skipKey: limitConfig.skipKey || false,\r\n    skipToken: limitConfig.skipToken || false\r\n  };\r\n\r\n  // Set if behind a proxy\r\n  if (rateOptions.trustProxy) {\r\n    app.enable('trust proxy');\r\n  }\r\n\r\n  // Create a limiter\r\n  const limiter = rateLimit({\r\n    windowMs: rateOptions.window * 60 * 1000,\r\n    // Limit each IP to 100 requests per windowMs\r\n    max: rateOptions.max,\r\n    // Disable delaying, full speed until the max limit is reached\r\n    delayMs: rateOptions.delay,\r\n    handler: (request, response) => {\r\n      response.format({\r\n        json: () => {\r\n          response.status(429).send({ message: msg });\r\n        },\r\n        default: () => {\r\n          response.status(429).send(msg);\r\n        }\r\n      });\r\n    },\r\n    skip: (request) => {\r\n      // Allow bypassing the limiter if a valid key/token has been sent\r\n      if (\r\n        rateOptions.skipKey !== false &&\r\n        rateOptions.skipToken !== false &&\r\n        request.query.key === rateOptions.skipKey &&\r\n        request.query.access_token === rateOptions.skipToken\r\n      ) {\r\n        log(4, '[rate-limiting] Skipping rate limiter.');\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  });\r\n\r\n  // Use a limiter as a middleware\r\n  app.use(limiter);\r\n\r\n  log(\r\n    3,\r\n    clearText(\r\n      `[rate-limiting] Enabled rate limiting: ${rateOptions.max} requests\r\n      per ${rateOptions.window} minute per IP, trusting proxy:\r\n      ${rateOptions.trustProxy}.`\r\n    )\r\n  );\r\n};\r\n","/**\r\n * This module exports two functions: fetch (for GET requests) and post (for POST requests).\r\n */\r\n\r\nimport http from 'http';\r\nimport https from 'https';\r\n\r\n/**\r\n * Determines the protocol of the given URL (either `http` or `https`).\r\n *\r\n * @function\r\n * @param {string} url - The URL whose protocol needs to be determined.\r\n * @returns {Object} Returns the `https` module if the URL starts with 'https',\r\n * otherwise returns the `http` module.\r\n * @private\r\n *\r\n * @example\r\n *\r\n * const protocol = getProtocol('https://example.com');\r\n * console.log(protocol); // Outputs the 'https' module\r\n */\r\nconst getProtocol = (url) => {\r\n  return url.startsWith('https') ? https : http;\r\n}\r\n\r\n/**\r\n * Sends a GET request to the specified URL with optional request options.\r\n *\r\n * @function\r\n * @async\r\n * @param {string} url - The URL to fetch.\r\n * @param {Object} [requestOptions={}] - Optional request options and headers.\r\n * @returns {Promise<Object>} Returns a promise that resolves with the response object.\r\n * The response object contains a `.text` property with the raw response data.\r\n * @throws {Error} Throws an error if the request fails or if no data is fetched from the URL.\r\n *\r\n * @example\r\n *\r\n * async function getData() {\r\n *   try {\r\n *     const response = await fetch('https://api.example.com/data');\r\n *     console.log(response.text);\r\n *   } catch (error) {\r\n *     console.error('Error fetching data:', error);\r\n *   }\r\n * }\r\n *\r\n * getData();\r\n */\r\nasync function fetch(url, requestOptions = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const protocol = getProtocol(url);\r\n\r\n    protocol.get(url, requestOptions, (res) => {\r\n      let data = '';\r\n\r\n      // A chunk of data has been received.\r\n      res.on('data', (chunk) => {\r\n        data += chunk;\r\n      });\r\n\r\n      // The whole response has been received.\r\n      res.on('end', () => {\r\n        if (!data) {\r\n          reject('Nothing was fetched from the URL.');\r\n        }\r\n\r\n        res.text = data;\r\n        resolve(res);\r\n      });\r\n\r\n    }).on('error', (error) => {\r\n      reject(error);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Sends a POST request to the specified URL with the given body and request options.\r\n *\r\n * @function\r\n * @async\r\n * @param {string} url - The URL to which the request should be sent.\r\n * @param {Object} [body={}] - The data to be sent as the request body, in JSON format.\r\n * @param {Object} [requestOptions={}] - Optional request options and headers.\r\n * @returns {Promise<Object>} - Returns a promise that resolves with the parsed JSON response.\r\n * @throws {Error} Throws an error if the request fails or if the response cannot be parsed.\r\n *\r\n * @example\r\n *\r\n * async function sendData() {\r\n *   const dataToSend = {\r\n *     key1: 'value1',\r\n *     key2: 'value2',\r\n *   };\r\n *   try {\r\n *     const response = await post('https://api.example.com/data', dataToSend);\r\n *     console.log(response);\r\n *   } catch (error) {\r\n *     console.error('Error sending data:', error);\r\n *   }\r\n * }\r\n *\r\n * sendData();\r\n */\r\nasync function post(url, body = {}, requestOptions = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const protocol = getProtocol(url);\r\n    const data = JSON.stringify(body);\r\n\r\n    // Set default headers and merge with requestOptions\r\n    const options = Object.assign({\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Content-Length': data.length,\r\n      },\r\n    }, requestOptions);\r\n\r\n    const req = protocol.request(url, options, (res) => {\r\n      let responseData = '';\r\n\r\n      // A chunk of data has been received.\r\n      res.on('data', (chunk) => {\r\n        responseData += chunk;\r\n      });\r\n\r\n      // The whole response has been received.\r\n      res.on('end', () => {\r\n        try {\r\n          res.text = responseData;\r\n          resolve(res);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      });\r\n\r\n    }).on('error', (error) => {\r\n      reject(error);\r\n    });\r\n\r\n    // Write the request body and end the request.\r\n    req.write(data);\r\n    req.end();\r\n  });\r\n}\r\n\r\nexport default fetch;\r\nexport { fetch, post };","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// The cache manager manages the Highcharts library and its dependencies.\r\n// The cache itself is stored in .cache, and is checked by the config system\r\n// before starting the service\r\n\r\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';\r\nimport { join } from 'path';\r\n\r\nimport dotenv from 'dotenv';\r\nimport HttpsProxyAgent from 'https-proxy-agent';\r\nimport fetch from './fetch.js';\r\n\r\nimport { log } from './logger.js';\r\nimport { __dirname } from '../lib/utils.js';\r\n\r\ndotenv.config();\r\n\r\nconst cachePath = join(__dirname, '.cache');\r\n\r\nconst cache = {\r\n  cdnURL: 'https://code.highcharts.com/',\r\n  activeManifest: {},\r\n  sources: '',\r\n  hcVersion: ''\r\n};\r\n\r\n// TODO: The config should be accesssible globally so we don't have to do this sort of thing..\r\nlet appliedConfig = false;\r\n\r\n/**\r\n * Extracts the Highcharts version from the cache\r\n */\r\nconst extractVersion = () =>\r\n  (cache.hcVersion = cache.sources\r\n    .substr(0, cache.sources.indexOf('*/'))\r\n    .replace('/*', '')\r\n    .replace('*/', '')\r\n    .replace(/\\n/g, '')\r\n    .trim());\r\n\r\n/**\r\n * Saves the Highcharts part of a config to a manifest file in the cache\r\n *\r\n * @param {object} config - Highcarts related configuration object.\r\n * @param {object} fetchedModules - An object that contains mapped names of\r\n * fetched Highcharts modules to use.\r\n */\r\nconst saveConfigToManifest = async (config, fetchedModules) => {\r\n  const newManifest = {\r\n    version: config.version,\r\n    modules: fetchedModules || {}\r\n  };\r\n\r\n  // Update cache object with the current modules\r\n  cache.activeManifest = newManifest;\r\n\r\n  log(4, '[cache] writing new manifest');\r\n\r\n  try {\r\n    writeFileSync(\r\n      join(cachePath, 'manifest.json'),\r\n      JSON.stringify(newManifest),\r\n      'utf8'\r\n    );\r\n  } catch (error) {\r\n    log(1, `[cache] Error writing cache manifest: ${error}.`);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches a single script.\r\n *\r\n * @param {string} script - A path to script to get.\r\n * @param {object} proxyAgent - The proxy agent to use for a request.\r\n */\r\nconst fetchScript = async (script, proxyAgent) => {\r\n  try {\r\n    // Get rid of the .js from the custom strings\r\n    if (script.endsWith('.js')) {\r\n        script = script.substring(0, script.length - 3);\r\n    }\r\n\r\n    log(4, `[cache] Fetching script - ${script}.js`);\r\n\r\n    // If exists, add proxy agent to request options\r\n    const requestOptions = proxyAgent\r\n      ? {\r\n          agent: proxyAgent,\r\n          timeout: +process.env['PROXY_SERVER_TIMEOUT'] || 5000\r\n        }\r\n      : {};\r\n\r\n    // Fetch the script\r\n    const response = await fetch(`${script}.js`, requestOptions);\r\n\r\n    // If OK, return its text representation\r\n    if (response.statusCode === 200) {\r\n      return response.text;\r\n    }\r\n\r\n    throw `${response.statusCode}`;\r\n  } catch (error) {\r\n    log(1, `[cache] Error fetching script ${script}.js: ${error}.`);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Updates the Highcharts cache.\r\n *\r\n * @param {object} config - Highcarts related configuration object.\r\n * @param {string} sourcePath - A path to the file where save updated sources.\r\n * @return {object} An object that contains mapped names of fetched Highcharts\r\n * modules to use.\r\n */\r\nconst updateCache = async (config, sourcePath) => {\r\n  const { coreScripts, modules, indicators, scripts: customScripts } = config;\r\n  const hcVersion =\r\n    config.version === 'latest' || !config.version ? '' : `${config.version}/`;\r\n\r\n  log(3, '[cache] Updating cache to Highcharts ', hcVersion);\r\n\r\n  // Gather all scripts to fetch\r\n  const allScripts = [\r\n    ...coreScripts.map((c) => `${hcVersion}${c}`),\r\n    ...modules.map((m) =>\r\n      m === 'map' ? `maps/${hcVersion}modules/${m}` : `${hcVersion}modules/${m}`\r\n    ),\r\n    ...indicators.map((i) => `stock/${hcVersion}indicators/${i}`)\r\n  ];\r\n\r\n  // Configure proxy if exists\r\n  let proxyAgent;\r\n  const proxyHost = process.env['PROXY_SERVER_HOST'];\r\n  const proxyPort = process.env['PROXY_SERVER_PORT'];\r\n\r\n  if (proxyHost && proxyPort) {\r\n    proxyAgent = new HttpsProxyAgent({\r\n      host: proxyHost,\r\n      port: +proxyPort\r\n    });\r\n  }\r\n\r\n  const fetchedModules = {};\r\n  try {\r\n    cache.sources = // TODO: convert to for loop\r\n      (\r\n        await Promise.all([\r\n          ...allScripts.map(async (script) => {\r\n            const text = await fetchScript(\r\n              `${config.cdnURL || cache.cdnURL}${script}`,\r\n              proxyAgent\r\n            );\r\n\r\n            // If fetched correctly, set it\r\n            if (typeof text === 'string') {\r\n              fetchedModules[\r\n                script.replace(\r\n                  /(.*)\\/|(.*)modules\\/|stock\\/(.*)indicators\\/|maps\\/(.*)modules\\//gi,\r\n                  ''\r\n                )\r\n              ] = 1;\r\n            }\r\n\r\n            return text;\r\n          }),\r\n          ...customScripts.map((script) => fetchScript(script, proxyAgent))\r\n        ])\r\n      ).join(';\\n');\r\n    extractVersion();\r\n\r\n    // Save the fetched modules into caches' source JSON\r\n    writeFileSync(sourcePath, cache.sources);\r\n    return fetchedModules;\r\n  } catch (error) {\r\n    log(1, '[cache] Unable to update local Highcharts cache.');\r\n  }\r\n};\r\n\r\nexport const updateVersion = async (newVersion) =>\r\n  appliedConfig\r\n    ? await checkCache(\r\n        Object.assign(appliedConfig, {\r\n          version: newVersion\r\n        })\r\n      )\r\n    : false;\r\n\r\n/**\r\n * Fetches any missing Highcharts and dependencies\r\n *\r\n * @param {object} config - Highcarts related configuration object.\r\n */\r\nexport const checkCache = async (config) => {\r\n  let fetchedModules;\r\n  // Prepare paths to manifest and sources from the .cache folder\r\n  const manifestPath = join(cachePath, 'manifest.json');\r\n  const sourcePath = join(cachePath, 'sources.js');\r\n\r\n  // TODO: deal with trying to switch to the running version\r\n  // const activeVersion = appliedConfig ? appliedConfig.version : false;\r\n\r\n  appliedConfig = config;\r\n\r\n  // Create the .cache destination if it doesn't exist already\r\n  !existsSync(cachePath) && mkdirSync(cachePath);\r\n\r\n  // Load the .cache manifest\r\n  if (existsSync(manifestPath)) {\r\n    let requestUpdate = false;\r\n\r\n    // Read the manifest JSON\r\n    const manifest = JSON.parse(readFileSync(manifestPath));\r\n\r\n    // Check if the modules is an array, if so, we rewrite it to a map to make\r\n    // it easier to resolve modules.\r\n    if (manifest.modules && Array.isArray(manifest.modules)) {\r\n      const moduleMap = {};\r\n      manifest.modules.forEach((m) => (moduleMap[m] = 1));\r\n      manifest.modules = moduleMap;\r\n    }\r\n\r\n    const { modules, coreScripts, indicators } = config;\r\n    const numberOfModules =\r\n      modules.length + coreScripts.length + indicators.length;\r\n\r\n    // Compare the loaded config with the contents in .cache.\r\n    // If there are changes, fetch requested modules and products,\r\n    // and bake them into a giant blob. Save the blob.\r\n    if (manifest.version !== config.version) {\r\n      log(3, '[cache] Highcharts version mismatch in cache, need to re-fetch.');\r\n      requestUpdate = true;\r\n    } else if (Object.keys(manifest.modules || {}).length !== numberOfModules) {\r\n      log(\r\n        3,\r\n        '[cache] Cache and requested modules does not match, need to re-fetch.'\r\n      );\r\n      requestUpdate = true;\r\n    } else {\r\n      // Check each module, if anything is missing refetch everything\r\n      requestUpdate = (config.modules || []).some((moduleName) => {\r\n        if (!manifest.modules[moduleName]) {\r\n          log(\r\n            3,\r\n            `[cache] The ${moduleName} missing in cache, need to re-fetch.`\r\n          );\r\n          return true;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (requestUpdate) {\r\n      fetchedModules = await updateCache(config, sourcePath);\r\n    } else {\r\n      log(3, '[cache] Dependency cache is up to date, proceeding.');\r\n\r\n      // Load the sources\r\n      cache.sources = readFileSync(sourcePath, 'utf8');\r\n\r\n      // Get current modules map\r\n      fetchedModules = manifest.modules;\r\n      extractVersion();\r\n    }\r\n  } else {\r\n    // So we don't have one yet, which means we need to fetch everything\r\n    log(3, '[cache] Fetching and caching Highcharts dependencies.');\r\n    fetchedModules = await updateCache(config, sourcePath);\r\n  }\r\n\r\n  // Finally, save the new manifest, which is basically our current config\r\n  // in a slightly different format\r\n  await saveConfigToManifest(config, fetchedModules);\r\n};\r\n\r\nexport default {\r\n  checkCache,\r\n  updateVersion,\r\n  getCache: () => cache,\r\n  highcharts: () => cache.sources,\r\n  version: () => cache.hcVersion\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport puppeteer from 'puppeteer';\r\nimport fs from 'fs';\r\nimport * as url from 'url';\r\nimport { log } from './logger.js';\r\nimport path from 'node:path';\r\n\r\n// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1463328\r\n// Not ideal - leaves trash in the FS\r\nimport { randomBytes } from 'node:crypto';\r\nconst RANDOM_PID = randomBytes(64).toString('base64url');\r\nconst PUPPETEER_DIR = path.join('tmp', `puppeteer-${RANDOM_PID}`);\r\nconst DATA_DIR = path.join(PUPPETEER_DIR, 'profile');\r\n\r\n// The minimal args to speed up the browser\r\nconst minimalArgs = [\r\n  `--user-data-dir=${DATA_DIR}`,\r\n  '--autoplay-policy=user-gesture-required',\r\n  '--disable-background-networking',\r\n  '--disable-background-timer-throttling',\r\n  '--disable-backgrounding-occluded-windows',\r\n  '--disable-breakpad',\r\n  '--disable-client-side-phishing-detection',\r\n  '--disable-component-update',\r\n  '--disable-default-apps',\r\n  '--disable-dev-shm-usage',\r\n  '--disable-domain-reliability',\r\n  '--disable-extensions',\r\n  '--disable-features=AudioServiceOutOfProcess',\r\n  '--disable-hang-monitor',\r\n  '--disable-ipc-flooding-protection',\r\n  '--disable-notifications',\r\n  '--disable-offer-store-unmasked-wallet-cards',\r\n  '--disable-popup-blocking',\r\n  '--disable-print-preview',\r\n  '--disable-prompt-on-repost',\r\n  '--disable-renderer-backgrounding',\r\n  '--disable-session-crashed-bubble',\r\n  '--disable-setuid-sandbox',\r\n  '--disable-speech-api',\r\n  '--disable-sync',\r\n  '--hide-crash-restore-bubble',\r\n  '--hide-scrollbars',\r\n  '--ignore-gpu-blacklist',\r\n  '--metrics-recording-only',\r\n  '--mute-audio',\r\n  '--no-default-browser-check',\r\n  '--no-first-run',\r\n  '--no-pings',\r\n  '--no-sandbox',\r\n  '--no-zygote',\r\n  '--password-store=basic',\r\n  '--use-mock-keychain'\r\n];\r\n\r\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\r\n\r\nconst template = fs.readFileSync(\r\n  __dirname + '/../templates/template.html',\r\n  'utf8'\r\n);\r\n\r\nlet browser;\r\n\r\nexport const newPage = async () => {\r\n  if (!browser) return false;\r\n\r\n  const p = await browser.newPage();\r\n\r\n  await p.setContent(template);\r\n  await p.addScriptTag({ path: __dirname + '/../.cache/sources.js' });\r\n  // eslint-disable-next-line no-undef\r\n  await p.evaluate(() => window.setupHighcharts());\r\n\r\n  p.on('pageerror', async (err) => {\r\n    // TODO: Consider adding a switch here that turns on log(0) logging\r\n    // on page errors.\r\n    log(1, '[page error]', err);\r\n    await p.$eval(\r\n      '#container',\r\n      (element, errorMessage) => {\r\n        // eslint-disable-next-line no-undef\r\n        if (window._displayErrors) {\r\n          element.innerHTML = errorMessage;\r\n        }\r\n      },\r\n      `<h1>Chart input data error</h1>${err.toString()}`\r\n    );\r\n  });\r\n\r\n  return p;\r\n};\r\n\r\nexport const create = async (puppeteerArgs) => {\r\n  const allArgs = [...minimalArgs, ...(puppeteerArgs || [])];\r\n\r\n  // Create a browser\r\n  if (!browser) {\r\n    let tryCount = 0;\r\n\r\n    const open = async () => {\r\n      try {\r\n        log(\r\n          3,\r\n          '[browser] attempting to get a browser instance (try',\r\n          tryCount + ')'\r\n        );\r\n\r\n        browser = await puppeteer.launch({\r\n          headless: 'new',\r\n          args: allArgs,\r\n          userDataDir: './tmp/'\r\n        });\r\n      } catch (e) {\r\n        log(0, '[browser]', e);\r\n        if (++tryCount < 25) {\r\n          log(3, '[browser] failed:', e);\r\n          await new Promise((response) => setTimeout(response, 4000));\r\n          await open();\r\n        } else {\r\n          log(0, 'Max retries reached');\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      await open();\r\n    } catch (e) {\r\n      log(0, '[browser] Unable to open browser');\r\n      return false;\r\n    }\r\n\r\n    if (!browser) {\r\n      log(0, '[browser] Unable to open browser');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Return a browser promise\r\n  return browser;\r\n};\r\n\r\nexport const get = async () => {\r\n  if (!browser) {\r\n    throw 'no valid browser has been created';\r\n  }\r\n\r\n  return browser;\r\n};\r\n\r\nexport const close = async () => {\r\n  return await browser.close();\r\n};\r\n\r\nexport default {\r\n  get,\r\n  close,\r\n  newPage\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// TODO: remove this temp benchmark stuff. I had this idea of doing a general benchmarking\r\n// system, but it adds so much bloat in the code that it shouldn't be there.\r\n\r\nimport benchmark from './benchmark.js';\r\nimport cache from './cache.js';\r\nimport { log } from './logger.js';\r\nimport svgTemplate from './../templates/svg_export/svg_export.js';\r\n\r\nimport { readFileSync } from 'fs';\r\nimport path from 'path';\r\nimport * as url from 'url';\r\n\r\nconst __basedir = url.fileURLToPath(new URL('.', import.meta.url));\r\n\r\n// const jsonTemplate = require('./../templates/json_export/json_export.js');\r\n\r\n/**\r\n * Gets the clip region for the chart DOM node.\r\n *\r\n * @param {object} page - A page of a browser instance.\r\n * @return {object} - A clipped region.\r\n */\r\nconst getClipRegion = (page) =>\r\n  page.$eval('#chart-container', (element) => {\r\n    const { x, y, width, height } = element.getBoundingClientRect();\r\n    return {\r\n      x,\r\n      y,\r\n      width,\r\n      height: Math.trunc(height > 1 ? height : 500)\r\n    };\r\n  });\r\n\r\n/**\r\n * Rasterizes the page to an image (PNG or JPEG)\r\n *\r\n * @param {object} page - A page of a browser instance.\r\n * @param {string} type - The type of a result image.\r\n * @param {string} encoding - The type of encoding used.\r\n * @param {string} clip - The clip region.\r\n * @returns {string} - A string representation of a screenshot.\r\n */\r\nconst createImage = async (page, type, encoding, clip) =>\r\n  await Promise.race([\r\n    page.screenshot({\r\n      type,\r\n      encoding,\r\n      clip\r\n    }),\r\n    new Promise((resolve, reject) =>\r\n      setTimeout(() => reject(new Error('Rasterization timeout')), 1500)\r\n    )\r\n  ]);\r\n\r\n/**\r\n * Turns page into a PDF.\r\n *\r\n * @param {object} page - A page of a browser instance.\r\n * @param {number} height - The height of a chart.\r\n * @param {number} width - The width of a chart.\r\n * @param {string} encoding - The type of encoding used.\r\n * @return {object} - A buffer with PDF representation.\r\n */\r\nconst createPDF = async (page, height, width, encoding) =>\r\n  await page.pdf({\r\n    // This will remove an extra empty page in PDF exports\r\n    height: height + 1,\r\n    width,\r\n    encoding\r\n  });\r\n\r\n/**\r\n * Exports as a SVG.\r\n *\r\n * @param {object} page - A page of a browser instance.\r\n * @return {object} - The outerHTML element with the SVG representation.\r\n */\r\nconst createSVG = async (page) =>\r\n  await page.$eval(\r\n    '#container svg:first-of-type',\r\n    (element) => element.outerHTML\r\n  );\r\n\r\n/** Load config into a page and render a chart */\r\nconst setAsConfig = async (page, chart, options) =>\r\n  await page.evaluate(\r\n    // eslint-disable-next-line no-undef\r\n    (chart, options) => window.triggerExport(chart, options),\r\n    chart,\r\n    options\r\n  );\r\n\r\n/** Load SVG into a page */\r\n// const setAsSVG = async (page, svgStr) => true;\r\n\r\n/**\r\n * Does an export for a given browser.\r\n *\r\n * @param {object} browser - A browser instance.\r\n * @param {object} chart - Chart's options.\r\n * @param {object} options - All options object.\r\n * @return {object} - The data returned from one of the methods for exporting\r\n * a specific type of an image.\r\n */\r\nexport default async (page, chart, options) => {\r\n  /**\r\n   * Keeps track of all resources added on the page with addXXXTag. etc\r\n   * It's VITAL that all added resources ends up here so we can clear things\r\n   * out when doing a new export in the same page!\r\n   */\r\n  const injectedResources = [];\r\n\r\n  /** Clear out all state set on the page with addScriptTag/addStyleTag. */\r\n  const clearInjected = async (page) => {\r\n    for (const res of injectedResources) {\r\n      await res.dispose();\r\n    }\r\n\r\n    // Reset all CSS and script tags\r\n    await page.evaluate(() => {\r\n      ///\r\n      // // eslint-disable-next-line no-undef\r\n      // Highcharts.setOptionsObj = {};\r\n      ///\r\n      // eslint-disable-next-line no-undef\r\n      const [, ...scriptsToRemove] = document.getElementsByTagName('script');\r\n      // eslint-disable-next-line no-undef\r\n      const [, ...stylesToRemove] = document.getElementsByTagName('style');\r\n      // eslint-disable-next-line no-undef\r\n      const [...linksToRemove] = document.getElementsByTagName('link');\r\n\r\n      // Remove tags\r\n      for (const element of [\r\n        ...scriptsToRemove,\r\n        ...stylesToRemove,\r\n        ...linksToRemove\r\n      ]) {\r\n        element.remove();\r\n      }\r\n    });\r\n  };\r\n\r\n  try {\r\n    const exportBench = benchmark('Puppeteer');\r\n\r\n    log(4, '[export] Determining export path.');\r\n\r\n    const exportOptions = options.export;\r\n\r\n    // Force a rAF\r\n    // See https://github.com/puppeteer/puppeteer/issues/7507\r\n    // eslint-disable-next-line no-undef\r\n    await page.evaluate(() => requestAnimationFrame(() => {}));\r\n\r\n    // Decide whether display error or debbuger wrapper around it\r\n    const displayErrors =\r\n      exportOptions?.options?.chart?.displayErrors &&\r\n      cache.getCache().activeManifest.modules.debugger;\r\n\r\n    // eslint-disable-next-line no-undef\r\n    await page.evaluate((d) => (window._displayErrors = d), displayErrors);\r\n\r\n    const svgBench = benchmark('SVG handling');\r\n\r\n    let isSVG;\r\n\r\n    if (\r\n      chart.indexOf &&\r\n      (chart.indexOf('<svg') >= 0 || chart.indexOf('<?xml') >= 0)\r\n    ) {\r\n      // SVG INPUT HANDLING\r\n\r\n      log(4, '[export] Treating as SVG.');\r\n\r\n      // If input is also svg, just return it\r\n      if (exportOptions.type === 'svg') {\r\n        return chart;\r\n      }\r\n\r\n      isSVG = true;\r\n      const setPageBench = benchmark('Setting content');\r\n      await page.setContent(svgTemplate(chart));\r\n      setPageBench();\r\n    } else {\r\n      // JSON Config handling\r\n\r\n      log(4, '[export] Treating as config.');\r\n\r\n      // Need to perform straight inject\r\n      if (exportOptions.strInj) {\r\n        // Injection based configuration export\r\n        const setPageBench = benchmark('Setting page content (inject)');\r\n\r\n        await setAsConfig(\r\n          page,\r\n          {\r\n            chart: {\r\n              height: exportOptions.height,\r\n              width: exportOptions.width\r\n            }\r\n          },\r\n          options\r\n        );\r\n\r\n        setPageBench();\r\n      } else {\r\n        // Basic configuration export\r\n\r\n        chart.chart.height = exportOptions.height;\r\n        chart.chart.width = exportOptions.width;\r\n\r\n        const setContentBench = benchmark('Setting page content (config)');\r\n        await setAsConfig(page, chart, options);\r\n        setContentBench();\r\n      }\r\n    }\r\n\r\n    svgBench();\r\n    const resBench = benchmark('Applying resources');\r\n\r\n    // Use resources\r\n    const resources = options.customCode.resources;\r\n    if (resources) {\r\n      // Load custom JS code\r\n      if (resources.js) {\r\n        injectedResources.push(\r\n          await page.addScriptTag({\r\n            content: resources.js\r\n          })\r\n        );\r\n      }\r\n\r\n      // Load scripts from all custom files\r\n      if (resources.files) {\r\n        for (const file of resources.files) {\r\n          try {\r\n            const isLocal = !file.startsWith('http') ? true : false;\r\n\r\n            // Add each custom script from resources' files\r\n            injectedResources.push(\r\n              await page.addScriptTag(\r\n                isLocal\r\n                  ? {\r\n                      content: readFileSync(file, 'utf8')\r\n                    }\r\n                  : {\r\n                      url: file\r\n                    }\r\n              )\r\n            );\r\n          } catch (notice) {\r\n            log(4, '[export] JS file not found.');\r\n          }\r\n        }\r\n      }\r\n\r\n      const cssBench = benchmark('Loading css');\r\n\r\n      // Load CSS\r\n      if (resources.css) {\r\n        let cssImports = resources.css.match(/@import\\s*([^;]*);/g);\r\n        if (cssImports) {\r\n          // Handle css section\r\n          for (let cssImportPath of cssImports) {\r\n            if (cssImportPath) {\r\n              cssImportPath = cssImportPath\r\n                .replace('url(', '')\r\n                .replace('@import', '')\r\n                .replace(/\"/g, '')\r\n                .replace(/'/g, '')\r\n                .replace(/;/, '')\r\n                .replace(/\\)/g, '')\r\n                .trim();\r\n\r\n              // Add each custom css from resources\r\n              if (cssImportPath.startsWith('http')) {\r\n                injectedResources.push(\r\n                  await page.addStyleTag({\r\n                    url: cssImportPath\r\n                  })\r\n                );\r\n              } else if (options.customCode.allowFileResources) {\r\n                injectedResources.push(\r\n                  await page.addStyleTag({\r\n                    path: path.join(__basedir, cssImportPath)\r\n                  })\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // The rest of the CSS section will be content by now\r\n        injectedResources.push(\r\n          await page.addStyleTag({\r\n            content: resources.css.replace(/@import\\s*([^;]*);/g, '') || ' '\r\n          })\r\n        );\r\n      }\r\n\r\n      cssBench();\r\n    }\r\n\r\n    resBench();\r\n\r\n    // Get the real chart size\r\n    const size = isSVG\r\n      ? await page.$eval(\r\n          '#chart-container svg:first-of-type',\r\n          async (element, scale) => {\r\n            return {\r\n              chartHeight: element.height.baseVal.value * scale,\r\n              chartWidth: element.width.baseVal.value * scale\r\n            };\r\n          },\r\n          parseFloat(exportOptions.scale)\r\n        )\r\n      : await page.evaluate(async () => {\r\n          // eslint-disable-next-line no-undef\r\n          const { chartHeight, chartWidth } = window.Highcharts.charts[0];\r\n          return {\r\n            chartHeight,\r\n            chartWidth\r\n          };\r\n        });\r\n\r\n    const vpBench = benchmark('Setting viewport');\r\n\r\n    // Set final height and width for viewport\r\n    const viewportHeight = Math.ceil(size?.chartHeight || exportOptions.height);\r\n    const viewportWidth = Math.ceil(size?.chartWidth || exportOptions.width);\r\n\r\n    // Set the viewport for the first time\r\n    // NOTE: the call to setViewport is expensive - can we get away with only\r\n    // calling it once, e.g. moving this one into the isSVG condition below?\r\n    await page.setViewport({\r\n      height: viewportHeight,\r\n      width: viewportWidth,\r\n      deviceScaleFactor: isSVG ? 1 : parseFloat(exportOptions.scale)\r\n    });\r\n\r\n    // Prepare a zoom callback for the next evaluate call\r\n    const zoomCallback = isSVG\r\n      ? // In case of SVG the zoom must be set directly for body\r\n        (scale) => {\r\n          // Set the zoom as scale\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.zoom = scale;\r\n\r\n          // Set the margin to 0px\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.margin = '0px';\r\n        }\r\n      : // No need for such scale manipulation in case of other types of exports\r\n        () => {\r\n          // Reset the zoom for other exports than to SVGs\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.zoom = 1;\r\n        };\r\n\r\n    // Set the zoom accordingly\r\n    await page.evaluate(zoomCallback, parseFloat(exportOptions.scale));\r\n\r\n    // Get the clip region for the page\r\n    const { height, width, x, y } = await getClipRegion(page);\r\n\r\n    if (!isSVG) {\r\n      // Set the final viewport now that we have the real height\r\n      await page.setViewport({\r\n        width: Math.round(width),\r\n        height: Math.round(height),\r\n        deviceScaleFactor: parseFloat(exportOptions.scale)\r\n      });\r\n    }\r\n\r\n    vpBench();\r\n\r\n    let data;\r\n\r\n    const expBenchmark = benchmark('Rasterizing chart');\r\n\r\n    // RASTERIZATION\r\n    if (exportOptions.type === 'svg') {\r\n      // SVG\r\n      data = await createSVG(page);\r\n    } else if (exportOptions.type === 'png' || exportOptions.type === 'jpeg') {\r\n      // PNG or JPEG\r\n      data = await createImage(page, exportOptions.type, 'base64', {\r\n        width: viewportWidth,\r\n        height: viewportHeight,\r\n        x,\r\n        y\r\n      });\r\n    } else if (exportOptions.type === 'pdf') {\r\n      // PDF\r\n      data = await createPDF(page, viewportHeight, viewportWidth, 'base64');\r\n    } else {\r\n      throw `Unsupported output format ${exportOptions.type}`;\r\n    }\r\n\r\n    // Destroy old charts after the export is done\r\n    await page.evaluate(() => {\r\n      // eslint-disable-next-line no-undef\r\n      const oldCharts = Highcharts.charts;\r\n\r\n      // Check in any already existing charts\r\n      if (oldCharts.length) {\r\n        // Destroy old charts\r\n        for (const oldChart of oldCharts) {\r\n          oldChart && oldChart.destroy();\r\n          // eslint-disable-next-line no-undef\r\n          Highcharts.charts.shift();\r\n        }\r\n      }\r\n    });\r\n\r\n    expBenchmark();\r\n    exportBench();\r\n\r\n    await clearInjected(page);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    await clearInjected(page);\r\n    log(1, `[export] Error encountered during export: ${error}`);\r\n\r\n    return error;\r\n  }\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2022, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { log } from './logger.js';\r\nconst timers = {};\r\n\r\n// TODO: Read from config\r\nlet enabled = false;\r\n\r\nexport default (id) => {\r\n  if (!enabled) {\r\n    return () => {};\r\n  }\r\n\r\n  timers[id] = new Date();\r\n  return () => {\r\n    log(\r\n      3,\r\n      `[benchmark] - ${id}: ${new Date().getTime() - timers[id].getTime()}ms`\r\n    );\r\n  };\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport cssTemplate from './css.js';\r\n\r\nexport default (chart) => `\r\n<!DOCTYPE html>\r\n<html lang='en-US'>\r\n  <head>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n    <title>Highcarts Export</title>\r\n  </head>\r\n  <style>\r\n    ${cssTemplate()}\r\n  </style>\r\n  <body>\r\n    <div id=\"chart-container\">\r\n      ${chart}\r\n    </div>\r\n  </body>\r\n</html>\r\n\r\n`;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { existsSync, readFileSync, promises as fsPromises } from 'fs';\r\n\r\nimport prompts from 'prompts';\r\n\r\nimport { log } from './logger.js';\r\n\r\nimport { mergeConfigOptions } from './utils.js';\r\nimport { promptsConfig } from './schemas/config.js';\r\n\r\n/**\r\n * Loads the configuration from JSON file.\r\n *\r\n * @param {object} options - All options object.\r\n * @return {object} - Updated options object.\r\n */\r\nexport const loadConfigFile = async (options) => {\r\n  const configFile = options.customCode && options.customCode.loadConfig;\r\n  try {\r\n    // An additional config file\r\n    if (configFile) {\r\n      // Return options updated with the properties from the loaded JSON file\r\n      options = mergeConfigOptions(\r\n        options,\r\n        JSON.parse(readFileSync(configFile))\r\n      );\r\n    }\r\n\r\n    // Return updated options\r\n    return options;\r\n  } catch (error) {\r\n    log(1, `[config] Unable to load config from the ${configFile}: ${error}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Recursively sets a property in a correct indentation level based on the\r\n * array of nested properties names.\r\n *\r\n * @param {object} objectToUpdate - Object where a property must be set on a\r\n * correct level.\r\n * @param  {string[]}nestedNames - Array of nasted names that indicates\r\n * indentation level.\r\n * @param {any} value - A value to assign to the property.\r\n * @return {object} - Updated options object.\r\n */\r\nconst recursiveProps = (objectToUpdate, nestedNames, value) => {\r\n  while (nestedNames.length > 1) {\r\n    const propName = nestedNames.shift();\r\n\r\n    // Create a property in object if it doesn't exist\r\n    if (!Object.prototype.hasOwnProperty.call(objectToUpdate, propName)) {\r\n      objectToUpdate[propName] = {};\r\n    }\r\n\r\n    // Call function again if there still names to go\r\n    objectToUpdate[propName] = recursiveProps(\r\n      Object.assign({}, objectToUpdate[propName]),\r\n      nestedNames,\r\n      value\r\n    );\r\n\r\n    return objectToUpdate;\r\n  }\r\n\r\n  // Assign the final value\r\n  objectToUpdate[nestedNames[0]] = value;\r\n  return objectToUpdate;\r\n};\r\n\r\n/**\r\n * Displays a prompt for the manual configuration.\r\n *\r\n * @param {string} configFileName - The name of a configuration file.\r\n */\r\nexport const manualConfiguration = async (configFileName) => {\r\n  // Prepare a config object\r\n  let configFile = {};\r\n\r\n  // Check if provided config file exists\r\n  if (existsSync(configFileName)) {\r\n    configFile = JSON.parse(readFileSync(configFileName, 'utf8'));\r\n  }\r\n\r\n  // Question about a configuration category\r\n  const onSubmit = async (p, categories) => {\r\n    let questionsCounter = 0;\r\n    let allQuestions = [];\r\n\r\n    // Create a corresponding property in the manualConfig object\r\n    for (const section of categories) {\r\n      // Mark each option with a section\r\n      promptsConfig[section] = promptsConfig[section].map((option) => ({\r\n        ...option,\r\n        section\r\n      }));\r\n\r\n      // Collect the questions\r\n      allQuestions = [...allQuestions, ...promptsConfig[section]];\r\n    }\r\n\r\n    await prompts(allQuestions, {\r\n      onSubmit: async (prompt, answer) => {\r\n        // Get the default modules\r\n        if (prompt.name === 'modules') {\r\n          answer = answer.length\r\n            ? answer.map((module) => prompt.choices[module])\r\n            : prompt.choices;\r\n\r\n          configFile[prompt.section][prompt.name] = answer;\r\n        } else {\r\n          configFile[prompt.section] = recursiveProps(\r\n            Object.assign({}, configFile[prompt.section] || {}),\r\n            prompt.name.split('.'),\r\n            answer\r\n          );\r\n        }\r\n\r\n        if (++questionsCounter === allQuestions.length) {\r\n          try {\r\n            await fsPromises.writeFile(\r\n              configFileName,\r\n              JSON.stringify(configFile, null, 2),\r\n              'utf8'\r\n            );\r\n          } catch (error) {\r\n            log(1, `[config] Error while creating config.json: ${error}`);\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return true;\r\n  };\r\n\r\n  // Find the categories\r\n  const choices = Object.keys(promptsConfig).map((choice) => ({\r\n    title: `${choice} options`,\r\n    value: choice\r\n  }));\r\n\r\n  // Category prompt\r\n  return prompts(\r\n    {\r\n      type: 'multiselect',\r\n      name: 'category',\r\n      message: 'Which category do you want to configure?',\r\n      hint: 'Space: Select specific, A: Select all, Enter: Confirm.',\r\n      instructions: '',\r\n      choices\r\n    },\r\n    { onSubmit }\r\n  );\r\n};\r\n\r\n/**\r\n * Inits default options recursively.\r\n *\r\n * @param {any} items - Items to update options from.\r\n * @return {object} - Updated options object.\r\n */\r\nexport const initDefaultOptions = (items) => {\r\n  let options = {};\r\n  for (const [name, item] of Object.entries(items)) {\r\n    options[name] = Object.prototype.hasOwnProperty.call(item, 'value')\r\n      ? item.value\r\n      : initDefaultOptions(item);\r\n  }\r\n  return options;\r\n};\r\n\r\n/**\r\n * Initializes options for the `startExport` method by merging user options\r\n * with the default options and pool options.\r\n *\r\n * @param {any} exportOptions - User options for exporting.\r\n * @param {any} poolOptions - Options of the pool which is used for export.\r\n * @return {object} - User options merged with default options.\r\n */\r\nexport const initExportSettings = (exportOptions, poolOptions = {}) => {\r\n  let options = {};\r\n\r\n  if (exportOptions.svg) {\r\n    options = poolOptions; // default poolOptions\r\n    options.export.type = exportOptions.type || exportOptions.export.type;\r\n    options.export.scale = exportOptions.scale || exportOptions.export.scale;\r\n    options.export.outfile = exportOptions.outfile || exportOptions.export.outfile;\r\n    options.payload = {\r\n      svg: exportOptions.svg\r\n    };\r\n  } else {\r\n    options = mergeConfigOptions(\r\n      poolOptions,\r\n      exportOptions,\r\n      // Omit going down recursively with the belows\r\n      ['options', 'globalOptions', 'themeOptions', 'resources']\r\n    );\r\n  }\r\n\r\n  options.export.outfile = options.export?.outfile || `chart.${options.export?.type || 'png'}`;\r\n  return options;\r\n}\r\n\r\nexport default {\r\n  loadConfigFile,\r\n  manualConfiguration,\r\n  initDefaultOptions,\r\n  initExportSettings\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFile, readFileSync } from 'fs';\r\n\r\nimport { log } from './logger.js';\r\nimport { postWork } from './pool.js';\r\nimport {\r\n  clearText,\r\n  fixType,\r\n  handleResources,\r\n  isCorrectJSON,\r\n  optionsStringify,\r\n  roundNumber,\r\n  toBoolean,\r\n  wrapAround\r\n} from './utils.js';\r\nimport { initExportSettings } from './config.js';\r\n\r\nlet allowCodeExecution = false;\r\n\r\nlet poolOptions = {};\r\n\r\n/**\r\n * Function for choosing chart size and scale based on options prioritization.\r\n *\r\n * @param {object} options - All options object.\r\n * @return {object} - An object with updated size and scale for a chart.\r\n */\r\nexport const findChartSize = (options) => {\r\n  const { chart, exporting } =\r\n    options.export?.options || isCorrectJSON(options.export?.instr);\r\n\r\n  // See if globalOptions holds chart or exporting size\r\n  const globalOptions = isCorrectJSON(options.export?.globalOptions);\r\n\r\n  // Secure scale value\r\n  let scale = roundNumber(\r\n    options.export?.scale ||\r\n      exporting?.scale ||\r\n      globalOptions?.exporting?.scale ||\r\n      options.export?.defaultScale ||\r\n      1\r\n  );\r\n\r\n  if (scale > 5) {\r\n    scale = 5;\r\n  } else if (scale < 0.1) {\r\n    scale = 1;\r\n  }\r\n\r\n  // Find chart size and scale\r\n  return {\r\n    height:\r\n      options.export?.height ||\r\n      exporting?.sourceHeight ||\r\n      chart?.height ||\r\n      globalOptions?.exporting?.sourceHeight ||\r\n      globalOptions?.chart?.height ||\r\n      options.export?.defaultHeight ||\r\n      400,\r\n    width:\r\n      options.export?.width ||\r\n      exporting?.sourceWidth ||\r\n      chart?.width ||\r\n      globalOptions?.exporting?.sourceWidth ||\r\n      globalOptions?.chart?.width ||\r\n      options.export?.defaultWidth ||\r\n      600,\r\n    scale\r\n  };\r\n};\r\n\r\n/**\r\n * Function for final options preparation before export.\r\n *\r\n * @param {object} options - All options object.\r\n * @param {object} chartJson - Chart JSON.\r\n * @param {function} endCallback - The end callback.\r\n * @param {string} svg - The SVG representation.\r\n */\r\nconst doExport = (options, chartJson, endCallback, svg) => {\r\n  let { export: exportOptions, customCode: customCodeOptions } = options;\r\n\r\n    const allowCodeExecutionScoped = (\r\n        typeof customCodeOptions.allowCodeExecution === 'boolean' ?\r\n            customCodeOptions.allowCodeExecution : allowCodeExecution\r\n    );\r\n\r\n  if (!customCodeOptions) {\r\n    customCodeOptions = options.customCode = {};\r\n  } else if (typeof options.customCode.resources === 'string') {\r\n    // Process resources\r\n    options.customCode.resources = handleResources(\r\n      options.customCode.resources,\r\n      toBoolean(options.customCode.allowFileResources)\r\n    );\r\n  }\r\n\r\n  // If the allowCodeExecution flag isn't set, we should refuse the usage\r\n  // of callback, resources, and custom code. Additionally, the worker will\r\n  // refuse to run arbitrary JavaScript. Prioritized should be the scoped\r\n  // option, then we should take a look at the overall pool option.\r\n  if (!allowCodeExecutionScoped && customCodeOptions) {\r\n    if (\r\n      customCodeOptions.callback ||\r\n      customCodeOptions.resources ||\r\n      customCodeOptions.customCode\r\n    ) {\r\n      // Send back a friendly message saying that the exporter does not support\r\n      // these settings.\r\n      return (\r\n        endCallback &&\r\n        endCallback(false, {\r\n          error: true,\r\n          message: clearText(\r\n            `The callback, resources and customCode have been disabled for this\r\n            server.`\r\n          )\r\n        })\r\n      );\r\n    }\r\n\r\n    // Reset all additional custom code\r\n    customCodeOptions.callback = false;\r\n    customCodeOptions.resources = false;\r\n    customCodeOptions.customCode = false;\r\n  }\r\n\r\n  // Clean properties to keep it lean and mean\r\n  if (chartJson) {\r\n    chartJson.chart = chartJson.chart || {};\r\n    chartJson.exporting = chartJson.exporting || {};\r\n    chartJson.exporting.enabled = false;\r\n  }\r\n\r\n  exportOptions.constr = exportOptions.constr || 'chart';\r\n  exportOptions.type = fixType(exportOptions.type, exportOptions.outfile);\r\n  if (exportOptions.type === 'svg') {\r\n    exportOptions.width = false;\r\n  }\r\n\r\n  // Prepare global and theme options\r\n  ['globalOptions', 'themeOptions'].forEach((optionsName) => {\r\n    try {\r\n      if (exportOptions && exportOptions[optionsName]) {\r\n        if (\r\n          typeof exportOptions[optionsName] === 'string' &&\r\n          exportOptions[optionsName].endsWith('.json')\r\n        ) {\r\n          exportOptions[optionsName] = isCorrectJSON(\r\n            readFileSync(exportOptions[optionsName], 'utf8'),\r\n            true\r\n          );\r\n        } else {\r\n          exportOptions[optionsName] = isCorrectJSON(\r\n            exportOptions[optionsName],\r\n            true\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      exportOptions[optionsName] = {};\r\n      log(1, `[chart] The ${optionsName} not found.`);\r\n    }\r\n  });\r\n\r\n  // Prepare customCode\r\n  if (customCodeOptions.allowCodeExecution) {\r\n    customCodeOptions.customCode = wrapAround(\r\n      customCodeOptions.customCode,\r\n      customCodeOptions.allowFileResources\r\n    );\r\n  }\r\n\r\n  // Get the callback\r\n  if (\r\n    customCodeOptions &&\r\n    customCodeOptions.callback &&\r\n    customCodeOptions.callback?.indexOf('{') < 0\r\n  ) {\r\n    // The allowFileResources is always set to false for HTTP requests to avoid\r\n    // injecting arbitrary files from the fs\r\n    if (customCodeOptions.allowFileResources) {\r\n      try {\r\n        customCodeOptions.callback = readFileSync(\r\n          customCodeOptions.callback,\r\n          'utf8'\r\n        );\r\n      } catch (error) {\r\n        log(2, `[chart] Error loading callback: ${error}.`);\r\n        customCodeOptions.callback = false;\r\n      }\r\n    } else {\r\n      customCodeOptions.callback = false;\r\n    }\r\n  }\r\n\r\n  // Size search\r\n  options.export = {\r\n    ...options.export,\r\n    ...findChartSize(options)\r\n  };\r\n\r\n  // Post the work to the pool\r\n  postWork(exportOptions.strInj || chartJson || svg, options)\r\n    .then((result) => endCallback(result))\r\n    .catch((error) => {\r\n      log(0, '[chart] When posting work:', error);\r\n      return endCallback(false, error);\r\n    });\r\n};\r\n\r\n/**\r\n * Function for straight injecting the code.\r\n * Dangerous and must be used deliberately by someone who sets up a server\r\n * (see  --allowCodeExecution).\r\n *\r\n * @param {object} options - All options object.\r\n * @param {function} endCallback - The function to call when exporting is done.\r\n */\r\nconst doStraightInject = (options, endCallback) => {\r\n  try {\r\n    let strInj;\r\n    let instr = options.export.instr || options.export.options;\r\n\r\n    if (typeof instr !== 'string') {\r\n      // Try to stringify options\r\n      strInj = instr = optionsStringify(\r\n        instr,\r\n        options.customCode?.allowCodeExecution\r\n      );\r\n    }\r\n    strInj = instr.replaceAll(/\\t|\\n|\\r/g, '').trim();\r\n\r\n    // Get rid of the ;\r\n    if (strInj[strInj.length - 1] === ';') {\r\n      strInj = strInj.substring(0, strInj.length - 1);\r\n    }\r\n\r\n    // Save as stright inject string\r\n    options.export.strInj = strInj;\r\n    return doExport(options, false, endCallback);\r\n  } catch (error) {\r\n    const message = clearText(\r\n      `Malformed input detected for ${options.export?.requestId || '?'}:\r\n      Please make sure that your JSON/JavaScript options\r\n      are sent using the \"options\" attribute, and that if you're using\r\n      SVG, it is unescaped.`\r\n    );\r\n\r\n    log(1, message);\r\n    return (\r\n      endCallback &&\r\n      endCallback(\r\n        false,\r\n        JSON.stringify({\r\n          error: true,\r\n          message\r\n        })\r\n      )\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Prepares an input before exporting.\r\n *\r\n * @param {string} stringToExport - String representation of SVG/export options.\r\n * @param {object} options - All options object.\r\n * @param {function} endCallback - The function to call when exporting is done.\r\n */\r\nconst exportAsString = (stringToExport, options, endCallback) => {\r\n  const { allowCodeExecution } = options.customCode;\r\n\r\n  // Check if it is SVG\r\n  if (\r\n    stringToExport.indexOf('<svg') >= 0 ||\r\n    stringToExport.indexOf('<?xml') >= 0\r\n  ) {\r\n    log(4, '[chart] Parsing input as SVG.');\r\n    return doExport(options, false, endCallback, stringToExport);\r\n  }\r\n\r\n  try {\r\n    // Try to parse to JSON and call the doExport function\r\n    const chartJSON = JSON.parse(stringToExport.replaceAll(/\\t|\\n|\\r/g, ' '));\r\n\r\n    // If a correct JSON, do the export\r\n    return doExport(options, chartJSON, endCallback);\r\n  } catch (error) {\r\n    // Not a valid JSON\r\n    if (toBoolean(allowCodeExecution)) {\r\n      return doStraightInject(options, endCallback);\r\n    } else {\r\n      // Do not allow straight injection without the allowCodeExecution flag\r\n      return (\r\n        endCallback &&\r\n        endCallback(false, {\r\n          error: true,\r\n          message: clearText(\r\n            `Only JSON configurations and SVG is allowed for this server. If\r\n            this is your server, JavaScript exporting can be enabled by starting\r\n            the server with the --allowCodeExecution flag.`\r\n          )\r\n        })\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Starts an exporting process\r\n *\r\n * @param {object} settings - Settings for export.\r\n * @param {function} endCallback - The function to call when exporting is done.\r\n */\r\nexport default {\r\n  startExport: async (settings, endCallback) => {\r\n    // Starting exporting process message\r\n    log(4, '[chart] Starting exporting process.');\r\n\r\n    // Initialize options\r\n    const options = initExportSettings(settings, poolOptions);\r\n\r\n    // Get the export options\r\n    const exportOptions = options.export;\r\n\r\n    // If SVG is an input (argument can be sent only by the request)\r\n    if (options.payload?.svg && options.payload.svg !== '') {\r\n      return exportAsString(options.payload.svg.trim(), options, endCallback);\r\n    }\r\n\r\n    // Export using options from the file\r\n    if (exportOptions.infile && exportOptions.infile.length) {\r\n      log(4, '[chart] Attempting to export from an input file.');\r\n\r\n      // Try to read the file\r\n      return readFile(exportOptions.infile, 'utf8', (error, infile) => {\r\n        if (error) {\r\n          return log(1, `[chart] Error loading input file: ${error}.`);\r\n        }\r\n\r\n        // Get the string representation\r\n        options.export.instr = infile;\r\n        return exportAsString(\r\n          options.export.instr.trim(),\r\n          options,\r\n          endCallback\r\n        );\r\n      });\r\n    }\r\n\r\n    // Export with options from the raw representation\r\n    if (\r\n      (exportOptions.instr && exportOptions.instr !== '') ||\r\n      (exportOptions.options && exportOptions.options !== '')\r\n    ) {\r\n      log(4, '[chart] Attempting to export from a raw input.');\r\n\r\n      // Perform a direct inject when forced\r\n      if (toBoolean(options.customCode?.allowCodeExecution)) {\r\n        return doStraightInject(options, endCallback);\r\n      }\r\n\r\n      // Either try to parse to JSON first or do the direct export\r\n      return typeof exportOptions.instr === 'string'\r\n        ? exportAsString(exportOptions.instr.trim(), options, endCallback)\r\n        : doExport(\r\n            options,\r\n            exportOptions.instr || exportOptions.options,\r\n            endCallback\r\n          );\r\n    }\r\n\r\n    // No input specified, pass an error message to the callback\r\n    log(\r\n      1,\r\n      clearText(\r\n        `[chart] No input specified.\r\n        ${JSON.stringify(exportOptions, undefined, '  ')}.`\r\n      )\r\n    );\r\n\r\n    return (\r\n      endCallback &&\r\n      endCallback(false, {\r\n        error: true,\r\n        message: 'No input specified.'\r\n      })\r\n    );\r\n  },\r\n  getAllowCodeExecution: () => allowCodeExecution,\r\n  setAllowCodeExecution: (value) => {\r\n    allowCodeExecution = toBoolean(value);\r\n  },\r\n  setPoolOptions: (options) => {\r\n    poolOptions = options;\r\n  },\r\n  findChartSize\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Pool } from 'tarn';\r\nimport {\r\n  close,\r\n  newPage as browserNewPage,\r\n  create as createBrowser\r\n} from './browser.js';\r\nimport { log } from './logger.js';\r\n\r\nimport puppeteerExport from './export.js';\r\nimport chart from './chart.js';\r\n\r\nlet performedExports = 0;\r\nlet exportAttempts = 0;\r\nlet timeSpent = 0;\r\nlet droppedExports = 0;\r\nlet spentAverage = 0;\r\nlet poolConfig = {};\r\n\r\n// The pool instance\r\nlet pool = false;\r\n\r\n// Custom puppeteer arguments\r\nlet puppeteerArgs;\r\n\r\nconst factory = {\r\n  /**\r\n   * Creates a new worker.\r\n   *\r\n   * @return {object} - An object with the id of a resource, the work count and\r\n   * a reference to the browser page.\r\n   */\r\n  create: async () => {\r\n    const id = uuid();\r\n    let page = false;\r\n\r\n    const s = new Date().getTime();\r\n\r\n    try {\r\n      page = await browserNewPage();\r\n\r\n      if (!page || page.isClosed()) {\r\n        throw 'invalid page';\r\n      }\r\n\r\n      log(\r\n        3,\r\n        `[pool] Successfully created a worker ${id} - took ${\r\n          new Date().getTime() - s\r\n        } ms.`\r\n      );\r\n    } catch (error) {\r\n      log(\r\n        1,\r\n        `[pool] Error creating a new page in pool entry creation! ${error}`\r\n      );\r\n\r\n      throw 'Error creating page';\r\n    }\r\n\r\n    return {\r\n      id,\r\n      page,\r\n      // Try to distribute the initial work count\r\n      workCount: Math.round(Math.random() * (poolConfig.workLimit / 2))\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Validates a worker.\r\n   *\r\n   * @param {object} workerHandle - A browser's instance.\r\n   *\r\n   * @return {boolean} - Bool that indicates if a resource is valid or not.\r\n   */\r\n  validate: (workerHandle) => {\r\n    if (\r\n      poolConfig.workLimit &&\r\n      ++workerHandle.workCount > poolConfig.workLimit\r\n    ) {\r\n      log(\r\n        3,\r\n        `[pool] Worker failed validation:`,\r\n        `exceeded work limit (limit is ${poolConfig.workLimit})`\r\n      );\r\n      return false;\r\n    }\r\n    return true;\r\n  },\r\n\r\n  /**\r\n   * Destroys a worker.\r\n   *\r\n   * @param {object} workerHandle - A browser's instance.\r\n   */\r\n  destroy: (workerHandle) => {\r\n    log(3, `[pool] Destroying pool entry ${workerHandle.id}.`);\r\n\r\n    if (workerHandle.page) {\r\n      // We don't really need to wait around for this.\r\n      workerHandle.page.close();\r\n    }\r\n  },\r\n\r\n  // Logger function\r\n  log: (message, logLevel) => console.log(`${logLevel}: ${message}`)\r\n}\r\n\r\n/**\r\n * Inits the pool of resources.\r\n *\r\n * @param {object} config - Pool configuration along with custom puppeteer\r\n * arguments for the puppeteer.launch function.\r\n */\r\nexport const init = async (config) => {\r\n  // The newest puppeteer arguments for the browser creation\r\n  puppeteerArgs = config.puppeteerArgs;\r\n\r\n  // Wait until we've sucessfully created a browser instance.\r\n  try {\r\n    await createBrowser(puppeteerArgs);\r\n  } catch (e) {\r\n    log(0, '[pool|browser]', e);\r\n  }\r\n\r\n  // For the module scope usage\r\n  poolConfig = config && config.pool ? { ...config.pool } : {};\r\n\r\n  log(\r\n    3,\r\n    '[pool] Initializing pool:',\r\n    `min ${poolConfig.initialWorkers}, max ${poolConfig.maxWorkers}.`\r\n  );\r\n\r\n  if (pool) {\r\n    return log(\r\n      4,\r\n      '[pool] Already initialized, please kill it before creating a new one.'\r\n    );\r\n  }\r\n\r\n  // Attach process' exit listeners\r\n  if (poolConfig.listenToProcessExits) {\r\n    attachProcessExitListeners();\r\n  }\r\n\r\n  try {\r\n    // Create a pool along with a minimal number of resources\r\n    pool = new Pool({\r\n      // Get the create/validate/destroy/log functions\r\n      ...factory,\r\n      min: poolConfig.initialWorkers,\r\n      max: poolConfig.maxWorkers,\r\n      createRetryIntervalMillis: 200,\r\n      createTimeoutMillis: poolConfig.acquireTimeout,\r\n      acquireTimeoutMillis: poolConfig.acquireTimeout,\r\n      destroyTimeoutMillis: poolConfig.acquireTimeout,\r\n      idleTimeoutMillis: poolConfig.timeoutThreshold,\r\n      reapIntervalMillis: 1000, // poolConfig.reaper ? 120000 : 0, for now\r\n      propagateCreateError: false\r\n    });\r\n\r\n    // Set events\r\n    pool.on('createFail', (eventId, err) => {\r\n      log(1, `[pool] Error when creating worker of an event id ${eventId}:`, err);\r\n    });\r\n\r\n    pool.on('acquireFail', (eventId, err) => {\r\n      log(1, `[pool] Error when acquiring worker of an event id ${eventId}:`, err);\r\n    });\r\n\r\n    pool.on('destroyFail', (eventId, resource, err) => {\r\n      log(1, `[pool] Error when destroying worker of an id ${resource.id}, event id ${eventId}:`, err);\r\n    });\r\n\r\n    pool.on('release', (resource) => {\r\n      log(4, `[pool] Releasing a worker of an id ${resource.id}`);\r\n    });\r\n\r\n    pool.on('destroySuccess', (eventId, resource) => {\r\n      log(4, `[pool] Destroyed a worker of an id ${resource.id}`);\r\n    });\r\n\r\n    const initialResources = [];\r\n    // Create an initial number of resources\r\n    for (let i = 0; i < poolConfig.initialWorkers; i++) {\r\n      initialResources.push(await pool.acquire().promise);\r\n    }\r\n\r\n    // Release the initial number of resources back to the pool\r\n    initialResources.forEach((resource) => {\r\n      pool.release(resource);\r\n    });\r\n\r\n    log(\r\n      3,\r\n      `[pool] The pool is ready with ${poolConfig.initialWorkers} initial resources waiting.`\r\n    );\r\n  } catch (error) {\r\n    log(1, `[pool] Couldn't create the worker pool ${error}`);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Attaches process' exit listeners.\r\n */\r\nexport function attachProcessExitListeners() {\r\n  log(4, '[pool] Attaching exit listeners to the process.');\r\n\r\n  // Kill all pool resources on exit\r\n  process.on('exit', async () => {\r\n    await killAll();\r\n  });\r\n\r\n  // Handler for the SIGINT\r\n  process.on('SIGINT', (name, code) => {\r\n    log(4, `The ${name} event with code: ${code}.`);\r\n    process.exit(1);\r\n  });\r\n\r\n  // Handler for the SIGTERM\r\n  process.on('SIGTERM', (name, code) => {\r\n    log(4, `The ${name} event with code: ${code}.`);\r\n    process.exit(1);\r\n  });\r\n\r\n  // Handler for the uncaughtException\r\n  process.on('uncaughtException', async (error, name) => {\r\n    log(4, `The ${name} error, message: ${error.message}.`);\r\n  });\r\n}\r\n\r\n/**\r\n * Kills the pool and flush the browser instance.\r\n */\r\nexport async function killAll() {\r\n  log(3, '[pool] Killing all workers.');\r\n\r\n  chart.setPoolOptions({});\r\n\r\n  // Close browser instance\r\n  try {\r\n    await close();\r\n  } catch {\r\n    // if the browser has already been closed,\r\n    // skip the rest of this function\r\n    log(4, \"[pool] Worker has already been killed.\");\r\n    return;\r\n  }\r\n\r\n  // Return true when pool is already dead\r\n  if (!pool) {\r\n    return true;\r\n  }\r\n\r\n  // Destroy the pool\r\n  return pool.destroy();\r\n}\r\n\r\n/**\r\n * Posts work to the pool.\r\n *\r\n * @param {object} chart - Chart's options.\r\n * @param {object} options - All options object.\r\n */\r\nexport const postWork = async (chart, options) => {\r\n  let workerHandle;\r\n\r\n  // Handle fail conditions\r\n  const fail = (msg) => {\r\n    ++droppedExports;\r\n\r\n    if (workerHandle) {\r\n      pool.release(workerHandle);\r\n    }\r\n\r\n    throw 'In pool.postWork: ' + msg;\r\n  };\r\n\r\n  log(4, '[pool] Work received, starting to process.');\r\n\r\n  if (poolConfig.benchmarking) {\r\n    getPoolInfo();\r\n  }\r\n\r\n  ++exportAttempts;\r\n\r\n  if (!pool) {\r\n    log(1, '[pool] Work received, but pool has not been started.');\r\n    return fail('Pool is not inited but work was posted to it!');\r\n  }\r\n\r\n  // Acquire the worker along with the id of resource and work count\r\n  try {\r\n    log(4, '[pool] Acquiring worker');\r\n    workerHandle = await pool.acquire().promise;\r\n  } catch (error) {\r\n    return fail(`[pool] Error when acquiring available entry: ${error}`);\r\n  }\r\n\r\n  log(4, '[pool] Acquired worker handle');\r\n\r\n  if (!workerHandle.page) {\r\n    return fail('Resolved worker page is invalid: pool setup is wonky');\r\n  }\r\n\r\n  try {\r\n    // Save the start time\r\n    let workStart = new Date().getTime();\r\n\r\n    log(4, `[pool] Starting work on pool entry ${workerHandle.id}.`);\r\n\r\n    // Perform an export on a puppeteer level\r\n    const result = await puppeteerExport(workerHandle.page, chart, options);\r\n\r\n    // Check if it's an error\r\n    if (result instanceof Error) {\r\n      // TODO: If the export failed because puppeteer timed out, we need to force kill the worker so we get a new page. That needs to be handled better than this hack.\r\n      if (result.message === 'Rasterization timeout') {\r\n        workerHandle.page.close();\r\n        workerHandle.page = await browserNewPage();\r\n      }\r\n\r\n      return fail(result);\r\n    }\r\n\r\n    // Release the resource back to the pool\r\n    pool.release(workerHandle);\r\n\r\n    // Used for statistics in averageTime and processedWorkCount, which\r\n    // in turn is used by the /health route.\r\n    const workEnd = new Date().getTime();\r\n    const exportTime = workEnd - workStart;\r\n    timeSpent += exportTime;\r\n    spentAverage = timeSpent / ++performedExports;\r\n\r\n    log(4, `[pool] Work completed in ${exportTime} ms.`);\r\n\r\n    // Otherwise return the result\r\n    return {\r\n      data: result,\r\n      options\r\n    };\r\n  } catch (error) {\r\n    fail(`Error trying to perform puppeteer export: ${error}.`);\r\n  }\r\n};\r\n\r\n/**\r\n * Gets the pool.\r\n */\r\nexport function getPool() {\r\n  return pool;\r\n}\r\n\r\nexport const getPoolInfoJSON = () => ({\r\n  min: pool.min,\r\n  max: pool.max,\r\n  size: pool.size,\r\n  available: pool.available,\r\n  borrowed: pool.borrowed,\r\n  pending: pool.pending,\r\n  spareResourceCapacity: pool.spareResourceCapacity\r\n});\r\n\r\n/**\r\n * Gets the pool's information.\r\n */\r\nexport function getPoolInfo() {\r\n  const {\r\n    min,\r\n    max,\r\n    size,\r\n    available,\r\n    borrowed,\r\n    pending,\r\n    spareResourceCapacity\r\n  } = pool;\r\n\r\n  log(4, `[pool] The minimum number of resources allowed by pool: ${min}.`);\r\n  log(4, `[pool] The maximum number of resources allowed by pool: ${max}.`);\r\n  log(\r\n    4,\r\n    `[pool] The number of all resources in pool (free or in use): ${size}.`\r\n  );\r\n  log(\r\n    4,\r\n    `[pool] The number of resources that are currently available: ${available}.`\r\n  );\r\n  log(\r\n    4,\r\n    `[pool] The number of resources that are currently acquired: ${borrowed}.`\r\n  );\r\n  log(\r\n    4,\r\n    `[pool] The number of callers waiting to acquire a resource: ${pending}.`\r\n  );\r\n  log(\r\n    4,\r\n    `[pool] The number of how many more resources can the pool manage/create: ${spareResourceCapacity}.`\r\n  );\r\n}\r\n\r\nexport default {\r\n  init,\r\n  killAll,\r\n  postWork,\r\n  getPool,\r\n  getPoolInfo,\r\n  getPoolInfoJSON,\r\n  workAttempts: () => exportAttempts,\r\n  droppedWork: () => droppedExports,\r\n  averageTime: () => spentAverage,\r\n  processedWorkCount: () => performedExports\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport cache from '../../cache.js';\r\nimport pool from '../../pool.js';\r\n\r\nconst packageVersion = process.env.npm_package_version;\r\nconst serverStartTime = new Date();\r\n\r\n/**\r\n * Adds the /health route which outputs basic stats for the server\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.get('/health', (request, response) => {\r\n        response.send({\r\n          status: 'OK',\r\n          bootTime: serverStartTime,\r\n          uptime:\r\n            Math.floor(\r\n              (new Date().getTime() - serverStartTime.getTime()) / 1000 / 60\r\n            ) + ' minutes',\r\n          version: packageVersion,\r\n          highchartsVersion: cache.version(),\r\n          averageProcessingTime: pool.averageTime(),\r\n          performedExports: pool.processedWorkCount(),\r\n          failedExports: pool.droppedWork(),\r\n          exportAttempts: pool.workAttempts(),\r\n          sucessRatio: (pool.processedWorkCount() / pool.workAttempts()) * 100,\r\n          // eslint-disable-next-line import/no-named-as-default-member\r\n          pool: pool.getPoolInfoJSON()\r\n        });\r\n      });\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport chart from '../../chart.js';\r\nimport { initDefaultOptions } from '../../config.js';\r\nimport { log } from '../../logger.js';\r\nimport {\r\n  clearText,\r\n  fixType,\r\n  isCorrectJSON,\r\n  isPrivateRangeUrlFound,\r\n  mergeConfigOptions,\r\n  optionsStringify,\r\n  measureTime\r\n} from '../../utils.js';\r\nimport { defaultConfig } from '../../schemas/config.js';\r\n\r\n// Reversed MIME types\r\nconst reversedMime = {\r\n  png: 'image/png',\r\n  jpeg: 'image/jpeg',\r\n  gif: 'image/gif',\r\n  pdf: 'application/pdf',\r\n  svg: 'image/svg+xml'\r\n};\r\n\r\n// The requests counter\r\nlet requestsCounter = 0;\r\n\r\nconst benchmark = false;\r\n\r\n// The array of callbacks to call before a request\r\nconst beforeRequest = [];\r\n\r\n// The array of callbacks to call after a request\r\nconst afterRequest = [];\r\n\r\n/**\r\n * Calls callbacks.\r\n *\r\n * @param {Array} callbacks - An array of callbacks.\r\n * @param {object} request - The request.\r\n * @param {object} response - The response.\r\n * @param {object} data - The data to send to callbacks.\r\n * @return {object} - The result from a callback.\r\n */\r\nconst doCallbacks = (callbacks, request, response, data) => {\r\n  let result = true;\r\n  const { id, uniqueId, type, body } = data;\r\n\r\n  callbacks.some((callback) => {\r\n    if (callback) {\r\n      let callResponse = callback(request, response, id, uniqueId, type, body);\r\n\r\n      if (callResponse !== undefined && callResponse !== true) {\r\n        result = callResponse;\r\n      }\r\n\r\n      return true;\r\n    }\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Handles an export.\r\n *\r\n * @param {object} request - The request.\r\n * @param {object} response - The response.\r\n */\r\nconst exportHandler = (request, response) => {\r\n  // Start counting time\r\n  const stopCounter = measureTime();\r\n\r\n  // Get default options from the config\r\n  const defaultOptions = initDefaultOptions(defaultConfig);\r\n\r\n  // Init default options\r\n  if (benchmark) {\r\n    console.log('Init default options:', stopCounter(), 'ms.');\r\n  }\r\n\r\n  const body = request.body;\r\n  const id = ++requestsCounter;\r\n  const uniqueId = uuid().replace(/-/g, '');\r\n  let type = fixType(body.type);\r\n\r\n  // Fix type\r\n  if (benchmark) {\r\n    console.log('Fix type:', stopCounter(), 'ms.');\r\n  }\r\n\r\n  // Throw 'Bad Request' if there's no body\r\n  if (!body) {\r\n    return response.status(400).send(\r\n      clearText(\r\n        `Body is required. Sending a body? Make sure your Content-type header\r\n        is correct. Accepted is application/json and multipart/form-data.`\r\n      )\r\n    );\r\n  }\r\n\r\n  // All of the below can be used\r\n  let instr = isCorrectJSON(body.infile || body.options || body.data);\r\n\r\n  // Is correct JSON\r\n  if (benchmark) {\r\n    console.log('Is correct JSON:', stopCounter(), 'ms.');\r\n  }\r\n\r\n  // Throw 'Bad Request' if there's no JSON or SVG to export\r\n  if (!instr && !body.svg) {\r\n    log(\r\n      2,\r\n      clearText(\r\n        `Request ${uniqueId} from ${\r\n          request.headers['x-forwarded-for'] || request.connection.remoteAddress\r\n        } was incorrect. Check your payload.`\r\n      )\r\n    );\r\n\r\n    return response.status(400).send(\r\n      clearText(\r\n        `No correct chart data found. Please make sure you are using\r\n        application/json or multipart/form-data headers, and that the chart\r\n        data is in the 'infile', 'options' or 'data' attribute if sending\r\n        JSON or in the 'svg' if sending SVG.`\r\n      )\r\n    );\r\n  }\r\n\r\n  let callResponse = false;\r\n\r\n  // Call the before request functions\r\n  callResponse = doCallbacks(beforeRequest, request, response, {\r\n    id,\r\n    uniqueId,\r\n    type,\r\n    body\r\n  });\r\n\r\n  // Do callbacks\r\n  if (benchmark) {\r\n    console.log('Do callbacks:', stopCounter(), 'ms.');\r\n  }\r\n\r\n  // Block the request if one of a callbacks failed\r\n  if (callResponse !== true) {\r\n    return response.send(callResponse);\r\n  }\r\n\r\n  let connectionAborted = false;\r\n\r\n  // In case the connection is closed, force to abort further actions\r\n  request.socket.on('close', () => {\r\n    connectionAborted = true;\r\n  });\r\n\r\n  log(4, `[export] Got an incoming HTTP request ${uniqueId}.`);\r\n\r\n  body.constr = (typeof body.constr === 'string' && body.constr) || 'chart';\r\n\r\n  // Gather and organize options from the payload\r\n  const requestOptions = {\r\n    export: {\r\n      instr,\r\n      type,\r\n      constr: body.constr[0].toLowerCase() + body.constr.substr(1),\r\n      height: body.height,\r\n      width: body.width,\r\n      scale: body.scale || defaultOptions.export.scale,\r\n      globalOptions: isCorrectJSON(body.globalOptions, true),\r\n      themeOptions: isCorrectJSON(body.themeOptions, true)\r\n    },\r\n    customCode: {\r\n      allowCodeExecution: chart.getAllowCodeExecution(),\r\n      allowFileResources: false,\r\n      resources: isCorrectJSON(body.resources, true),\r\n      callback: body.callback,\r\n      customCode: body.customCode\r\n    }\r\n  };\r\n\r\n  // Organize options\r\n  if (benchmark) {\r\n    console.log('Organize options:', stopCounter(), 'ms.');\r\n  }\r\n\r\n  if (instr) {\r\n    // Stringify JSON with options\r\n    requestOptions.export.instr = optionsStringify(\r\n      instr,\r\n      requestOptions.customCode.allowCodeExecution\r\n    );\r\n\r\n    // Stringify JSON with options\r\n    if (benchmark) {\r\n      console.log('Stringify JSON with options:', stopCounter(), 'ms.');\r\n    }\r\n  }\r\n\r\n  // Merge the request options into default ones\r\n  const options = mergeConfigOptions(defaultOptions, requestOptions);\r\n\r\n  // Merge config options\r\n  if (benchmark) {\r\n    console.log('Merge config options:', stopCounter(), 'ms.');\r\n  }\r\n\r\n  // Save the JSON if exists\r\n  options.export.options = instr;\r\n\r\n  // Lastly, add the server specific arguments into options as payload\r\n  options.payload = {\r\n    svg: body.svg || false,\r\n    b64: body.b64 || false,\r\n    dataOptions: isCorrectJSON(body.dataOptions, true),\r\n    noDownload: body.noDownload || false,\r\n    requestId: uniqueId\r\n  };\r\n\r\n  // Setting payload\r\n  if (benchmark) {\r\n    console.log('Setting payload:', stopCounter(), 'ms.');\r\n  }\r\n\r\n  // Test xlink:href elements from payload's SVG\r\n  if (body.svg && isPrivateRangeUrlFound(options.payload.svg)) {\r\n    return response\r\n      .status(400)\r\n      .send(\r\n        'SVG potentially contain at least one forbidden URL in xlink:href element.'\r\n      );\r\n  }\r\n\r\n  // Check URL range\r\n  if (benchmark) {\r\n    console.log('Check URL range:', stopCounter(), 'ms.');\r\n  }\r\n\r\n  // Start the export process\r\n  chart.startExport(options, (info, error) => {\r\n    // Remove the close event from the socket\r\n    request.socket.removeAllListeners('close');\r\n\r\n    // After Puppeteer exporting\r\n    if (benchmark) {\r\n      console.log('After Puppeteer exporting:', stopCounter(), 'ms.', '\\n');\r\n    }\r\n\r\n    // If the connection was closed, do nothing\r\n    if (connectionAborted) {\r\n      return log(\r\n        3,\r\n        clearText(\r\n          `[export] The client closed the connection before the chart was done\r\n          processing.`\r\n        )\r\n      );\r\n    }\r\n\r\n    // If error, return it\r\n    if (error) {\r\n      log(\r\n        1,\r\n        clearText(\r\n          `[export] Work: ${uniqueId} could not be completed, sending:\r\n          ${error}`\r\n        )\r\n      );\r\n      return response.status(400).send(error.message);\r\n    }\r\n\r\n    // If data is missing, return the error\r\n    if (!info || !info.data) {\r\n      log(\r\n        1,\r\n        clearText(\r\n          `[export] Unexpected return from chart generation, please check your\r\n          data Request: ${uniqueId} is ${info.data}.`\r\n        )\r\n      );\r\n      return response\r\n        .status(400)\r\n        .send(\r\n          'Unexpected return from chart generation, please check your data.'\r\n        );\r\n    }\r\n\r\n    // Get the type from options\r\n    type = info.options.export.type;\r\n\r\n    // The after request callbacks\r\n    doCallbacks(afterRequest, request, response, { id, body: info.data });\r\n\r\n    if (info.data) {\r\n      // If only base64 is required, return it\r\n      if (body.b64) {\r\n        // Check if it is already base64 or a raw SVG\r\n        if (type === 'pdf') {\r\n          return response.send(\r\n            Buffer.from(info.data, 'utf8').toString('base64')\r\n          );\r\n        }\r\n        return response.send(info.data);\r\n      }\r\n\r\n      // Set correct content type\r\n      response.header('Content-Type', reversedMime[type] || 'image/png');\r\n\r\n      // Decide whether to download or not chart file\r\n      if (!body.noDownload) {\r\n        response.attachment(\r\n          `${request.params.filename || 'chart'}.${type || 'png'}`\r\n        );\r\n      }\r\n\r\n      // If SVG, return plain content\r\n      return type === 'svg'\r\n        ? response.send(info.data)\r\n        : response.send(Buffer.from(info.data, 'base64'));\r\n    }\r\n  });\r\n};\r\n\r\nexport default (app) => {\r\n  app.post('/', exportHandler);\r\n  app.post('/:filename', exportHandler);\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { promises as fsPromises } from 'fs';\r\nimport { posix } from 'path';\r\n\r\nimport bodyParser from 'body-parser';\r\nimport cors from 'cors';\r\nimport express from 'express';\r\nimport multer from 'multer';\r\nimport http from 'http';\r\nimport https from 'https';\r\n\r\nimport { log } from '../logger.js';\r\nimport rateLimit from './rate_limit.js';\r\nimport { __dirname } from '../utils.js';\r\n\r\nimport healthRoute from './routes/health.js';\r\nimport exportRoutes from './routes/export.js';\r\nimport vswitchRoute from './routes/change-hc-version.js';\r\nimport uiRoute from './routes/ui.js';\r\n\r\n// Create express app\r\nconst app = express();\r\n\r\n// Disable the X-Powered-By header\r\napp.disable('x-powered-by');\r\n\r\n// Enable CORS support\r\napp.use(cors());\r\n\r\n// Enable parsing of form data (files) with Multer package\r\nconst storage = multer.memoryStorage();\r\nconst upload = multer({\r\n    storage,\r\n    limits: {\r\n        fieldsSize: '50MB'\r\n    }\r\n});\r\n\r\napp.use(upload.any());\r\n\r\n// Enable body parser\r\napp.use(bodyParser.json({ limit: '50mb' }));\r\napp.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\r\napp.use(bodyParser.urlencoded({ extended: false, limit: '50mb' }));\r\n\r\n/**\r\n * Error handler function.\r\n *\r\n * @param {object} error - An error object.\r\n * @return {string} - An error message.\r\n */\r\nconst errorHandler = (error) => log(1, `[server] Socket error: ${error}`);\r\n\r\n/**\r\n * Attaches error handlers for a server.\r\n *\r\n * @param {object} server - The http/https server.\r\n */\r\nconst attachErrorHandlers = (server) => {\r\n  server.on('clientError', errorHandler);\r\n  server.on('error', errorHandler);\r\n  server.on('connection', (socket) =>\r\n    socket.on('error', (error) => errorHandler(error, socket))\r\n  );\r\n};\r\n\r\nexport const start = async (serverConfig) => {\r\n  // Stop if not enabled\r\n  if (!serverConfig.enable) {\r\n    return false;\r\n  }\r\n\r\n  // // Get the pool\r\n  // const pool = getPool();\r\n\r\n  // // Try to create browser instance before starting the server\r\n  // const resource = await pool.acquire();\r\n\r\n  // // If not found, throw an error\r\n  // if (!resource.browser) {\r\n  //   log(1, `[s:erver] Could not acquire browser instance.`);\r\n  //   process.exit(1);\r\n  // }\r\n\r\n  // // Release the resource\r\n  // pool.release(resource);\r\n\r\n  // Listen HTTP server\r\n  if (!serverConfig.ssl.enable && !serverConfig.ssl.force) {\r\n    // Main server instance (HTTP)\r\n    const httpServer = http.createServer(app);\r\n    // Attach error handlers and listen to the server\r\n    attachErrorHandlers(httpServer);\r\n    // Listen\r\n    httpServer.listen(serverConfig.port, serverConfig.host);\r\n\r\n    log(\r\n      3,\r\n      `[server] Started HTTP server on ${serverConfig.host}:${serverConfig.port}.`\r\n    );\r\n  }\r\n\r\n  // Listen HTTPS server\r\n  if (serverConfig.ssl.enable) {\r\n    // Set up an SSL server also\r\n    let key, cert;\r\n\r\n    try {\r\n      // Get the SSL key\r\n      key = await fsPromises.readFile(\r\n        posix.join(serverConfig.ssl.certPath, 'server.key'),\r\n        'utf8'\r\n      );\r\n\r\n      // Get the SSL certificate\r\n      cert = await fsPromises.readFile(\r\n        posix.join(serverConfig.ssl.certPath, 'server.crt'),\r\n        'utf8'\r\n      );\r\n    } catch (error) {\r\n      log(\r\n        1,\r\n        `[server] Unable to load key/certificate from ${serverConfig.ssl.certPath}.`\r\n      );\r\n    }\r\n\r\n    if (key && cert) {\r\n      // Main server instance (HTTPS)\r\n      const httpsServer = https.createServer(app);\r\n      // Attach error handlers and listen to the server\r\n      attachErrorHandlers(httpsServer);\r\n      // Listen\r\n      httpsServer.listen(serverConfig.ssl.port, serverConfig.host);\r\n\r\n      log(\r\n        3,\r\n        `[server] Started HTTPS server on ${serverConfig.host}:${serverConfig.ssl.port}.`\r\n      );\r\n    }\r\n  }\r\n\r\n  // Set up static folder's route\r\n  app.use(express.static(posix.join(__dirname, 'public')));\r\n\r\n  // Set up routes\r\n  healthRoute(app);\r\n  exportRoutes(app);\r\n  uiRoute(app);\r\n  vswitchRoute(app);\r\n\r\n  // Enable the rate limiter if config says so\r\n  if (\r\n    serverConfig.rateLimiting &&\r\n    serverConfig.rateLimiting.enable &&\r\n    ![0, NaN].includes(serverConfig.rateLimiting.maxRequests)\r\n  ) {\r\n    rateLimit(app, serverConfig.rateLimiting);\r\n  }\r\n};\r\n\r\n/**\r\n * Returns the express instance.\r\n */\r\nexport const getExpress = () => {\r\n  return express;\r\n};\r\n\r\n/**\r\n * Returns the app instance.\r\n */\r\nexport const getApp = () => {\r\n  return app;\r\n};\r\n\r\n/**\r\n * Adds a middleware to the server.\r\n *\r\n * @param {object} path - An endpoint path to add middlewares to.\r\n * @param {Array} middlewares - An unlimited number of middlewares to use\r\n * against the specific endpoint.\r\n */\r\nexport const use = (path, ...middlewares) => {\r\n  app.use(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Adds a get route to the server.\r\n *\r\n * @param {object} path - An endpoint path to add middlewares to.\r\n * @param {Array} middlewares - An unlimited number of middlewares to use\r\n * against the specific endpoint for GET method.\r\n */\r\nexport const get = (path, ...middlewares) => {\r\n  app.get(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Adds a post route to the server.\r\n *\r\n * @param {object} path - An endpoint path to add middlewares to.\r\n * @param {Array} middlewares - An unlimited number of middlewares to use\r\n * against the specific endpoint for POST method.\r\n */\r\nexport const post = (path, ...middlewares) => {\r\n  app.post(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Forcefully enables rate limiting.\r\n *\r\n * @param {object} limitConfig - The options object for the rate limiter\r\n * configuration.\r\n */\r\nexport const enableRateLimiting = (limitConfig) => {\r\n  return rateLimit(app, limitConfig);\r\n};\r\n\r\nexport default {\r\n  start,\r\n  getExpress,\r\n  getApp,\r\n  use,\r\n  get,\r\n  post,\r\n  enableRateLimiting\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { join } from 'path';\r\n\r\nimport { __dirname } from '../../utils.js';\r\n/**\r\n * Adds the / route for a UI when enabled for the export server\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.get('/', (request, response) => {\r\n        response.sendFile(join(__dirname, 'public', 'index.html'));\r\n      });\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport cache from '../../cache.js';\r\n\r\n/**\r\n * Adds a route that can be used to change the HC version on the server\r\n * TODO: Add auth token and connect to API\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.post('/change-hc-version/:newVersion', async (request, response) => {\r\n        const ctoken = process.env.HIGHCHARTS_ADMIN_TOKEN;\r\n\r\n        if (!ctoken || !ctoken.length) {\r\n          return response.send({\r\n            error: true,\r\n            message:\r\n              'Server not configured to do run-time version changes: HIGHCHARTS_ADMIN_TOKEN not set'\r\n          });\r\n        }\r\n\r\n        const token = request.get('hc-auth');\r\n\r\n        if (!token || token !== ctoken) {\r\n          return response.send({\r\n            error: true,\r\n            message: 'Invalid or missing token: set token in the hc-auth header'\r\n          });\r\n        }\r\n\r\n        const newVersion = request.params.newVersion;\r\n\r\n        if (newVersion) {\r\n          try {\r\n            // eslint-disable-next-line import/no-named-as-default-member\r\n            await cache.updateVersion(newVersion);\r\n          } catch (e) {\r\n            response.send({\r\n              error: true,\r\n              message: e\r\n            });\r\n          }\r\n\r\n          response.send({\r\n            version: cache.version()\r\n          });\r\n        } else {\r\n          response.send({\r\n            error: true,\r\n            message: 'No new version supplied'\r\n          });\r\n        }\r\n      });\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2023, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// Add the main directory in the global object\r\nimport 'colors';\r\n\r\nimport server, { start } from './server/server.js';\r\nimport chart, { findChartSize } from './chart.js';\r\nimport { log, setLogLevel, enableFileLogging } from './logger.js';\r\nimport { killAll, init } from './pool.js';\r\nimport { initDefaultOptions, loadConfigFile } from './config.js';\r\nimport { checkCache } from './cache.js';\r\nimport { mergeConfigOptions } from './utils.js';\r\nimport { defaultConfig } from './schemas/config.js';\r\n\r\nexport default {\r\n  server,\r\n  log,\r\n  findChartSize,\r\n  startExport: chart.startExport,\r\n  startServer: start,\r\n  killPool: killAll,\r\n  initPool: async (options = {}) => {\r\n    const defaultOptions = initDefaultOptions(defaultConfig);\r\n\r\n    // Load an optional config file\r\n    options = await loadConfigFile(mergeConfigOptions(defaultOptions, options));\r\n\r\n    // Set the allowCodeExecution per export module scope\r\n    chart.setAllowCodeExecution(\r\n      options.customCode && options.customCode.allowCodeExecution\r\n    );\r\n\r\n    // Set the log level\r\n    setLogLevel(options.logging && parseInt(options.logging.level));\r\n\r\n    // Set the log file path and name\r\n    if (options.logging && options.logging.dest) {\r\n      enableFileLogging(\r\n        options.logging.dest,\r\n        options.logging.file || 'highcharts-export-server.log'\r\n      );\r\n    }\r\n\r\n    // Check if cache needs to be updated\r\n    await checkCache(options.highcharts || { version: 'latest' });\r\n\r\n    // Init the pool\r\n    await init({\r\n      pool: options.pool || {\r\n        initialWorkers: 1,\r\n        maxWorkers: 1\r\n      },\r\n      puppeteerArgs: options.puppeteer?.args || []\r\n    });\r\n\r\n    chart.setPoolOptions(options);\r\n\r\n    // Return updated options\r\n    return options;\r\n  }\r\n};\r\n"],"names":["dotenv","config","defaultConfig","puppeteer","args","value","type","description","highcharts","version","envLink","cdnURL","coreScripts","modules","indicators","scripts","export","infile","instr","options","outfile","constr","defaultHeight","defaultWidth","defaultScale","height","width","scale","globalOptions","themeOptions","batch","customCode","allowCodeExecution","allowFileResources","callback","resources","loadConfig","createConfig","server","enable","cliName","host","port","ssl","force","certPath","rateLimiting","maxRequests","skipKey","skipToken","pool","initialWorkers","maxWorkers","workLimit","queueSize","timeoutThreshold","acquireTimeout","reaper","benchmarking","listenToProcessExits","payload","logging","level","file","dest","ui","route","other","noLogo","join","nestedArgs","envVars","initConfig","obj","propChain","Object","keys","forEach","k","includes","entry","numEnvVal","item","process","env","find","el","indexOf","split","push","name","substring","toConsole","toFile","pathCreated","levelsDesc","title","color","listeners","key","option","entries","log","newLevel","texts","length","prefix","Date","toString","trim","fn","existsSync","mkdirSync","appendFile","concat","error","console","apply","undefined","__dirname","fileURLToPath","URL","url","clearText","text","rule","replacer","replaceAll","fixType","formats","outType","pop","t","isCorrectJSON","data","parsedData","JSON","parse","stringify","deepCopy","copy","Array","isArray","prototype","hasOwnProperty","call","mergeConfigOptions","newOptions","absoluteProps","mergedOptions","optionsStringify","allowFunctions","startsWith","endsWith","toBoolean","wrapAround","readFileSync","replace","rateLimit","app","limitConfig","msg","rateOptions","max","window","delay","trustProxy","limiter","windowMs","delayMs","handler","request","response","format","json","status","send","message","default","skip","query","access_token","use","async","fetch","requestOptions","Promise","resolve","reject","protocol","https","http","getProtocol","get","res","on","chunk","cachePath","cache","activeManifest","sources","hcVersion","appliedConfig","extractVersion","substr","fetchScript","script","proxyAgent","agent","timeout","statusCode","updateCache","sourcePath","customScripts","allScripts","map","c","m","i","proxyHost","proxyPort","HttpsProxyAgent","fetchedModules","all","writeFileSync","checkCache","manifestPath","requestUpdate","manifest","moduleMap","numberOfModules","some","moduleName","newManifest","saveConfigToManifest","cache$1","newVersion","assign","RANDOM_PID","randomBytes","PUPPETEER_DIR","path","minimalArgs","template","fs","browser","newPage","p","setContent","addScriptTag","evaluate","setupHighcharts","err","$eval","element","errorMessage","_displayErrors","innerHTML","close","__basedir","setAsConfig","page","chart","triggerExport","puppeteerExport","injectedResources","clearInjected","dispose","scriptsToRemove","document","getElementsByTagName","stylesToRemove","linksToRemove","remove","exportBench","exportOptions","requestAnimationFrame","displayErrors","debugger","d","svgBench","isSVG","setPageBench","svgTemplate","strInj","setContentBench","resBench","js","content","files","isLocal","notice","cssBench","css","cssImports","match","cssImportPath","addStyleTag","size","chartHeight","baseVal","chartWidth","parseFloat","Highcharts","charts","vpBench","viewportHeight","Math","ceil","viewportWidth","setViewport","deviceScaleFactor","zoomCallback","body","style","zoom","margin","x","y","getBoundingClientRect","trunc","getClipRegion","round","expBenchmark","outerHTML","createSVG","encoding","clip","race","screenshot","setTimeout","Error","createImage","pdf","createPDF","oldCharts","oldChart","destroy","shift","initDefaultOptions","items","poolOptions","findChartSize","exporting","precision","multiplier","pow","roundNumber","sourceHeight","sourceWidth","doExport","chartJson","endCallback","svg","customCodeOptions","allowCodeExecutionScoped","allowedProps","handledResources","correctResources","propName","handleResources","enabled","optionsName","postWork","then","result","catch","doStraightInject","requestId","exportAsString","stringToExport","chartJSON","startExport","settings","initExportSettings","readFile","getAllowCodeExecution","setAllowCodeExecution","setPoolOptions","puppeteerArgs","performedExports","exportAttempts","timeSpent","droppedExports","spentAverage","poolConfig","factory","create","id","uuid","s","getTime","browserNewPage","isClosed","workCount","random","validate","workerHandle","logLevel","init","allArgs","tryCount","open","launch","headless","userDataDir","e","createBrowser","killAll","code","exit","Pool","min","createRetryIntervalMillis","createTimeoutMillis","acquireTimeoutMillis","destroyTimeoutMillis","idleTimeoutMillis","reapIntervalMillis","propagateCreateError","eventId","resource","initialResources","acquire","promise","release","fail","getPoolInfo","workStart","exportTime","available","borrowed","pending","spareResourceCapacity","pool$1","packageVersion","npm_package_version","serverStartTime","reversedMime","png","jpeg","gif","requestsCounter","beforeRequest","afterRequest","doCallbacks","callbacks","uniqueId","callResponse","exportHandler","start","hrtime","bigint","measureTime","defaultOptions","headers","connection","remoteAddress","connectionAborted","socket","toLowerCase","b64","dataOptions","noDownload","ipRegEx","info","removeAllListeners","Buffer","from","header","attachment","params","filename","express","disable","cors","storage","multer","memoryStorage","upload","limits","fieldsSize","any","bodyParser","limit","urlencoded","extended","errorHandler","attachErrorHandlers","serverConfig","httpServer","createServer","listen","cert","fsPromises","posix","httpsServer","static","bootTime","uptime","floor","highchartsVersion","averageProcessingTime","failedExports","sucessRatio","healthRoute","post","exportRoutes","sendFile","uiRoute","ctoken","HIGHCHARTS_ADMIN_TOKEN","token","vswitchRoute","NaN","getExpress","getApp","middlewares","enableRateLimiting","index","startServer","killPool","initPool","configFile","loadConfigFile","parseInt","logDest","logFile","enableFileLogging"],"mappings":"snBAiBAA,EAAOC,SAIA,MAAMC,EAAgB,CAC3BC,UAAW,CACTC,KAAM,CACJC,MAAO,GACPC,KAAM,WACNC,YAAa,6CAGjBC,WAAY,CACVC,QAAS,CACPJ,MAAO,SACPK,QAAS,qBACTJ,KAAM,SACNC,YAAa,8BAEfI,OAAQ,CACNN,MAAO,+BACPK,QAAS,iBACTJ,KAAM,SACNC,YAAa,6CAEfK,YAAa,CACXF,QAAS,0BACTL,MAAO,CAAC,aAAc,kBAAmB,iBACzCC,KAAM,WACNC,YAAa,qCAEfM,QAAS,CACPH,QAAS,qBACTL,MAAO,CACL,QACA,MACA,QACA,YACA,cACA,uBACA,gBACA,uBACA,eACA,QACA,OACA,mBACA,eACA,cACA,UACA,UACA,WACA,UACA,cACA,YACA,sBACA,SACA,SACA,WACA,YACA,eACA,SACA,eACA,YACA,kBACA,SACA,cACA,mBACA,eACA,cACA,eACA,cACA,cACA,WACA,eACA,WACA,SACA,OACA,WACA,YACA,SACA,qBACA,aACA,WACA,WACA,WACA,WACA,eACA,UACA,kBACA,oBACA,cAEFC,KAAM,WACNC,YAAa,gCAEfO,WAAY,CACVJ,QAAS,wBACTL,MAAO,CAAC,kBACRC,KAAM,WACNC,YAAa,mCAEfQ,QAAS,CACPV,MAAO,CACL,wEACA,0EAEFC,KAAM,WACNC,YACE,sEAGNS,OAAQ,CACNC,OAAQ,CACNZ,OAAO,EACPC,KAAM,SACNC,YACE,8FAEJW,MAAO,CACLb,OAAO,EACPC,KAAM,SACNC,YACE,iFAEJY,QAAS,CACPd,OAAO,EACPC,KAAM,SACNC,YAAa,oCAEfa,QAAS,CACPf,OAAO,EACPC,KAAM,SACNC,YACE,2FAEJD,KAAM,CACJI,QAAS,sBACTL,MAAO,MACPC,KAAM,SACNC,YACE,sEAEJc,OAAQ,CACNX,QAAS,wBACTL,MAAO,QACPC,KAAM,SACNC,YACE,6EAEJe,cAAe,CACbZ,QAAS,wBACTL,MAAO,IACPC,KAAM,SACNC,YACE,gFAEJgB,aAAc,CACZb,QAAS,uBACTL,MAAO,IACPC,KAAM,SACNC,YACE,+EAEJiB,aAAc,CACZ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"}